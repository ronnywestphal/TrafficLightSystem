
Crossing_V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004064  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080041ec  080041ec  000141ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004240  08004240  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004240  08004240  00014240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004248  08004248  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004248  08004248  00014248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800424c  0800424c  0001424c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004250  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000010  08004260  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08004260  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d773  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e5a  00000000  00000000  0002d7b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  0002f610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ab0  00000000  00000000  00030188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025d4d  00000000  00000000  00030c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dea7  00000000  00000000  00056985  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e80cf  00000000  00000000  0006482c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014c8fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002de0  00000000  00000000  0014c94c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080041d4 	.word	0x080041d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080041d4 	.word	0x080041d4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_GPIO_EXTI_Callback>:
  * @brief ISR for buttons (pedestrians) and toggles (cars). It evaluates the system and makes the
  *        appropriate changes and decides the next state in the state machine.
  * @param GPIO_Pin: the pin that initiated the interrupt
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == N_Car_Pin || GPIO_Pin == S_Car_Pin || GPIO_Pin == E_Car_Pin || GPIO_Pin == W_Car_Pin){
 80004d6:	88fb      	ldrh	r3, [r7, #6]
 80004d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80004dc:	d00a      	beq.n	80004f4 <HAL_GPIO_EXTI_Callback+0x28>
 80004de:	88fb      	ldrh	r3, [r7, #6]
 80004e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004e4:	d006      	beq.n	80004f4 <HAL_GPIO_EXTI_Callback+0x28>
 80004e6:	88fb      	ldrh	r3, [r7, #6]
 80004e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80004ec:	d002      	beq.n	80004f4 <HAL_GPIO_EXTI_Callback+0x28>
 80004ee:	88fb      	ldrh	r3, [r7, #6]
 80004f0:	2b10      	cmp	r3, #16
 80004f2:	d141      	bne.n	8000578 <HAL_GPIO_EXTI_Callback+0xac>
		//save vertical and horizontal Cars new state
		carsVertical = HAL_GPIO_ReadPin(N_Car_GPIO_Port, N_Car_Pin)==0 || HAL_GPIO_ReadPin(S_Car_GPIO_Port, S_Car_Pin)==0;
 80004f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004fc:	f001 faaa 	bl	8001a54 <HAL_GPIO_ReadPin>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d007      	beq.n	8000516 <HAL_GPIO_EXTI_Callback+0x4a>
 8000506:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800050a:	4867      	ldr	r0, [pc, #412]	; (80006a8 <HAL_GPIO_EXTI_Callback+0x1dc>)
 800050c:	f001 faa2 	bl	8001a54 <HAL_GPIO_ReadPin>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d101      	bne.n	800051a <HAL_GPIO_EXTI_Callback+0x4e>
 8000516:	2301      	movs	r3, #1
 8000518:	e000      	b.n	800051c <HAL_GPIO_EXTI_Callback+0x50>
 800051a:	2300      	movs	r3, #0
 800051c:	f003 0301 	and.w	r3, r3, #1
 8000520:	b2da      	uxtb	r2, r3
 8000522:	4b62      	ldr	r3, [pc, #392]	; (80006ac <HAL_GPIO_EXTI_Callback+0x1e0>)
 8000524:	701a      	strb	r2, [r3, #0]
		carsHorizontal = HAL_GPIO_ReadPin(E_Car_GPIO_Port, E_Car_Pin)==0 || HAL_GPIO_ReadPin(W_Car_GPIO_Port, W_Car_Pin)==0;
 8000526:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800052a:	485f      	ldr	r0, [pc, #380]	; (80006a8 <HAL_GPIO_EXTI_Callback+0x1dc>)
 800052c:	f001 fa92 	bl	8001a54 <HAL_GPIO_ReadPin>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d006      	beq.n	8000544 <HAL_GPIO_EXTI_Callback+0x78>
 8000536:	2110      	movs	r1, #16
 8000538:	485d      	ldr	r0, [pc, #372]	; (80006b0 <HAL_GPIO_EXTI_Callback+0x1e4>)
 800053a:	f001 fa8b 	bl	8001a54 <HAL_GPIO_ReadPin>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d101      	bne.n	8000548 <HAL_GPIO_EXTI_Callback+0x7c>
 8000544:	2301      	movs	r3, #1
 8000546:	e000      	b.n	800054a <HAL_GPIO_EXTI_Callback+0x7e>
 8000548:	2300      	movs	r3, #0
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	b2da      	uxtb	r2, r3
 8000550:	4b58      	ldr	r3, [pc, #352]	; (80006b4 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000552:	701a      	strb	r2, [r3, #0]

		if (State == Start || State == NoCarState || State == DefaultState || State == StayGreenState) {
 8000554:	4b58      	ldr	r3, [pc, #352]	; (80006b8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d00b      	beq.n	8000574 <HAL_GPIO_EXTI_Callback+0xa8>
 800055c:	4b56      	ldr	r3, [pc, #344]	; (80006b8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b02      	cmp	r3, #2
 8000562:	d007      	beq.n	8000574 <HAL_GPIO_EXTI_Callback+0xa8>
 8000564:	4b54      	ldr	r3, [pc, #336]	; (80006b8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b01      	cmp	r3, #1
 800056a:	d003      	beq.n	8000574 <HAL_GPIO_EXTI_Callback+0xa8>
 800056c:	4b52      	ldr	r3, [pc, #328]	; (80006b8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	2b03      	cmp	r3, #3
 8000572:	d101      	bne.n	8000578 <HAL_GPIO_EXTI_Callback+0xac>
			toggleInterruptNextState();
 8000574:	f000 f8b0 	bl	80006d8 <toggleInterruptNextState>
		}
	}

	if (GPIO_Pin == N_PSw_Pin && !NBtnPressed){
 8000578:	88fb      	ldrh	r3, [r7, #6]
 800057a:	2b80      	cmp	r3, #128	; 0x80
 800057c:	d144      	bne.n	8000608 <HAL_GPIO_EXTI_Callback+0x13c>
 800057e:	4b4f      	ldr	r3, [pc, #316]	; (80006bc <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	f083 0301 	eor.w	r3, r3, #1
 8000586:	b2db      	uxtb	r3, r3
 8000588:	2b00      	cmp	r3, #0
 800058a:	d03d      	beq.n	8000608 <HAL_GPIO_EXTI_Callback+0x13c>
		if (specificPin != S_Blue){
 800058c:	4b4c      	ldr	r3, [pc, #304]	; (80006c0 <HAL_GPIO_EXTI_Callback+0x1f4>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2b15      	cmp	r3, #21
 8000592:	d014      	beq.n	80005be <HAL_GPIO_EXTI_Callback+0xf2>
			if (State != YellowState && greenVertical) {
 8000594:	4b48      	ldr	r3, [pc, #288]	; (80006b8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b04      	cmp	r3, #4
 800059a:	d013      	beq.n	80005c4 <HAL_GPIO_EXTI_Callback+0xf8>
 800059c:	4b49      	ldr	r3, [pc, #292]	; (80006c4 <HAL_GPIO_EXTI_Callback+0x1f8>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d00f      	beq.n	80005c4 <HAL_GPIO_EXTI_Callback+0xf8>
				msTimer = msTimer2 = HAL_GetTick();
 80005a4:	f000 ff8e 	bl	80014c4 <HAL_GetTick>
 80005a8:	4603      	mov	r3, r0
 80005aa:	4a47      	ldr	r2, [pc, #284]	; (80006c8 <HAL_GPIO_EXTI_Callback+0x1fc>)
 80005ac:	6013      	str	r3, [r2, #0]
 80005ae:	4b46      	ldr	r3, [pc, #280]	; (80006c8 <HAL_GPIO_EXTI_Callback+0x1fc>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a46      	ldr	r2, [pc, #280]	; (80006cc <HAL_GPIO_EXTI_Callback+0x200>)
 80005b4:	6013      	str	r3, [r2, #0]
				NextState = BlueState;
 80005b6:	4b46      	ldr	r3, [pc, #280]	; (80006d0 <HAL_GPIO_EXTI_Callback+0x204>)
 80005b8:	2205      	movs	r2, #5
 80005ba:	701a      	strb	r2, [r3, #0]
 80005bc:	e002      	b.n	80005c4 <HAL_GPIO_EXTI_Callback+0xf8>
			}
		} else NextState = BothBlueState;
 80005be:	4b44      	ldr	r3, [pc, #272]	; (80006d0 <HAL_GPIO_EXTI_Callback+0x204>)
 80005c0:	2206      	movs	r2, #6
 80005c2:	701a      	strb	r2, [r3, #0]

		specificPin = N_Blue;
 80005c4:	4b3e      	ldr	r3, [pc, #248]	; (80006c0 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80005c6:	220d      	movs	r2, #13
 80005c8:	701a      	strb	r2, [r3, #0]
		NBtnPressed = true;
 80005ca:	4b3c      	ldr	r3, [pc, #240]	; (80006bc <HAL_GPIO_EXTI_Callback+0x1f0>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	701a      	strb	r2, [r3, #0]
		if ((!greenVertical && !SBtnPressed) || (greenVertical && State == YellowState)){
 80005d0:	4b3c      	ldr	r3, [pc, #240]	; (80006c4 <HAL_GPIO_EXTI_Callback+0x1f8>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	f083 0301 	eor.w	r3, r3, #1
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d006      	beq.n	80005ec <HAL_GPIO_EXTI_Callback+0x120>
 80005de:	4b3d      	ldr	r3, [pc, #244]	; (80006d4 <HAL_GPIO_EXTI_Callback+0x208>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	f083 0301 	eor.w	r3, r3, #1
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d107      	bne.n	80005fc <HAL_GPIO_EXTI_Callback+0x130>
 80005ec:	4b35      	ldr	r3, [pc, #212]	; (80006c4 <HAL_GPIO_EXTI_Callback+0x1f8>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d009      	beq.n	8000608 <HAL_GPIO_EXTI_Callback+0x13c>
 80005f4:	4b30      	ldr	r3, [pc, #192]	; (80006b8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b04      	cmp	r3, #4
 80005fa:	d105      	bne.n	8000608 <HAL_GPIO_EXTI_Callback+0x13c>
			specificPin = 0x80;
 80005fc:	4b30      	ldr	r3, [pc, #192]	; (80006c0 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80005fe:	2280      	movs	r2, #128	; 0x80
 8000600:	701a      	strb	r2, [r3, #0]
			NBtnPressed = false;
 8000602:	4b2e      	ldr	r3, [pc, #184]	; (80006bc <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000604:	2200      	movs	r2, #0
 8000606:	701a      	strb	r2, [r3, #0]
		}
	}

	if (GPIO_Pin == S_PSw_Pin && !SBtnPressed){
 8000608:	88fb      	ldrh	r3, [r7, #6]
 800060a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800060e:	d147      	bne.n	80006a0 <HAL_GPIO_EXTI_Callback+0x1d4>
 8000610:	4b30      	ldr	r3, [pc, #192]	; (80006d4 <HAL_GPIO_EXTI_Callback+0x208>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	f083 0301 	eor.w	r3, r3, #1
 8000618:	b2db      	uxtb	r3, r3
 800061a:	2b00      	cmp	r3, #0
 800061c:	d040      	beq.n	80006a0 <HAL_GPIO_EXTI_Callback+0x1d4>
		if (specificPin != N_Blue){
 800061e:	4b28      	ldr	r3, [pc, #160]	; (80006c0 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b0d      	cmp	r3, #13
 8000624:	d017      	beq.n	8000656 <HAL_GPIO_EXTI_Callback+0x18a>
			if (State != YellowState && !greenVertical) {
 8000626:	4b24      	ldr	r3, [pc, #144]	; (80006b8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b04      	cmp	r3, #4
 800062c:	d016      	beq.n	800065c <HAL_GPIO_EXTI_Callback+0x190>
 800062e:	4b25      	ldr	r3, [pc, #148]	; (80006c4 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	f083 0301 	eor.w	r3, r3, #1
 8000636:	b2db      	uxtb	r3, r3
 8000638:	2b00      	cmp	r3, #0
 800063a:	d00f      	beq.n	800065c <HAL_GPIO_EXTI_Callback+0x190>
				msTimer = msTimer2 = HAL_GetTick();
 800063c:	f000 ff42 	bl	80014c4 <HAL_GetTick>
 8000640:	4603      	mov	r3, r0
 8000642:	4a21      	ldr	r2, [pc, #132]	; (80006c8 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8000644:	6013      	str	r3, [r2, #0]
 8000646:	4b20      	ldr	r3, [pc, #128]	; (80006c8 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a20      	ldr	r2, [pc, #128]	; (80006cc <HAL_GPIO_EXTI_Callback+0x200>)
 800064c:	6013      	str	r3, [r2, #0]
				NextState = BlueState;
 800064e:	4b20      	ldr	r3, [pc, #128]	; (80006d0 <HAL_GPIO_EXTI_Callback+0x204>)
 8000650:	2205      	movs	r2, #5
 8000652:	701a      	strb	r2, [r3, #0]
 8000654:	e002      	b.n	800065c <HAL_GPIO_EXTI_Callback+0x190>
			}
		} else NextState = BothBlueState;
 8000656:	4b1e      	ldr	r3, [pc, #120]	; (80006d0 <HAL_GPIO_EXTI_Callback+0x204>)
 8000658:	2206      	movs	r2, #6
 800065a:	701a      	strb	r2, [r3, #0]

		specificPin = S_Blue;
 800065c:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <HAL_GPIO_EXTI_Callback+0x1f4>)
 800065e:	2215      	movs	r2, #21
 8000660:	701a      	strb	r2, [r3, #0]
		SBtnPressed = true;
 8000662:	4b1c      	ldr	r3, [pc, #112]	; (80006d4 <HAL_GPIO_EXTI_Callback+0x208>)
 8000664:	2201      	movs	r2, #1
 8000666:	701a      	strb	r2, [r3, #0]
		if ((greenVertical && !NBtnPressed) || (!greenVertical && State == YellowState)){
 8000668:	4b16      	ldr	r3, [pc, #88]	; (80006c4 <HAL_GPIO_EXTI_Callback+0x1f8>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d006      	beq.n	800067e <HAL_GPIO_EXTI_Callback+0x1b2>
 8000670:	4b12      	ldr	r3, [pc, #72]	; (80006bc <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	f083 0301 	eor.w	r3, r3, #1
 8000678:	b2db      	uxtb	r3, r3
 800067a:	2b00      	cmp	r3, #0
 800067c:	d10a      	bne.n	8000694 <HAL_GPIO_EXTI_Callback+0x1c8>
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	f083 0301 	eor.w	r3, r3, #1
 8000686:	b2db      	uxtb	r3, r3
 8000688:	2b00      	cmp	r3, #0
 800068a:	d009      	beq.n	80006a0 <HAL_GPIO_EXTI_Callback+0x1d4>
 800068c:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b04      	cmp	r3, #4
 8000692:	d105      	bne.n	80006a0 <HAL_GPIO_EXTI_Callback+0x1d4>
			specificPin = 0x80;
 8000694:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8000696:	2280      	movs	r2, #128	; 0x80
 8000698:	701a      	strb	r2, [r3, #0]
			SBtnPressed = false;
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <HAL_GPIO_EXTI_Callback+0x208>)
 800069c:	2200      	movs	r2, #0
 800069e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80006a0:	bf00      	nop
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	48000400 	.word	0x48000400
 80006ac:	20000124 	.word	0x20000124
 80006b0:	48000800 	.word	0x48000800
 80006b4:	20000125 	.word	0x20000125
 80006b8:	20000118 	.word	0x20000118
 80006bc:	20000126 	.word	0x20000126
 80006c0:	20000000 	.word	0x20000000
 80006c4:	20000128 	.word	0x20000128
 80006c8:	20000120 	.word	0x20000120
 80006cc:	2000011c 	.word	0x2000011c
 80006d0:	20000119 	.word	0x20000119
 80006d4:	20000127 	.word	0x20000127

080006d8 <toggleInterruptNextState>:

/**
  * @brief Called from the ISR if a toggle is switched when the state machine
  * 		  is in either Start, DefaultState, NoCarState or StayGreenState
  */
void toggleInterruptNextState(){
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	if (carsVertical && !carsHorizontal)
 80006dc:	4b20      	ldr	r3, [pc, #128]	; (8000760 <toggleInterruptNextState+0x88>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d010      	beq.n	8000706 <toggleInterruptNextState+0x2e>
 80006e4:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <toggleInterruptNextState+0x8c>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	f083 0301 	eor.w	r3, r3, #1
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d009      	beq.n	8000706 <toggleInterruptNextState+0x2e>
		NextState = greenVertical ? StayGreenState : YellowState;
 80006f2:	4b1d      	ldr	r3, [pc, #116]	; (8000768 <toggleInterruptNextState+0x90>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <toggleInterruptNextState+0x26>
 80006fa:	2203      	movs	r2, #3
 80006fc:	e000      	b.n	8000700 <toggleInterruptNextState+0x28>
 80006fe:	2204      	movs	r2, #4
 8000700:	4b1a      	ldr	r3, [pc, #104]	; (800076c <toggleInterruptNextState+0x94>)
 8000702:	701a      	strb	r2, [r3, #0]
 8000704:	e017      	b.n	8000736 <toggleInterruptNextState+0x5e>
	else if (!carsVertical && carsHorizontal)
 8000706:	4b16      	ldr	r3, [pc, #88]	; (8000760 <toggleInterruptNextState+0x88>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	f083 0301 	eor.w	r3, r3, #1
 800070e:	b2db      	uxtb	r3, r3
 8000710:	2b00      	cmp	r3, #0
 8000712:	d00d      	beq.n	8000730 <toggleInterruptNextState+0x58>
 8000714:	4b13      	ldr	r3, [pc, #76]	; (8000764 <toggleInterruptNextState+0x8c>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d009      	beq.n	8000730 <toggleInterruptNextState+0x58>
		NextState = greenVertical ? YellowState : StayGreenState;
 800071c:	4b12      	ldr	r3, [pc, #72]	; (8000768 <toggleInterruptNextState+0x90>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <toggleInterruptNextState+0x50>
 8000724:	2204      	movs	r2, #4
 8000726:	e000      	b.n	800072a <toggleInterruptNextState+0x52>
 8000728:	2203      	movs	r2, #3
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <toggleInterruptNextState+0x94>)
 800072c:	701a      	strb	r2, [r3, #0]
 800072e:	e002      	b.n	8000736 <toggleInterruptNextState+0x5e>
	else
		NextState = DefaultState;
 8000730:	4b0e      	ldr	r3, [pc, #56]	; (800076c <toggleInterruptNextState+0x94>)
 8000732:	2201      	movs	r2, #1
 8000734:	701a      	strb	r2, [r3, #0]

	if (NextState == YellowState) yellowLeds(); //instant if no other cars (and not pedestrianGreenWait)
 8000736:	4b0d      	ldr	r3, [pc, #52]	; (800076c <toggleInterruptNextState+0x94>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b04      	cmp	r3, #4
 800073c:	d101      	bne.n	8000742 <toggleInterruptNextState+0x6a>
 800073e:	f000 f81b 	bl	8000778 <yellowLeds>
	if (NextState != DefaultState || PreviousState == StayGreenState) msTimer2 = HAL_GetTick(); //car arrives in toggleState...
 8000742:	4b0a      	ldr	r3, [pc, #40]	; (800076c <toggleInterruptNextState+0x94>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b01      	cmp	r3, #1
 8000748:	d103      	bne.n	8000752 <toggleInterruptNextState+0x7a>
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <toggleInterruptNextState+0x98>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	2b03      	cmp	r3, #3
 8000750:	d104      	bne.n	800075c <toggleInterruptNextState+0x84>
 8000752:	f000 feb7 	bl	80014c4 <HAL_GetTick>
 8000756:	4603      	mov	r3, r0
 8000758:	4a06      	ldr	r2, [pc, #24]	; (8000774 <toggleInterruptNextState+0x9c>)
 800075a:	6013      	str	r3, [r2, #0]
																							 //...reset timer => wait redDelayMax
}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000124 	.word	0x20000124
 8000764:	20000125 	.word	0x20000125
 8000768:	20000128 	.word	0x20000128
 800076c:	20000119 	.word	0x20000119
 8000770:	2000011a 	.word	0x2000011a
 8000774:	20000120 	.word	0x20000120

08000778 <yellowLeds>:

/**
  * @brief sets the cars LEDs to yellow and pedestrians LEDs to red
  */
void yellowLeds(){
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
	gpio_clearAllNotBlue();
 800077c:	f000 f9e2 	bl	8000b44 <gpio_clearAllNotBlue>
	gpio_setMultipleLights(yellowState);
 8000780:	4805      	ldr	r0, [pc, #20]	; (8000798 <yellowLeds+0x20>)
 8000782:	f000 f937 	bl	80009f4 <gpio_setMultipleLights>
	LED_pattern_transmit();
 8000786:	f000 fa11 	bl	8000bac <LED_pattern_transmit>
	msTimer2 = HAL_GetTick();
 800078a:	f000 fe9b 	bl	80014c4 <HAL_GetTick>
 800078e:	4603      	mov	r3, r0
 8000790:	4a02      	ldr	r2, [pc, #8]	; (800079c <yellowLeds+0x24>)
 8000792:	6013      	str	r3, [r2, #0]
}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	080041f4 	.word	0x080041f4
 800079c:	20000120 	.word	0x20000120

080007a0 <checkNextState>:

/**
  * @brief called after a yellow light when the next state of the state machine needs to be evaluated
  */
void checkNextState(){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	if (State == BlueState) {
 80007a4:	4b28      	ldr	r3, [pc, #160]	; (8000848 <checkNextState+0xa8>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b05      	cmp	r3, #5
 80007aa:	d102      	bne.n	80007b2 <checkNextState+0x12>
		afterBlueState();
 80007ac:	f000 f8ea 	bl	8000984 <afterBlueState>
			NextState = BlueState;
			nextDirection();
			msTimer = msTimer2 = HAL_GetTick();
		}
	}
}
 80007b0:	e048      	b.n	8000844 <checkNextState+0xa4>
	else if (carsVertical && !carsHorizontal){
 80007b2:	4b26      	ldr	r3, [pc, #152]	; (800084c <checkNextState+0xac>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d014      	beq.n	80007e4 <checkNextState+0x44>
 80007ba:	4b25      	ldr	r3, [pc, #148]	; (8000850 <checkNextState+0xb0>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	f083 0301 	eor.w	r3, r3, #1
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d00d      	beq.n	80007e4 <checkNextState+0x44>
		gpio_clearAllNotBlue();
 80007c8:	f000 f9bc 	bl	8000b44 <gpio_clearAllNotBlue>
		gpio_setMultipleLights(verticalGreen);
 80007cc:	4821      	ldr	r0, [pc, #132]	; (8000854 <checkNextState+0xb4>)
 80007ce:	f000 f911 	bl	80009f4 <gpio_setMultipleLights>
		LED_pattern_transmit();
 80007d2:	f000 f9eb 	bl	8000bac <LED_pattern_transmit>
		greenVertical = true;
 80007d6:	4b20      	ldr	r3, [pc, #128]	; (8000858 <checkNextState+0xb8>)
 80007d8:	2201      	movs	r2, #1
 80007da:	701a      	strb	r2, [r3, #0]
		NextState = StayGreenState;
 80007dc:	4b1f      	ldr	r3, [pc, #124]	; (800085c <checkNextState+0xbc>)
 80007de:	2203      	movs	r2, #3
 80007e0:	701a      	strb	r2, [r3, #0]
 80007e2:	e02f      	b.n	8000844 <checkNextState+0xa4>
	else if (!carsVertical && carsHorizontal){
 80007e4:	4b19      	ldr	r3, [pc, #100]	; (800084c <checkNextState+0xac>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	f083 0301 	eor.w	r3, r3, #1
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d011      	beq.n	8000816 <checkNextState+0x76>
 80007f2:	4b17      	ldr	r3, [pc, #92]	; (8000850 <checkNextState+0xb0>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d00d      	beq.n	8000816 <checkNextState+0x76>
		gpio_clearAllNotBlue();
 80007fa:	f000 f9a3 	bl	8000b44 <gpio_clearAllNotBlue>
		gpio_setMultipleLights(horizontalGreen);
 80007fe:	4818      	ldr	r0, [pc, #96]	; (8000860 <checkNextState+0xc0>)
 8000800:	f000 f8f8 	bl	80009f4 <gpio_setMultipleLights>
		LED_pattern_transmit();
 8000804:	f000 f9d2 	bl	8000bac <LED_pattern_transmit>
		greenVertical = false;
 8000808:	4b13      	ldr	r3, [pc, #76]	; (8000858 <checkNextState+0xb8>)
 800080a:	2200      	movs	r2, #0
 800080c:	701a      	strb	r2, [r3, #0]
		NextState = StayGreenState;
 800080e:	4b13      	ldr	r3, [pc, #76]	; (800085c <checkNextState+0xbc>)
 8000810:	2203      	movs	r2, #3
 8000812:	701a      	strb	r2, [r3, #0]
 8000814:	e016      	b.n	8000844 <checkNextState+0xa4>
		if (specificPin == 0x80)
 8000816:	4b13      	ldr	r3, [pc, #76]	; (8000864 <checkNextState+0xc4>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2b80      	cmp	r3, #128	; 0x80
 800081c:	d103      	bne.n	8000826 <checkNextState+0x86>
			NextState = Start;
 800081e:	4b0f      	ldr	r3, [pc, #60]	; (800085c <checkNextState+0xbc>)
 8000820:	2200      	movs	r2, #0
 8000822:	701a      	strb	r2, [r3, #0]
}
 8000824:	e00e      	b.n	8000844 <checkNextState+0xa4>
			NextState = BlueState;
 8000826:	4b0d      	ldr	r3, [pc, #52]	; (800085c <checkNextState+0xbc>)
 8000828:	2205      	movs	r2, #5
 800082a:	701a      	strb	r2, [r3, #0]
			nextDirection();
 800082c:	f000 f820 	bl	8000870 <nextDirection>
			msTimer = msTimer2 = HAL_GetTick();
 8000830:	f000 fe48 	bl	80014c4 <HAL_GetTick>
 8000834:	4603      	mov	r3, r0
 8000836:	4a0c      	ldr	r2, [pc, #48]	; (8000868 <checkNextState+0xc8>)
 8000838:	6013      	str	r3, [r2, #0]
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <checkNextState+0xc8>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a0b      	ldr	r2, [pc, #44]	; (800086c <checkNextState+0xcc>)
 8000840:	6013      	str	r3, [r2, #0]
}
 8000842:	e7ff      	b.n	8000844 <checkNextState+0xa4>
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000118 	.word	0x20000118
 800084c:	20000124 	.word	0x20000124
 8000850:	20000125 	.word	0x20000125
 8000854:	080041ec 	.word	0x080041ec
 8000858:	20000128 	.word	0x20000128
 800085c:	20000119 	.word	0x20000119
 8000860:	080041f0 	.word	0x080041f0
 8000864:	20000000 	.word	0x20000000
 8000868:	20000120 	.word	0x20000120
 800086c:	2000011c 	.word	0x2000011c

08000870 <nextDirection>:

/**
  * @brief switches the direction of the LEDs
  */
void nextDirection(){
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
	gpio_clearAllPins();
 8000874:	f000 f980 	bl	8000b78 <gpio_clearAllPins>
	if (greenVertical){
 8000878:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <nextDirection+0x48>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d003      	beq.n	8000888 <nextDirection+0x18>
		gpio_setMultipleLights(horizontalGreen);
 8000880:	480e      	ldr	r0, [pc, #56]	; (80008bc <nextDirection+0x4c>)
 8000882:	f000 f8b7 	bl	80009f4 <gpio_setMultipleLights>
 8000886:	e002      	b.n	800088e <nextDirection+0x1e>
	} else{
		gpio_setMultipleLights(verticalGreen);
 8000888:	480d      	ldr	r0, [pc, #52]	; (80008c0 <nextDirection+0x50>)
 800088a:	f000 f8b3 	bl	80009f4 <gpio_setMultipleLights>
	}
	greenVertical = greenVertical ? false : true;
 800088e:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <nextDirection+0x48>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	f083 0301 	eor.w	r3, r3, #1
 8000896:	b2da      	uxtb	r2, r3
 8000898:	4b07      	ldr	r3, [pc, #28]	; (80008b8 <nextDirection+0x48>)
 800089a:	701a      	strb	r2, [r3, #0]

	LED_pattern_transmit();
 800089c:	f000 f986 	bl	8000bac <LED_pattern_transmit>
	msTimer = msTimer2 = HAL_GetTick();
 80008a0:	f000 fe10 	bl	80014c4 <HAL_GetTick>
 80008a4:	4603      	mov	r3, r0
 80008a6:	4a07      	ldr	r2, [pc, #28]	; (80008c4 <nextDirection+0x54>)
 80008a8:	6013      	str	r3, [r2, #0]
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <nextDirection+0x54>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a06      	ldr	r2, [pc, #24]	; (80008c8 <nextDirection+0x58>)
 80008b0:	6013      	str	r3, [r2, #0]
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000128 	.word	0x20000128
 80008bc:	080041f0 	.word	0x080041f0
 80008c0:	080041ec 	.word	0x080041ec
 80008c4:	20000120 	.word	0x20000120
 80008c8:	2000011c 	.word	0x2000011c

080008cc <blueStateToggle>:

/**
  * @brief toggles the blue LEDs after a pedestrian has pushed a button
  * 		  if another pedestrian pushes the other button then all blue LEDs will toggle
  */
void blueStateToggle(){
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
	if (HAL_GetTick() - msTimer2 > pedestrianDelay - orangeDelay){
 80008d0:	f000 fdf8 	bl	80014c4 <HAL_GetTick>
 80008d4:	4602      	mov	r2, r0
 80008d6:	4b12      	ldr	r3, [pc, #72]	; (8000920 <blueStateToggle+0x54>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	1ad3      	subs	r3, r2, r3
 80008dc:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80008e0:	d904      	bls.n	80008ec <blueStateToggle+0x20>
		gpio_clearAllNotBlue();
 80008e2:	f000 f92f 	bl	8000b44 <gpio_clearAllNotBlue>
		gpio_setMultipleLights(yellowState);
 80008e6:	480f      	ldr	r0, [pc, #60]	; (8000924 <blueStateToggle+0x58>)
 80008e8:	f000 f884 	bl	80009f4 <gpio_setMultipleLights>
	}

	if (State == BothBlueState){
 80008ec:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <blueStateToggle+0x5c>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b06      	cmp	r3, #6
 80008f2:	d106      	bne.n	8000902 <blueStateToggle+0x36>
		gpio_togglePin(N_Blue);
 80008f4:	200d      	movs	r0, #13
 80008f6:	f000 f8a3 	bl	8000a40 <gpio_togglePin>
		gpio_togglePin(S_Blue);
 80008fa:	2015      	movs	r0, #21
 80008fc:	f000 f8a0 	bl	8000a40 <gpio_togglePin>
 8000900:	e004      	b.n	800090c <blueStateToggle+0x40>
	} else gpio_togglePin(specificPin);
 8000902:	4b0a      	ldr	r3, [pc, #40]	; (800092c <blueStateToggle+0x60>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f89a 	bl	8000a40 <gpio_togglePin>

	LED_pattern_transmit();
 800090c:	f000 f94e 	bl	8000bac <LED_pattern_transmit>
	msTimer = HAL_GetTick();
 8000910:	f000 fdd8 	bl	80014c4 <HAL_GetTick>
 8000914:	4603      	mov	r3, r0
 8000916:	4a06      	ldr	r2, [pc, #24]	; (8000930 <blueStateToggle+0x64>)
 8000918:	6013      	str	r3, [r2, #0]
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000120 	.word	0x20000120
 8000924:	080041f4 	.word	0x080041f4
 8000928:	20000118 	.word	0x20000118
 800092c:	20000000 	.word	0x20000000
 8000930:	2000011c 	.word	0x2000011c

08000934 <endBlueState>:

/**
  * @brief called when all blue LEDs stops blinking
  */
void endBlueState(){
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
	clearPin(specificPin);
 8000938:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <endBlueState+0x3c>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	4618      	mov	r0, r3
 800093e:	f000 f8bf 	bl	8000ac0 <clearPin>
	checkNextState();
 8000942:	f7ff ff2d 	bl	80007a0 <checkNextState>
	msTimer = msTimer2 = HAL_GetTick();
 8000946:	f000 fdbd 	bl	80014c4 <HAL_GetTick>
 800094a:	4603      	mov	r3, r0
 800094c:	4a09      	ldr	r2, [pc, #36]	; (8000974 <endBlueState+0x40>)
 800094e:	6013      	str	r3, [r2, #0]
 8000950:	4b08      	ldr	r3, [pc, #32]	; (8000974 <endBlueState+0x40>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a08      	ldr	r2, [pc, #32]	; (8000978 <endBlueState+0x44>)
 8000956:	6013      	str	r3, [r2, #0]
	SBtnPressed = false;
 8000958:	4b08      	ldr	r3, [pc, #32]	; (800097c <endBlueState+0x48>)
 800095a:	2200      	movs	r2, #0
 800095c:	701a      	strb	r2, [r3, #0]
	NBtnPressed = false;
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <endBlueState+0x4c>)
 8000960:	2200      	movs	r2, #0
 8000962:	701a      	strb	r2, [r3, #0]
	specificPin = 0x80;
 8000964:	4b02      	ldr	r3, [pc, #8]	; (8000970 <endBlueState+0x3c>)
 8000966:	2280      	movs	r2, #128	; 0x80
 8000968:	701a      	strb	r2, [r3, #0]
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000000 	.word	0x20000000
 8000974:	20000120 	.word	0x20000120
 8000978:	2000011c 	.word	0x2000011c
 800097c:	20000127 	.word	0x20000127
 8000980:	20000126 	.word	0x20000126

08000984 <afterBlueState>:

/**
  * @brief decides the next state in the state machine after the blue LEDs stops blinking
  * 		  if there are cars in only one direction - that direction will receive and/or stay green
  */
void afterBlueState(){
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
	nextDirection();
 8000988:	f7ff ff72 	bl	8000870 <nextDirection>
	if (specificPin == N_Blue && !carsVertical && carsHorizontal)
 800098c:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <afterBlueState+0x60>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b0d      	cmp	r3, #13
 8000992:	d10e      	bne.n	80009b2 <afterBlueState+0x2e>
 8000994:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <afterBlueState+0x64>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	f083 0301 	eor.w	r3, r3, #1
 800099c:	b2db      	uxtb	r3, r3
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d007      	beq.n	80009b2 <afterBlueState+0x2e>
 80009a2:	4b12      	ldr	r3, [pc, #72]	; (80009ec <afterBlueState+0x68>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d003      	beq.n	80009b2 <afterBlueState+0x2e>
		NextState = StayGreenState;
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <afterBlueState+0x6c>)
 80009ac:	2203      	movs	r2, #3
 80009ae:	701a      	strb	r2, [r3, #0]
 80009b0:	e016      	b.n	80009e0 <afterBlueState+0x5c>
	else if (specificPin == S_Blue && carsVertical && !carsHorizontal)
 80009b2:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <afterBlueState+0x60>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	2b15      	cmp	r3, #21
 80009b8:	d10e      	bne.n	80009d8 <afterBlueState+0x54>
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <afterBlueState+0x64>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d00a      	beq.n	80009d8 <afterBlueState+0x54>
 80009c2:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <afterBlueState+0x68>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	f083 0301 	eor.w	r3, r3, #1
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d003      	beq.n	80009d8 <afterBlueState+0x54>
		NextState = StayGreenState;
 80009d0:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <afterBlueState+0x6c>)
 80009d2:	2203      	movs	r2, #3
 80009d4:	701a      	strb	r2, [r3, #0]
 80009d6:	e003      	b.n	80009e0 <afterBlueState+0x5c>
	else NextState = PedestrianGreenWait;
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <afterBlueState+0x6c>)
 80009da:	2207      	movs	r2, #7
 80009dc:	701a      	strb	r2, [r3, #0]
}
 80009de:	bf00      	nop
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20000000 	.word	0x20000000
 80009e8:	20000124 	.word	0x20000124
 80009ec:	20000125 	.word	0x20000125
 80009f0:	20000119 	.word	0x20000119

080009f4 <gpio_setMultipleLights>:

/**
 * @brief sets all LEDs in a specified pattern
 * @param ledPattern: an array that contains the pattern that specifies a green-lights-state or yellow-lights-state
 */
void gpio_setMultipleLights(uint8_t ledPattern[]){
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	for (int i=0; i<3; i++){
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	e011      	b.n	8000a26 <gpio_setMultipleLights+0x32>
		LedRegister.ledReg[i] |= ledPattern[i];
 8000a02:	4a0e      	ldr	r2, [pc, #56]	; (8000a3c <gpio_setMultipleLights+0x48>)
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	4413      	add	r3, r2
 8000a08:	781a      	ldrb	r2, [r3, #0]
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	6879      	ldr	r1, [r7, #4]
 8000a0e:	440b      	add	r3, r1
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	4313      	orrs	r3, r2
 8000a14:	b2d9      	uxtb	r1, r3
 8000a16:	4a09      	ldr	r2, [pc, #36]	; (8000a3c <gpio_setMultipleLights+0x48>)
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	460a      	mov	r2, r1
 8000a1e:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<3; i++){
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	3301      	adds	r3, #1
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	2b02      	cmp	r3, #2
 8000a2a:	ddea      	ble.n	8000a02 <gpio_setMultipleLights+0xe>
	}
}
 8000a2c:	bf00      	nop
 8000a2e:	bf00      	nop
 8000a30:	3714      	adds	r7, #20
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	2000002c 	.word	0x2000002c

08000a40 <gpio_togglePin>:

/**
 * @brief toggles the specified LED
 * @param pinNumber: the pin for the specified LED
 */
void gpio_togglePin(GpioPinPosition pinNumber){
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	71fb      	strb	r3, [r7, #7]
	if (pinState(pinNumber))
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f000 f811 	bl	8000a74 <pinState>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d004      	beq.n	8000a62 <gpio_togglePin+0x22>
		clearPin(pinNumber);
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f000 f830 	bl	8000ac0 <clearPin>
	else setPin(pinNumber);
}
 8000a60:	e003      	b.n	8000a6a <gpio_togglePin+0x2a>
	else setPin(pinNumber);
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f000 f84d 	bl	8000b04 <setPin>
}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
	...

08000a74 <pinState>:
/**
 * @brief checks if the specified LED is on or off
 * @param pinNumber: the pin for the specified LED
 * @return true if the LED is ON, false otherwise
 */
bool pinState(GpioPinPosition pinNumber){
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71fb      	strb	r3, [r7, #7]
	return (LedRegister.ledReg[pinNumber/8] & (1U << pinNumber % 8)) >> pinNumber % 8 != 0;
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	08db      	lsrs	r3, r3, #3
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	461a      	mov	r2, r3
 8000a86:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <pinState+0x48>)
 8000a88:	5c9b      	ldrb	r3, [r3, r2]
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	2201      	movs	r2, #1
 8000a94:	fa02 f303 	lsl.w	r3, r2, r3
 8000a98:	ea01 0203 	and.w	r2, r1, r3
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	f003 0307 	and.w	r3, r3, #7
 8000aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	bf14      	ite	ne
 8000aaa:	2301      	movne	r3, #1
 8000aac:	2300      	moveq	r3, #0
 8000aae:	b2db      	uxtb	r3, r3
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	2000002c 	.word	0x2000002c

08000ac0 <clearPin>:

/**
 * @brief turns off the specified LED
 * @param pinNumber: the pin for the specified LED
 */
void clearPin(GpioPinPosition pinNumber){
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	71fb      	strb	r3, [r7, #7]
	LedRegister.ledReg[pinNumber/8] &= ~(1U << pinNumber % 8);
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	08db      	lsrs	r3, r3, #3
 8000ace:	b2d8      	uxtb	r0, r3
 8000ad0:	4602      	mov	r2, r0
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <clearPin+0x40>)
 8000ad4:	5c9a      	ldrb	r2, [r3, r2]
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	f003 0307 	and.w	r3, r3, #7
 8000adc:	2101      	movs	r1, #1
 8000ade:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	43db      	mvns	r3, r3
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	4601      	mov	r1, r0
 8000aea:	4013      	ands	r3, r2
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <clearPin+0x40>)
 8000af0:	545a      	strb	r2, [r3, r1]
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	2000002c 	.word	0x2000002c

08000b04 <setPin>:
/**
 * @brief turns on the specified LED
 * @param pinNumber: the pin for the specified LED
 */
void setPin(GpioPinPosition pinNumber){
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
	LedRegister.ledReg[pinNumber/8] |= (1U << pinNumber % 8);
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	08db      	lsrs	r3, r3, #3
 8000b12:	b2d8      	uxtb	r0, r3
 8000b14:	4602      	mov	r2, r0
 8000b16:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <setPin+0x3c>)
 8000b18:	5c9a      	ldrb	r2, [r3, r2]
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	f003 0307 	and.w	r3, r3, #7
 8000b20:	2101      	movs	r1, #1
 8000b22:	fa01 f303 	lsl.w	r3, r1, r3
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	4601      	mov	r1, r0
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	b2da      	uxtb	r2, r3
 8000b2e:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <setPin+0x3c>)
 8000b30:	545a      	strb	r2, [r3, r1]
}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	2000002c 	.word	0x2000002c

08000b44 <gpio_clearAllNotBlue>:
/**
 * @brief turns off all except the blue LEDs
 */
void gpio_clearAllNotBlue(){
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
	LedRegister.ledReg[0] = 0U;
 8000b48:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <gpio_clearAllNotBlue+0x30>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	701a      	strb	r2, [r3, #0]
	LedRegister.ledReg[1] &= 1U<<S_Blue%8;
 8000b4e:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <gpio_clearAllNotBlue+0x30>)
 8000b50:	785b      	ldrb	r3, [r3, #1]
 8000b52:	f003 0320 	and.w	r3, r3, #32
 8000b56:	b2da      	uxtb	r2, r3
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <gpio_clearAllNotBlue+0x30>)
 8000b5a:	705a      	strb	r2, [r3, #1]
	LedRegister.ledReg[2] &= 1U<<N_Blue%8;
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <gpio_clearAllNotBlue+0x30>)
 8000b5e:	789b      	ldrb	r3, [r3, #2]
 8000b60:	f003 0320 	and.w	r3, r3, #32
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	4b03      	ldr	r3, [pc, #12]	; (8000b74 <gpio_clearAllNotBlue+0x30>)
 8000b68:	709a      	strb	r2, [r3, #2]
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	2000002c 	.word	0x2000002c

08000b78 <gpio_clearAllPins>:
/**
 * @brief turns of all LEDs
 */
void gpio_clearAllPins(){
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
	for (int i=0; i<3; i++){
 8000b7e:	2300      	movs	r3, #0
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	e007      	b.n	8000b94 <gpio_clearAllPins+0x1c>
		LedRegister.ledReg[i] = 0U;
 8000b84:	4a08      	ldr	r2, [pc, #32]	; (8000ba8 <gpio_clearAllPins+0x30>)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4413      	add	r3, r2
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<3; i++){
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	3301      	adds	r3, #1
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	ddf4      	ble.n	8000b84 <gpio_clearAllPins+0xc>
	}
}
 8000b9a:	bf00      	nop
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	2000002c 	.word	0x2000002c

08000bac <LED_pattern_transmit>:

/**
 * @brief transmits the current state of the LEDs to the shift registers
 */
void LED_pattern_transmit()
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, _595_Enable_Pin, GPIO_PIN_RESET);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2180      	movs	r1, #128	; 0x80
 8000bb4:	480e      	ldr	r0, [pc, #56]	; (8000bf0 <LED_pattern_transmit+0x44>)
 8000bb6:	f000 ff65 	bl	8001a84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, _595_STCP_Pin, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bc0:	480c      	ldr	r0, [pc, #48]	; (8000bf4 <LED_pattern_transmit+0x48>)
 8000bc2:	f000 ff5f 	bl	8001a84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, _595_Reset_Pin, GPIO_PIN_SET);
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd0:	f000 ff58 	bl	8001a84 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, LedRegister.ledReg, 3, 100);
 8000bd4:	2364      	movs	r3, #100	; 0x64
 8000bd6:	2203      	movs	r2, #3
 8000bd8:	4907      	ldr	r1, [pc, #28]	; (8000bf8 <LED_pattern_transmit+0x4c>)
 8000bda:	4808      	ldr	r0, [pc, #32]	; (8000bfc <LED_pattern_transmit+0x50>)
 8000bdc:	f002 fb45 	bl	800326a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, _595_STCP_Pin, GPIO_PIN_SET);
 8000be0:	2201      	movs	r2, #1
 8000be2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000be6:	4803      	ldr	r0, [pc, #12]	; (8000bf4 <LED_pattern_transmit+0x48>)
 8000be8:	f000 ff4c 	bl	8001a84 <HAL_GPIO_WritePin>
}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	48000800 	.word	0x48000800
 8000bf4:	48000400 	.word	0x48000400
 8000bf8:	2000002c 	.word	0x2000002c
 8000bfc:	20000030 	.word	0x20000030

08000c00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c04:	f000 fbf5 	bl	80013f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c08:	f000 f809 	bl	8000c1e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c0c:	f000 f8c6 	bl	8000d9c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c10:	f000 f894 	bl	8000d3c <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000c14:	f000 f854 	bl	8000cc0 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

#ifdef RUN_TEST_PROGRAM
	testing();
#else
  stateCrossroad();
 8000c18:	f000 f9a8 	bl	8000f6c <stateCrossroad>
#endif
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <main+0x1c>

08000c1e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b096      	sub	sp, #88	; 0x58
 8000c22:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	2244      	movs	r2, #68	; 0x44
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f003 fac9 	bl	80041c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c32:	463b      	mov	r3, r7
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c40:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c44:	f000 ff5c 	bl	8001b00 <HAL_PWREx_ControlVoltageScaling>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c4e:	f000 f987 	bl	8000f60 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c52:	2302      	movs	r3, #2
 8000c54:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c5c:	2310      	movs	r3, #16
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c60:	2302      	movs	r3, #2
 8000c62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c64:	2302      	movs	r3, #2
 8000c66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000c6c:	230a      	movs	r3, #10
 8000c6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c70:	2307      	movs	r3, #7
 8000c72:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c74:	2302      	movs	r3, #2
 8000c76:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	4618      	mov	r0, r3
 8000c82:	f000 ff93 	bl	8001bac <HAL_RCC_OscConfig>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000c8c:	f000 f968 	bl	8000f60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c90:	230f      	movs	r3, #15
 8000c92:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c94:	2303      	movs	r3, #3
 8000c96:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ca4:	463b      	mov	r3, r7
 8000ca6:	2104      	movs	r1, #4
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f001 fb5b 	bl	8002364 <HAL_RCC_ClockConfig>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000cb4:	f000 f954 	bl	8000f60 <Error_Handler>
  }
}
 8000cb8:	bf00      	nop
 8000cba:	3758      	adds	r7, #88	; 0x58
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0

  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000cc4:	4b1b      	ldr	r3, [pc, #108]	; (8000d34 <MX_SPI3_Init+0x74>)
 8000cc6:	4a1c      	ldr	r2, [pc, #112]	; (8000d38 <MX_SPI3_Init+0x78>)
 8000cc8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000cca:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <MX_SPI3_Init+0x74>)
 8000ccc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cd0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000cd2:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <MX_SPI3_Init+0x74>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cd8:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <MX_SPI3_Init+0x74>)
 8000cda:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000cde:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ce0:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <MX_SPI3_Init+0x74>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ce6:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <MX_SPI3_Init+0x74>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000cec:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <MX_SPI3_Init+0x74>)
 8000cee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cf2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <MX_SPI3_Init+0x74>)
 8000cf6:	2228      	movs	r2, #40	; 0x28
 8000cf8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <MX_SPI3_Init+0x74>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d00:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <MX_SPI3_Init+0x74>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d06:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <MX_SPI3_Init+0x74>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000d0c:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <MX_SPI3_Init+0x74>)
 8000d0e:	2207      	movs	r2, #7
 8000d10:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d12:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <MX_SPI3_Init+0x74>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <MX_SPI3_Init+0x74>)
 8000d1a:	2208      	movs	r2, #8
 8000d1c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d1e:	4805      	ldr	r0, [pc, #20]	; (8000d34 <MX_SPI3_Init+0x74>)
 8000d20:	f002 fa00 	bl	8003124 <HAL_SPI_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000d2a:	f000 f919 	bl	8000f60 <Error_Handler>
  }

}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000030 	.word	0x20000030
 8000d38:	40003c00 	.word	0x40003c00

08000d3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000d40:	4b14      	ldr	r3, [pc, #80]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d42:	4a15      	ldr	r2, [pc, #84]	; (8000d98 <MX_USART2_UART_Init+0x5c>)
 8000d44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d46:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d4e:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d54:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d62:	220c      	movs	r2, #12
 8000d64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d66:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d6c:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d7e:	4805      	ldr	r0, [pc, #20]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d80:	f002 fd46 	bl	8003810 <HAL_UART_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d8a:	f000 f8e9 	bl	8000f60 <Error_Handler>
  }

}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000094 	.word	0x20000094
 8000d98:	40004400 	.word	0x40004400

08000d9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08a      	sub	sp, #40	; 0x28
 8000da0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
 8000db0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db2:	4b68      	ldr	r3, [pc, #416]	; (8000f54 <MX_GPIO_Init+0x1b8>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db6:	4a67      	ldr	r2, [pc, #412]	; (8000f54 <MX_GPIO_Init+0x1b8>)
 8000db8:	f043 0304 	orr.w	r3, r3, #4
 8000dbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dbe:	4b65      	ldr	r3, [pc, #404]	; (8000f54 <MX_GPIO_Init+0x1b8>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc2:	f003 0304 	and.w	r3, r3, #4
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dca:	4b62      	ldr	r3, [pc, #392]	; (8000f54 <MX_GPIO_Init+0x1b8>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dce:	4a61      	ldr	r2, [pc, #388]	; (8000f54 <MX_GPIO_Init+0x1b8>)
 8000dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd6:	4b5f      	ldr	r3, [pc, #380]	; (8000f54 <MX_GPIO_Init+0x1b8>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de2:	4b5c      	ldr	r3, [pc, #368]	; (8000f54 <MX_GPIO_Init+0x1b8>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de6:	4a5b      	ldr	r2, [pc, #364]	; (8000f54 <MX_GPIO_Init+0x1b8>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dee:	4b59      	ldr	r3, [pc, #356]	; (8000f54 <MX_GPIO_Init+0x1b8>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	60bb      	str	r3, [r7, #8]
 8000df8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfa:	4b56      	ldr	r3, [pc, #344]	; (8000f54 <MX_GPIO_Init+0x1b8>)
 8000dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfe:	4a55      	ldr	r2, [pc, #340]	; (8000f54 <MX_GPIO_Init+0x1b8>)
 8000e00:	f043 0302 	orr.w	r3, r3, #2
 8000e04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e06:	4b53      	ldr	r3, [pc, #332]	; (8000f54 <MX_GPIO_Init+0x1b8>)
 8000e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0a:	f003 0302 	and.w	r3, r3, #2
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|_595_Reset_Pin, GPIO_PIN_RESET);
 8000e12:	2200      	movs	r2, #0
 8000e14:	f44f 7108 	mov.w	r1, #544	; 0x220
 8000e18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e1c:	f000 fe32 	bl	8001a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(_595_STCP_GPIO_Port, _595_STCP_Pin, GPIO_PIN_RESET);
 8000e20:	2200      	movs	r2, #0
 8000e22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e26:	484c      	ldr	r0, [pc, #304]	; (8000f58 <MX_GPIO_Init+0x1bc>)
 8000e28:	f000 fe2c 	bl	8001a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(_595_Enable_GPIO_Port, _595_Enable_Pin, GPIO_PIN_RESET);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2180      	movs	r1, #128	; 0x80
 8000e30:	484a      	ldr	r0, [pc, #296]	; (8000f5c <MX_GPIO_Init+0x1c0>)
 8000e32:	f000 fe27 	bl	8001a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD2_Pin _595_Reset_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|_595_Reset_Pin;
 8000e36:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000e3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e52:	f000 fc55 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pin : W_Car_Pin */
  GPIO_InitStruct.Pin = W_Car_Pin;
 8000e56:	2310      	movs	r3, #16
 8000e58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000e5a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000e5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(W_Car_GPIO_Port, &GPIO_InitStruct);
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4619      	mov	r1, r3
 8000e6a:	483c      	ldr	r0, [pc, #240]	; (8000f5c <MX_GPIO_Init+0x1c0>)
 8000e6c:	f000 fc48 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pin : _595_STCP_Pin */
  GPIO_InitStruct.Pin = _595_STCP_Pin;
 8000e70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e76:	2301      	movs	r3, #1
 8000e78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(_595_STCP_GPIO_Port, &GPIO_InitStruct);
 8000e82:	f107 0314 	add.w	r3, r7, #20
 8000e86:	4619      	mov	r1, r3
 8000e88:	4833      	ldr	r0, [pc, #204]	; (8000f58 <MX_GPIO_Init+0x1bc>)
 8000e8a:	f000 fc39 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pins : S_Car_Pin E_Car_Pin */
  GPIO_InitStruct.Pin = S_Car_Pin|E_Car_Pin;
 8000e8e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000e92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000e94:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000e98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9e:	f107 0314 	add.w	r3, r7, #20
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	482c      	ldr	r0, [pc, #176]	; (8000f58 <MX_GPIO_Init+0x1bc>)
 8000ea6:	f000 fc2b 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pin : _595_Enable_Pin */
  GPIO_InitStruct.Pin = _595_Enable_Pin;
 8000eaa:	2380      	movs	r3, #128	; 0x80
 8000eac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(_595_Enable_GPIO_Port, &GPIO_InitStruct);
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4826      	ldr	r0, [pc, #152]	; (8000f5c <MX_GPIO_Init+0x1c0>)
 8000ec2:	f000 fc1d 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pin : N_Car_Pin */
  GPIO_InitStruct.Pin = N_Car_Pin;
 8000ec6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000ecc:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000ed0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(N_Car_GPIO_Port, &GPIO_InitStruct);
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	4619      	mov	r1, r3
 8000edc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee0:	f000 fc0e 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pin : S_PSw_Pin */
  GPIO_InitStruct.Pin = S_PSw_Pin;
 8000ee4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ee8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000eee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(S_PSw_GPIO_Port, &GPIO_InitStruct);
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000efe:	f000 fbff 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pin : N_PSw_Pin */
  GPIO_InitStruct.Pin = N_PSw_Pin;
 8000f02:	2380      	movs	r3, #128	; 0x80
 8000f04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f06:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(N_PSw_GPIO_Port, &GPIO_InitStruct);
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	4619      	mov	r1, r3
 8000f16:	4810      	ldr	r0, [pc, #64]	; (8000f58 <MX_GPIO_Init+0x1bc>)
 8000f18:	f000 fbf2 	bl	8001700 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2101      	movs	r1, #1
 8000f20:	200a      	movs	r0, #10
 8000f22:	f000 fbb6 	bl	8001692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000f26:	200a      	movs	r0, #10
 8000f28:	f000 fbcf 	bl	80016ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2101      	movs	r1, #1
 8000f30:	2017      	movs	r0, #23
 8000f32:	f000 fbae 	bl	8001692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f36:	2017      	movs	r0, #23
 8000f38:	f000 fbc7 	bl	80016ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2101      	movs	r1, #1
 8000f40:	2028      	movs	r0, #40	; 0x28
 8000f42:	f000 fba6 	bl	8001692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f46:	2028      	movs	r0, #40	; 0x28
 8000f48:	f000 fbbf 	bl	80016ca <HAL_NVIC_EnableIRQ>

}
 8000f4c:	bf00      	nop
 8000f4e:	3728      	adds	r7, #40	; 0x28
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40021000 	.word	0x40021000
 8000f58:	48000400 	.word	0x48000400
 8000f5c:	48000800 	.word	0x48000800

08000f60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f64:	b672      	cpsid	i
}
 8000f66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <Error_Handler+0x8>
	...

08000f6c <stateCrossroad>:
bool greenVertical = false;

/**
 * @brief state machine for the traffic lights
 */
void stateCrossroad(void){
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
	NextState = Start;
 8000f72:	4b61      	ldr	r3, [pc, #388]	; (80010f8 <stateCrossroad+0x18c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	701a      	strb	r2, [r3, #0]
	uint32_t pDelay = pedestrianDelay;
 8000f78:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8000f7c:	607b      	str	r3, [r7, #4]
	while (1)
	{
		PreviousState = State;
 8000f7e:	4b5f      	ldr	r3, [pc, #380]	; (80010fc <stateCrossroad+0x190>)
 8000f80:	781a      	ldrb	r2, [r3, #0]
 8000f82:	4b5f      	ldr	r3, [pc, #380]	; (8001100 <stateCrossroad+0x194>)
 8000f84:	701a      	strb	r2, [r3, #0]
		State = NextState;
 8000f86:	4b5c      	ldr	r3, [pc, #368]	; (80010f8 <stateCrossroad+0x18c>)
 8000f88:	781a      	ldrb	r2, [r3, #0]
 8000f8a:	4b5c      	ldr	r3, [pc, #368]	; (80010fc <stateCrossroad+0x190>)
 8000f8c:	701a      	strb	r2, [r3, #0]

		switch(State)
 8000f8e:	4b5b      	ldr	r3, [pc, #364]	; (80010fc <stateCrossroad+0x190>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2b07      	cmp	r3, #7
 8000f94:	d8f3      	bhi.n	8000f7e <stateCrossroad+0x12>
 8000f96:	a201      	add	r2, pc, #4	; (adr r2, 8000f9c <stateCrossroad+0x30>)
 8000f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f9c:	08000fbd 	.word	0x08000fbd
 8000fa0:	08000fdd 	.word	0x08000fdd
 8000fa4:	08001015 	.word	0x08001015
 8000fa8:	08000f7f 	.word	0x08000f7f
 8000fac:	08000ffd 	.word	0x08000ffd
 8000fb0:	08001053 	.word	0x08001053
 8000fb4:	08001095 	.word	0x08001095
 8000fb8:	08001033 	.word	0x08001033
		{
		case Start:
			nextDirection();
 8000fbc:	f7ff fc58 	bl	8000870 <nextDirection>
			NextState = carsVertical || carsHorizontal ? DefaultState : NoCarState;  //switching green states
 8000fc0:	4b50      	ldr	r3, [pc, #320]	; (8001104 <stateCrossroad+0x198>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d103      	bne.n	8000fd0 <stateCrossroad+0x64>
 8000fc8:	4b4f      	ldr	r3, [pc, #316]	; (8001108 <stateCrossroad+0x19c>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <stateCrossroad+0x68>
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	e000      	b.n	8000fd6 <stateCrossroad+0x6a>
 8000fd4:	2202      	movs	r2, #2
 8000fd6:	4b48      	ldr	r3, [pc, #288]	; (80010f8 <stateCrossroad+0x18c>)
 8000fd8:	701a      	strb	r2, [r3, #0]
			break;
 8000fda:	e08c      	b.n	80010f6 <stateCrossroad+0x18a>

		case DefaultState: //default switching green with cars
			if (HAL_GetTick() - msTimer2 > redDelayMax - orangeDelay){
 8000fdc:	f000 fa72 	bl	80014c4 <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	4b4a      	ldr	r3, [pc, #296]	; (800110c <stateCrossroad+0x1a0>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d977      	bls.n	80010e0 <stateCrossroad+0x174>
				yellowLeds();
 8000ff0:	f7ff fbc2 	bl	8000778 <yellowLeds>
				NextState = YellowState;
 8000ff4:	4b40      	ldr	r3, [pc, #256]	; (80010f8 <stateCrossroad+0x18c>)
 8000ff6:	2204      	movs	r2, #4
 8000ff8:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000ffa:	e071      	b.n	80010e0 <stateCrossroad+0x174>

		case YellowState:
			if (HAL_GetTick() - msTimer2 > orangeDelay)
 8000ffc:	f000 fa62 	bl	80014c4 <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	4b42      	ldr	r3, [pc, #264]	; (800110c <stateCrossroad+0x1a0>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800100c:	d96a      	bls.n	80010e4 <stateCrossroad+0x178>
				checkNextState();
 800100e:	f7ff fbc7 	bl	80007a0 <checkNextState>
			break;
 8001012:	e067      	b.n	80010e4 <stateCrossroad+0x178>

		case NoCarState: //switching green no cars
			if (HAL_GetTick() - msTimer2 > greenDelay - orangeDelay){
 8001014:	f000 fa56 	bl	80014c4 <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	4b3c      	ldr	r3, [pc, #240]	; (800110c <stateCrossroad+0x1a0>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001024:	d960      	bls.n	80010e8 <stateCrossroad+0x17c>
				yellowLeds();
 8001026:	f7ff fba7 	bl	8000778 <yellowLeds>
				NextState = YellowState;
 800102a:	4b33      	ldr	r3, [pc, #204]	; (80010f8 <stateCrossroad+0x18c>)
 800102c:	2204      	movs	r2, #4
 800102e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001030:	e05a      	b.n	80010e8 <stateCrossroad+0x17c>

		case PedestrianGreenWait: //green after button press: prevents instant green if car arrives in NoCarState
			if (HAL_GetTick() - msTimer2 > walkingDelay - orangeDelay){
 8001032:	f000 fa47 	bl	80014c4 <HAL_GetTick>
 8001036:	4602      	mov	r2, r0
 8001038:	4b34      	ldr	r3, [pc, #208]	; (800110c <stateCrossroad+0x1a0>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	f241 7270 	movw	r2, #6000	; 0x1770
 8001042:	4293      	cmp	r3, r2
 8001044:	d952      	bls.n	80010ec <stateCrossroad+0x180>
				yellowLeds();
 8001046:	f7ff fb97 	bl	8000778 <yellowLeds>
				NextState = YellowState;
 800104a:	4b2b      	ldr	r3, [pc, #172]	; (80010f8 <stateCrossroad+0x18c>)
 800104c:	2204      	movs	r2, #4
 800104e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001050:	e04c      	b.n	80010ec <stateCrossroad+0x180>

		case StayGreenState:
			break;

		case BlueState:
			pDelay = PreviousState == BothBlueState ? walkingDelay : pedestrianDelay;
 8001052:	4b2b      	ldr	r3, [pc, #172]	; (8001100 <stateCrossroad+0x194>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b06      	cmp	r3, #6
 8001058:	d102      	bne.n	8001060 <stateCrossroad+0xf4>
 800105a:	f242 7310 	movw	r3, #10000	; 0x2710
 800105e:	e001      	b.n	8001064 <stateCrossroad+0xf8>
 8001060:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8001064:	607b      	str	r3, [r7, #4]
			if (HAL_GetTick() - msTimer2 > pDelay)
 8001066:	f000 fa2d 	bl	80014c4 <HAL_GetTick>
 800106a:	4602      	mov	r2, r0
 800106c:	4b27      	ldr	r3, [pc, #156]	; (800110c <stateCrossroad+0x1a0>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	429a      	cmp	r2, r3
 8001076:	d202      	bcs.n	800107e <stateCrossroad+0x112>
				endBlueState();
 8001078:	f7ff fc5c 	bl	8000934 <endBlueState>
			else if (HAL_GetTick() - msTimer > toggleFreq)
				blueStateToggle();
			break;
 800107c:	e038      	b.n	80010f0 <stateCrossroad+0x184>
			else if (HAL_GetTick() - msTimer > toggleFreq)
 800107e:	f000 fa21 	bl	80014c4 <HAL_GetTick>
 8001082:	4602      	mov	r2, r0
 8001084:	4b22      	ldr	r3, [pc, #136]	; (8001110 <stateCrossroad+0x1a4>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	2bfa      	cmp	r3, #250	; 0xfa
 800108c:	d930      	bls.n	80010f0 <stateCrossroad+0x184>
				blueStateToggle();
 800108e:	f7ff fc1d 	bl	80008cc <blueStateToggle>
			break;
 8001092:	e02d      	b.n	80010f0 <stateCrossroad+0x184>

		case BothBlueState:
			if (HAL_GetTick() - msTimer2 > pedestrianDelay) {
 8001094:	f000 fa16 	bl	80014c4 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	4b1c      	ldr	r3, [pc, #112]	; (800110c <stateCrossroad+0x1a0>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d910      	bls.n	80010ca <stateCrossroad+0x15e>
				if (specificPin == N_Blue){
 80010a8:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <stateCrossroad+0x1a8>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b0d      	cmp	r3, #13
 80010ae:	d103      	bne.n	80010b8 <stateCrossroad+0x14c>
					SBtnPressed = false;
 80010b0:	4b19      	ldr	r3, [pc, #100]	; (8001118 <stateCrossroad+0x1ac>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]
 80010b6:	e002      	b.n	80010be <stateCrossroad+0x152>
				} else NBtnPressed = false;
 80010b8:	4b18      	ldr	r3, [pc, #96]	; (800111c <stateCrossroad+0x1b0>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	701a      	strb	r2, [r3, #0]

				nextDirection();
 80010be:	f7ff fbd7 	bl	8000870 <nextDirection>
				NextState = BlueState;
 80010c2:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <stateCrossroad+0x18c>)
 80010c4:	2205      	movs	r2, #5
 80010c6:	701a      	strb	r2, [r3, #0]
			} else if (HAL_GetTick() - msTimer > toggleFreq){
				blueStateToggle();
			}
			break;
 80010c8:	e014      	b.n	80010f4 <stateCrossroad+0x188>
			} else if (HAL_GetTick() - msTimer > toggleFreq){
 80010ca:	f000 f9fb 	bl	80014c4 <HAL_GetTick>
 80010ce:	4602      	mov	r2, r0
 80010d0:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <stateCrossroad+0x1a4>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2bfa      	cmp	r3, #250	; 0xfa
 80010d8:	d90c      	bls.n	80010f4 <stateCrossroad+0x188>
				blueStateToggle();
 80010da:	f7ff fbf7 	bl	80008cc <blueStateToggle>
			break;
 80010de:	e009      	b.n	80010f4 <stateCrossroad+0x188>
			break;
 80010e0:	bf00      	nop
 80010e2:	e74c      	b.n	8000f7e <stateCrossroad+0x12>
			break;
 80010e4:	bf00      	nop
 80010e6:	e74a      	b.n	8000f7e <stateCrossroad+0x12>
			break;
 80010e8:	bf00      	nop
 80010ea:	e748      	b.n	8000f7e <stateCrossroad+0x12>
			break;
 80010ec:	bf00      	nop
 80010ee:	e746      	b.n	8000f7e <stateCrossroad+0x12>
			break;
 80010f0:	bf00      	nop
 80010f2:	e744      	b.n	8000f7e <stateCrossroad+0x12>
			break;
 80010f4:	bf00      	nop
		PreviousState = State;
 80010f6:	e742      	b.n	8000f7e <stateCrossroad+0x12>
 80010f8:	20000119 	.word	0x20000119
 80010fc:	20000118 	.word	0x20000118
 8001100:	2000011a 	.word	0x2000011a
 8001104:	20000124 	.word	0x20000124
 8001108:	20000125 	.word	0x20000125
 800110c:	20000120 	.word	0x20000120
 8001110:	2000011c 	.word	0x2000011c
 8001114:	20000000 	.word	0x20000000
 8001118:	20000127 	.word	0x20000127
 800111c:	20000126 	.word	0x20000126

08001120 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001126:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <HAL_MspInit+0x44>)
 8001128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800112a:	4a0e      	ldr	r2, [pc, #56]	; (8001164 <HAL_MspInit+0x44>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6613      	str	r3, [r2, #96]	; 0x60
 8001132:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <HAL_MspInit+0x44>)
 8001134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <HAL_MspInit+0x44>)
 8001140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001142:	4a08      	ldr	r2, [pc, #32]	; (8001164 <HAL_MspInit+0x44>)
 8001144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001148:	6593      	str	r3, [r2, #88]	; 0x58
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_MspInit+0x44>)
 800114c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001152:	603b      	str	r3, [r7, #0]
 8001154:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	40021000 	.word	0x40021000

08001168 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	; 0x28
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a25      	ldr	r2, [pc, #148]	; (800121c <HAL_SPI_MspInit+0xb4>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d144      	bne.n	8001214 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800118a:	4b25      	ldr	r3, [pc, #148]	; (8001220 <HAL_SPI_MspInit+0xb8>)
 800118c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118e:	4a24      	ldr	r2, [pc, #144]	; (8001220 <HAL_SPI_MspInit+0xb8>)
 8001190:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001194:	6593      	str	r3, [r2, #88]	; 0x58
 8001196:	4b22      	ldr	r3, [pc, #136]	; (8001220 <HAL_SPI_MspInit+0xb8>)
 8001198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a2:	4b1f      	ldr	r3, [pc, #124]	; (8001220 <HAL_SPI_MspInit+0xb8>)
 80011a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a6:	4a1e      	ldr	r2, [pc, #120]	; (8001220 <HAL_SPI_MspInit+0xb8>)
 80011a8:	f043 0304 	orr.w	r3, r3, #4
 80011ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ae:	4b1c      	ldr	r3, [pc, #112]	; (8001220 <HAL_SPI_MspInit+0xb8>)
 80011b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b2:	f003 0304 	and.w	r3, r3, #4
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ba:	4b19      	ldr	r3, [pc, #100]	; (8001220 <HAL_SPI_MspInit+0xb8>)
 80011bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011be:	4a18      	ldr	r2, [pc, #96]	; (8001220 <HAL_SPI_MspInit+0xb8>)
 80011c0:	f043 0302 	orr.w	r3, r3, #2
 80011c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011c6:	4b16      	ldr	r3, [pc, #88]	; (8001220 <HAL_SPI_MspInit+0xb8>)
 80011c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = _595_SHCP_Pin;
 80011d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d8:	2302      	movs	r3, #2
 80011da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e0:	2303      	movs	r3, #3
 80011e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011e4:	2306      	movs	r3, #6
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(_595_SHCP_GPIO_Port, &GPIO_InitStruct);
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	4619      	mov	r1, r3
 80011ee:	480d      	ldr	r0, [pc, #52]	; (8001224 <HAL_SPI_MspInit+0xbc>)
 80011f0:	f000 fa86 	bl	8001700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = _595_DS_Pin;
 80011f4:	2320      	movs	r3, #32
 80011f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f8:	2302      	movs	r3, #2
 80011fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001200:	2303      	movs	r3, #3
 8001202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001204:	2306      	movs	r3, #6
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(_595_DS_GPIO_Port, &GPIO_InitStruct);
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	4619      	mov	r1, r3
 800120e:	4806      	ldr	r0, [pc, #24]	; (8001228 <HAL_SPI_MspInit+0xc0>)
 8001210:	f000 fa76 	bl	8001700 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001214:	bf00      	nop
 8001216:	3728      	adds	r7, #40	; 0x28
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40003c00 	.word	0x40003c00
 8001220:	40021000 	.word	0x40021000
 8001224:	48000800 	.word	0x48000800
 8001228:	48000400 	.word	0x48000400

0800122c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b0ac      	sub	sp, #176	; 0xb0
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	2288      	movs	r2, #136	; 0x88
 800124a:	2100      	movs	r1, #0
 800124c:	4618      	mov	r0, r3
 800124e:	f002 ffb9 	bl	80041c4 <memset>
  if(huart->Instance==USART2)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a21      	ldr	r2, [pc, #132]	; (80012dc <HAL_UART_MspInit+0xb0>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d13b      	bne.n	80012d4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800125c:	2302      	movs	r3, #2
 800125e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001260:	2300      	movs	r3, #0
 8001262:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	4618      	mov	r0, r3
 800126a:	f001 fa9f 	bl	80027ac <HAL_RCCEx_PeriphCLKConfig>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001274:	f7ff fe74 	bl	8000f60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001278:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <HAL_UART_MspInit+0xb4>)
 800127a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127c:	4a18      	ldr	r2, [pc, #96]	; (80012e0 <HAL_UART_MspInit+0xb4>)
 800127e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001282:	6593      	str	r3, [r2, #88]	; 0x58
 8001284:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <HAL_UART_MspInit+0xb4>)
 8001286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128c:	613b      	str	r3, [r7, #16]
 800128e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001290:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <HAL_UART_MspInit+0xb4>)
 8001292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001294:	4a12      	ldr	r2, [pc, #72]	; (80012e0 <HAL_UART_MspInit+0xb4>)
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800129c:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <HAL_UART_MspInit+0xb4>)
 800129e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012a8:	230c      	movs	r3, #12
 80012aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ba:	2303      	movs	r3, #3
 80012bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012c0:	2307      	movs	r3, #7
 80012c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012ca:	4619      	mov	r1, r3
 80012cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d0:	f000 fa16 	bl	8001700 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012d4:	bf00      	nop
 80012d6:	37b0      	adds	r7, #176	; 0xb0
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40004400 	.word	0x40004400
 80012e0:	40021000 	.word	0x40021000

080012e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <NMI_Handler+0x4>

080012ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ee:	e7fe      	b.n	80012ee <HardFault_Handler+0x4>

080012f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <MemManage_Handler+0x4>

080012f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012fa:	e7fe      	b.n	80012fa <BusFault_Handler+0x4>

080012fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001300:	e7fe      	b.n	8001300 <UsageFault_Handler+0x4>

08001302 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001330:	f000 f8b4 	bl	800149c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}

08001338 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(W_Car_Pin);
 800133c:	2010      	movs	r0, #16
 800133e:	f000 fbb9 	bl	8001ab4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}

08001346 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(N_PSw_Pin);
 800134a:	2080      	movs	r0, #128	; 0x80
 800134c:	f000 fbb2 	bl	8001ab4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}

08001354 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(N_Car_Pin);
 8001358:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800135c:	f000 fbaa 	bl	8001ab4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S_Car_Pin);
 8001360:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001364:	f000 fba6 	bl	8001ab4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(E_Car_Pin);
 8001368:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800136c:	f000 fba2 	bl	8001ab4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S_PSw_Pin);
 8001370:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001374:	f000 fb9e 	bl	8001ab4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}

0800137c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <SystemInit+0x20>)
 8001382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001386:	4a05      	ldr	r2, [pc, #20]	; (800139c <SystemInit+0x20>)
 8001388:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800138c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013a4:	f7ff ffea 	bl	800137c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013a8:	480c      	ldr	r0, [pc, #48]	; (80013dc <LoopForever+0x6>)
  ldr r1, =_edata
 80013aa:	490d      	ldr	r1, [pc, #52]	; (80013e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013ac:	4a0d      	ldr	r2, [pc, #52]	; (80013e4 <LoopForever+0xe>)
  movs r3, #0
 80013ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b0:	e002      	b.n	80013b8 <LoopCopyDataInit>

080013b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013b6:	3304      	adds	r3, #4

080013b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013bc:	d3f9      	bcc.n	80013b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013be:	4a0a      	ldr	r2, [pc, #40]	; (80013e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013c0:	4c0a      	ldr	r4, [pc, #40]	; (80013ec <LoopForever+0x16>)
  movs r3, #0
 80013c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c4:	e001      	b.n	80013ca <LoopFillZerobss>

080013c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c8:	3204      	adds	r2, #4

080013ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013cc:	d3fb      	bcc.n	80013c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ce:	f002 fed5 	bl	800417c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013d2:	f7ff fc15 	bl	8000c00 <main>

080013d6 <LoopForever>:

LoopForever:
    b LoopForever
 80013d6:	e7fe      	b.n	80013d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013d8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80013dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80013e4:	08004250 	.word	0x08004250
  ldr r2, =_sbss
 80013e8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80013ec:	20000130 	.word	0x20000130

080013f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013f0:	e7fe      	b.n	80013f0 <ADC1_2_IRQHandler>

080013f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013f8:	2300      	movs	r3, #0
 80013fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013fc:	2003      	movs	r0, #3
 80013fe:	f000 f93d 	bl	800167c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001402:	2000      	movs	r0, #0
 8001404:	f000 f80e 	bl	8001424 <HAL_InitTick>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d002      	beq.n	8001414 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	71fb      	strb	r3, [r7, #7]
 8001412:	e001      	b.n	8001418 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001414:	f7ff fe84 	bl	8001120 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001418:	79fb      	ldrb	r3, [r7, #7]
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800142c:	2300      	movs	r3, #0
 800142e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001430:	4b17      	ldr	r3, [pc, #92]	; (8001490 <HAL_InitTick+0x6c>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d023      	beq.n	8001480 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001438:	4b16      	ldr	r3, [pc, #88]	; (8001494 <HAL_InitTick+0x70>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4b14      	ldr	r3, [pc, #80]	; (8001490 <HAL_InitTick+0x6c>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	4619      	mov	r1, r3
 8001442:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001446:	fbb3 f3f1 	udiv	r3, r3, r1
 800144a:	fbb2 f3f3 	udiv	r3, r2, r3
 800144e:	4618      	mov	r0, r3
 8001450:	f000 f949 	bl	80016e6 <HAL_SYSTICK_Config>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d10f      	bne.n	800147a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b0f      	cmp	r3, #15
 800145e:	d809      	bhi.n	8001474 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001460:	2200      	movs	r2, #0
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001468:	f000 f913 	bl	8001692 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800146c:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <HAL_InitTick+0x74>)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	e007      	b.n	8001484 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	73fb      	strb	r3, [r7, #15]
 8001478:	e004      	b.n	8001484 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	73fb      	strb	r3, [r7, #15]
 800147e:	e001      	b.n	8001484 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001484:	7bfb      	ldrb	r3, [r7, #15]
}
 8001486:	4618      	mov	r0, r3
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	2000000c 	.word	0x2000000c
 8001494:	20000004 	.word	0x20000004
 8001498:	20000008 	.word	0x20000008

0800149c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <HAL_IncTick+0x20>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <HAL_IncTick+0x24>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4413      	add	r3, r2
 80014ac:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <HAL_IncTick+0x24>)
 80014ae:	6013      	str	r3, [r2, #0]
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	2000000c 	.word	0x2000000c
 80014c0:	2000012c 	.word	0x2000012c

080014c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return uwTick;
 80014c8:	4b03      	ldr	r3, [pc, #12]	; (80014d8 <HAL_GetTick+0x14>)
 80014ca:	681b      	ldr	r3, [r3, #0]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	2000012c 	.word	0x2000012c

080014dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014ec:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <__NVIC_SetPriorityGrouping+0x44>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014f2:	68ba      	ldr	r2, [r7, #8]
 80014f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014f8:	4013      	ands	r3, r2
 80014fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001504:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800150c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800150e:	4a04      	ldr	r2, [pc, #16]	; (8001520 <__NVIC_SetPriorityGrouping+0x44>)
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	60d3      	str	r3, [r2, #12]
}
 8001514:	bf00      	nop
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001528:	4b04      	ldr	r3, [pc, #16]	; (800153c <__NVIC_GetPriorityGrouping+0x18>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	0a1b      	lsrs	r3, r3, #8
 800152e:	f003 0307 	and.w	r3, r3, #7
}
 8001532:	4618      	mov	r0, r3
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800154a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154e:	2b00      	cmp	r3, #0
 8001550:	db0b      	blt.n	800156a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	f003 021f 	and.w	r2, r3, #31
 8001558:	4907      	ldr	r1, [pc, #28]	; (8001578 <__NVIC_EnableIRQ+0x38>)
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	095b      	lsrs	r3, r3, #5
 8001560:	2001      	movs	r0, #1
 8001562:	fa00 f202 	lsl.w	r2, r0, r2
 8001566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000e100 	.word	0xe000e100

0800157c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	6039      	str	r1, [r7, #0]
 8001586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158c:	2b00      	cmp	r3, #0
 800158e:	db0a      	blt.n	80015a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	b2da      	uxtb	r2, r3
 8001594:	490c      	ldr	r1, [pc, #48]	; (80015c8 <__NVIC_SetPriority+0x4c>)
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	0112      	lsls	r2, r2, #4
 800159c:	b2d2      	uxtb	r2, r2
 800159e:	440b      	add	r3, r1
 80015a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a4:	e00a      	b.n	80015bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4908      	ldr	r1, [pc, #32]	; (80015cc <__NVIC_SetPriority+0x50>)
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	f003 030f 	and.w	r3, r3, #15
 80015b2:	3b04      	subs	r3, #4
 80015b4:	0112      	lsls	r2, r2, #4
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	440b      	add	r3, r1
 80015ba:	761a      	strb	r2, [r3, #24]
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000e100 	.word	0xe000e100
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b089      	sub	sp, #36	; 0x24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	f1c3 0307 	rsb	r3, r3, #7
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	bf28      	it	cs
 80015ee:	2304      	movcs	r3, #4
 80015f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	3304      	adds	r3, #4
 80015f6:	2b06      	cmp	r3, #6
 80015f8:	d902      	bls.n	8001600 <NVIC_EncodePriority+0x30>
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3b03      	subs	r3, #3
 80015fe:	e000      	b.n	8001602 <NVIC_EncodePriority+0x32>
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001604:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43da      	mvns	r2, r3
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	401a      	ands	r2, r3
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001618:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	fa01 f303 	lsl.w	r3, r1, r3
 8001622:	43d9      	mvns	r1, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001628:	4313      	orrs	r3, r2
         );
}
 800162a:	4618      	mov	r0, r3
 800162c:	3724      	adds	r7, #36	; 0x24
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
	...

08001638 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3b01      	subs	r3, #1
 8001644:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001648:	d301      	bcc.n	800164e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800164a:	2301      	movs	r3, #1
 800164c:	e00f      	b.n	800166e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800164e:	4a0a      	ldr	r2, [pc, #40]	; (8001678 <SysTick_Config+0x40>)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3b01      	subs	r3, #1
 8001654:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001656:	210f      	movs	r1, #15
 8001658:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800165c:	f7ff ff8e 	bl	800157c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001660:	4b05      	ldr	r3, [pc, #20]	; (8001678 <SysTick_Config+0x40>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001666:	4b04      	ldr	r3, [pc, #16]	; (8001678 <SysTick_Config+0x40>)
 8001668:	2207      	movs	r2, #7
 800166a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	e000e010 	.word	0xe000e010

0800167c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff ff29 	bl	80014dc <__NVIC_SetPriorityGrouping>
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b086      	sub	sp, #24
 8001696:	af00      	add	r7, sp, #0
 8001698:	4603      	mov	r3, r0
 800169a:	60b9      	str	r1, [r7, #8]
 800169c:	607a      	str	r2, [r7, #4]
 800169e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016a4:	f7ff ff3e 	bl	8001524 <__NVIC_GetPriorityGrouping>
 80016a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	68b9      	ldr	r1, [r7, #8]
 80016ae:	6978      	ldr	r0, [r7, #20]
 80016b0:	f7ff ff8e 	bl	80015d0 <NVIC_EncodePriority>
 80016b4:	4602      	mov	r2, r0
 80016b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ba:	4611      	mov	r1, r2
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff ff5d 	bl	800157c <__NVIC_SetPriority>
}
 80016c2:	bf00      	nop
 80016c4:	3718      	adds	r7, #24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	4603      	mov	r3, r0
 80016d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff ff31 	bl	8001540 <__NVIC_EnableIRQ>
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff ffa2 	bl	8001638 <SysTick_Config>
 80016f4:	4603      	mov	r3, r0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001700:	b480      	push	{r7}
 8001702:	b087      	sub	sp, #28
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800170e:	e17f      	b.n	8001a10 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	2101      	movs	r1, #1
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	fa01 f303 	lsl.w	r3, r1, r3
 800171c:	4013      	ands	r3, r2
 800171e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2b00      	cmp	r3, #0
 8001724:	f000 8171 	beq.w	8001a0a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 0303 	and.w	r3, r3, #3
 8001730:	2b01      	cmp	r3, #1
 8001732:	d005      	beq.n	8001740 <HAL_GPIO_Init+0x40>
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 0303 	and.w	r3, r3, #3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d130      	bne.n	80017a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	2203      	movs	r2, #3
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	4013      	ands	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	68da      	ldr	r2, [r3, #12]
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	4313      	orrs	r3, r2
 8001768:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001776:	2201      	movs	r2, #1
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	4013      	ands	r3, r2
 8001784:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	091b      	lsrs	r3, r3, #4
 800178c:	f003 0201 	and.w	r2, r3, #1
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	4313      	orrs	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f003 0303 	and.w	r3, r3, #3
 80017aa:	2b03      	cmp	r3, #3
 80017ac:	d118      	bne.n	80017e0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80017b4:	2201      	movs	r2, #1
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	43db      	mvns	r3, r3
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	4013      	ands	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	08db      	lsrs	r3, r3, #3
 80017ca:	f003 0201 	and.w	r2, r3, #1
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f003 0303 	and.w	r3, r3, #3
 80017e8:	2b03      	cmp	r3, #3
 80017ea:	d017      	beq.n	800181c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	2203      	movs	r2, #3
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	43db      	mvns	r3, r3
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	4013      	ands	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	4313      	orrs	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 0303 	and.w	r3, r3, #3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d123      	bne.n	8001870 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	08da      	lsrs	r2, r3, #3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3208      	adds	r2, #8
 8001830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001834:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	f003 0307 	and.w	r3, r3, #7
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	220f      	movs	r2, #15
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	4013      	ands	r3, r2
 800184a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	691a      	ldr	r2, [r3, #16]
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4313      	orrs	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	08da      	lsrs	r2, r3, #3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	3208      	adds	r2, #8
 800186a:	6939      	ldr	r1, [r7, #16]
 800186c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	2203      	movs	r2, #3
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	4013      	ands	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 0203 	and.w	r2, r3, #3
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	4313      	orrs	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f000 80ac 	beq.w	8001a0a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b2:	4b5f      	ldr	r3, [pc, #380]	; (8001a30 <HAL_GPIO_Init+0x330>)
 80018b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018b6:	4a5e      	ldr	r2, [pc, #376]	; (8001a30 <HAL_GPIO_Init+0x330>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	6613      	str	r3, [r2, #96]	; 0x60
 80018be:	4b5c      	ldr	r3, [pc, #368]	; (8001a30 <HAL_GPIO_Init+0x330>)
 80018c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018ca:	4a5a      	ldr	r2, [pc, #360]	; (8001a34 <HAL_GPIO_Init+0x334>)
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	089b      	lsrs	r3, r3, #2
 80018d0:	3302      	adds	r3, #2
 80018d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	f003 0303 	and.w	r3, r3, #3
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	220f      	movs	r2, #15
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43db      	mvns	r3, r3
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	4013      	ands	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018f4:	d025      	beq.n	8001942 <HAL_GPIO_Init+0x242>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a4f      	ldr	r2, [pc, #316]	; (8001a38 <HAL_GPIO_Init+0x338>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d01f      	beq.n	800193e <HAL_GPIO_Init+0x23e>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a4e      	ldr	r2, [pc, #312]	; (8001a3c <HAL_GPIO_Init+0x33c>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d019      	beq.n	800193a <HAL_GPIO_Init+0x23a>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a4d      	ldr	r2, [pc, #308]	; (8001a40 <HAL_GPIO_Init+0x340>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d013      	beq.n	8001936 <HAL_GPIO_Init+0x236>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a4c      	ldr	r2, [pc, #304]	; (8001a44 <HAL_GPIO_Init+0x344>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d00d      	beq.n	8001932 <HAL_GPIO_Init+0x232>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a4b      	ldr	r2, [pc, #300]	; (8001a48 <HAL_GPIO_Init+0x348>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d007      	beq.n	800192e <HAL_GPIO_Init+0x22e>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a4a      	ldr	r2, [pc, #296]	; (8001a4c <HAL_GPIO_Init+0x34c>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d101      	bne.n	800192a <HAL_GPIO_Init+0x22a>
 8001926:	2306      	movs	r3, #6
 8001928:	e00c      	b.n	8001944 <HAL_GPIO_Init+0x244>
 800192a:	2307      	movs	r3, #7
 800192c:	e00a      	b.n	8001944 <HAL_GPIO_Init+0x244>
 800192e:	2305      	movs	r3, #5
 8001930:	e008      	b.n	8001944 <HAL_GPIO_Init+0x244>
 8001932:	2304      	movs	r3, #4
 8001934:	e006      	b.n	8001944 <HAL_GPIO_Init+0x244>
 8001936:	2303      	movs	r3, #3
 8001938:	e004      	b.n	8001944 <HAL_GPIO_Init+0x244>
 800193a:	2302      	movs	r3, #2
 800193c:	e002      	b.n	8001944 <HAL_GPIO_Init+0x244>
 800193e:	2301      	movs	r3, #1
 8001940:	e000      	b.n	8001944 <HAL_GPIO_Init+0x244>
 8001942:	2300      	movs	r3, #0
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	f002 0203 	and.w	r2, r2, #3
 800194a:	0092      	lsls	r2, r2, #2
 800194c:	4093      	lsls	r3, r2
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	4313      	orrs	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001954:	4937      	ldr	r1, [pc, #220]	; (8001a34 <HAL_GPIO_Init+0x334>)
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	089b      	lsrs	r3, r3, #2
 800195a:	3302      	adds	r3, #2
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001962:	4b3b      	ldr	r3, [pc, #236]	; (8001a50 <HAL_GPIO_Init+0x350>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	43db      	mvns	r3, r3
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	4013      	ands	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d003      	beq.n	8001986 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	4313      	orrs	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001986:	4a32      	ldr	r2, [pc, #200]	; (8001a50 <HAL_GPIO_Init+0x350>)
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800198c:	4b30      	ldr	r3, [pc, #192]	; (8001a50 <HAL_GPIO_Init+0x350>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	43db      	mvns	r3, r3
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	4013      	ands	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d003      	beq.n	80019b0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019b0:	4a27      	ldr	r2, [pc, #156]	; (8001a50 <HAL_GPIO_Init+0x350>)
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019b6:	4b26      	ldr	r3, [pc, #152]	; (8001a50 <HAL_GPIO_Init+0x350>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	43db      	mvns	r3, r3
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	4013      	ands	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d003      	beq.n	80019da <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019da:	4a1d      	ldr	r2, [pc, #116]	; (8001a50 <HAL_GPIO_Init+0x350>)
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80019e0:	4b1b      	ldr	r3, [pc, #108]	; (8001a50 <HAL_GPIO_Init+0x350>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	43db      	mvns	r3, r3
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	4013      	ands	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d003      	beq.n	8001a04 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a04:	4a12      	ldr	r2, [pc, #72]	; (8001a50 <HAL_GPIO_Init+0x350>)
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	fa22 f303 	lsr.w	r3, r2, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f47f ae78 	bne.w	8001710 <HAL_GPIO_Init+0x10>
  }
}
 8001a20:	bf00      	nop
 8001a22:	bf00      	nop
 8001a24:	371c      	adds	r7, #28
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	40021000 	.word	0x40021000
 8001a34:	40010000 	.word	0x40010000
 8001a38:	48000400 	.word	0x48000400
 8001a3c:	48000800 	.word	0x48000800
 8001a40:	48000c00 	.word	0x48000c00
 8001a44:	48001000 	.word	0x48001000
 8001a48:	48001400 	.word	0x48001400
 8001a4c:	48001800 	.word	0x48001800
 8001a50:	40010400 	.word	0x40010400

08001a54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691a      	ldr	r2, [r3, #16]
 8001a64:	887b      	ldrh	r3, [r7, #2]
 8001a66:	4013      	ands	r3, r2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d002      	beq.n	8001a72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	73fb      	strb	r3, [r7, #15]
 8001a70:	e001      	b.n	8001a76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a72:	2300      	movs	r3, #0
 8001a74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	807b      	strh	r3, [r7, #2]
 8001a90:	4613      	mov	r3, r2
 8001a92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a94:	787b      	ldrb	r3, [r7, #1]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a9a:	887a      	ldrh	r2, [r7, #2]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001aa0:	e002      	b.n	8001aa8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001aa2:	887a      	ldrh	r2, [r7, #2]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001abe:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ac0:	695a      	ldr	r2, [r3, #20]
 8001ac2:	88fb      	ldrh	r3, [r7, #6]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d006      	beq.n	8001ad8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001aca:	4a05      	ldr	r2, [pc, #20]	; (8001ae0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001acc:	88fb      	ldrh	r3, [r7, #6]
 8001ace:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ad0:	88fb      	ldrh	r3, [r7, #6]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7fe fcfa 	bl	80004cc <HAL_GPIO_EXTI_Callback>
  }
}
 8001ad8:	bf00      	nop
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40010400 	.word	0x40010400

08001ae4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ae8:	4b04      	ldr	r3, [pc, #16]	; (8001afc <HAL_PWREx_GetVoltageRange+0x18>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	40007000 	.word	0x40007000

08001b00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b0e:	d130      	bne.n	8001b72 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b10:	4b23      	ldr	r3, [pc, #140]	; (8001ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b1c:	d038      	beq.n	8001b90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b1e:	4b20      	ldr	r3, [pc, #128]	; (8001ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b26:	4a1e      	ldr	r2, [pc, #120]	; (8001ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b2c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b2e:	4b1d      	ldr	r3, [pc, #116]	; (8001ba4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2232      	movs	r2, #50	; 0x32
 8001b34:	fb02 f303 	mul.w	r3, r2, r3
 8001b38:	4a1b      	ldr	r2, [pc, #108]	; (8001ba8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b3e:	0c9b      	lsrs	r3, r3, #18
 8001b40:	3301      	adds	r3, #1
 8001b42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b44:	e002      	b.n	8001b4c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b4c:	4b14      	ldr	r3, [pc, #80]	; (8001ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b4e:	695b      	ldr	r3, [r3, #20]
 8001b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b58:	d102      	bne.n	8001b60 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1f2      	bne.n	8001b46 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b60:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b6c:	d110      	bne.n	8001b90 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e00f      	b.n	8001b92 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b72:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b7e:	d007      	beq.n	8001b90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b80:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b88:	4a05      	ldr	r2, [pc, #20]	; (8001ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b8e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3714      	adds	r7, #20
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	40007000 	.word	0x40007000
 8001ba4:	20000004 	.word	0x20000004
 8001ba8:	431bde83 	.word	0x431bde83

08001bac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b088      	sub	sp, #32
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e3ca      	b.n	8002354 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bbe:	4b97      	ldr	r3, [pc, #604]	; (8001e1c <HAL_RCC_OscConfig+0x270>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f003 030c 	and.w	r3, r3, #12
 8001bc6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bc8:	4b94      	ldr	r3, [pc, #592]	; (8001e1c <HAL_RCC_OscConfig+0x270>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	f003 0303 	and.w	r3, r3, #3
 8001bd0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0310 	and.w	r3, r3, #16
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 80e4 	beq.w	8001da8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d007      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x4a>
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	2b0c      	cmp	r3, #12
 8001bea:	f040 808b 	bne.w	8001d04 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	f040 8087 	bne.w	8001d04 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bf6:	4b89      	ldr	r3, [pc, #548]	; (8001e1c <HAL_RCC_OscConfig+0x270>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d005      	beq.n	8001c0e <HAL_RCC_OscConfig+0x62>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e3a2      	b.n	8002354 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a1a      	ldr	r2, [r3, #32]
 8001c12:	4b82      	ldr	r3, [pc, #520]	; (8001e1c <HAL_RCC_OscConfig+0x270>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0308 	and.w	r3, r3, #8
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d004      	beq.n	8001c28 <HAL_RCC_OscConfig+0x7c>
 8001c1e:	4b7f      	ldr	r3, [pc, #508]	; (8001e1c <HAL_RCC_OscConfig+0x270>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c26:	e005      	b.n	8001c34 <HAL_RCC_OscConfig+0x88>
 8001c28:	4b7c      	ldr	r3, [pc, #496]	; (8001e1c <HAL_RCC_OscConfig+0x270>)
 8001c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c2e:	091b      	lsrs	r3, r3, #4
 8001c30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d223      	bcs.n	8001c80 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a1b      	ldr	r3, [r3, #32]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f000 fd55 	bl	80026ec <RCC_SetFlashLatencyFromMSIRange>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e383      	b.n	8002354 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c4c:	4b73      	ldr	r3, [pc, #460]	; (8001e1c <HAL_RCC_OscConfig+0x270>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a72      	ldr	r2, [pc, #456]	; (8001e1c <HAL_RCC_OscConfig+0x270>)
 8001c52:	f043 0308 	orr.w	r3, r3, #8
 8001c56:	6013      	str	r3, [r2, #0]
 8001c58:	4b70      	ldr	r3, [pc, #448]	; (8001e1c <HAL_RCC_OscConfig+0x270>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a1b      	ldr	r3, [r3, #32]
 8001c64:	496d      	ldr	r1, [pc, #436]	; (8001e1c <HAL_RCC_OscConfig+0x270>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c6a:	4b6c      	ldr	r3, [pc, #432]	; (8001e1c <HAL_RCC_OscConfig+0x270>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	021b      	lsls	r3, r3, #8
 8001c78:	4968      	ldr	r1, [pc, #416]	; (8001e1c <HAL_RCC_OscConfig+0x270>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	604b      	str	r3, [r1, #4]
 8001c7e:	e025      	b.n	8001ccc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c80:	4b66      	ldr	r3, [pc, #408]	; (8001e1c <HAL_RCC_OscConfig+0x270>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a65      	ldr	r2, [pc, #404]	; (8001e1c <HAL_RCC_OscConfig+0x270>)
 8001c86:	f043 0308 	orr.w	r3, r3, #8
 8001c8a:	6013      	str	r3, [r2, #0]
 8001c8c:	4b63      	ldr	r3, [pc, #396]	; (8001e1c <HAL_RCC_OscConfig+0x270>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	4960      	ldr	r1, [pc, #384]	; (8001e1c <HAL_RCC_OscConfig+0x270>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c9e:	4b5f      	ldr	r3, [pc, #380]	; (8001e1c <HAL_RCC_OscConfig+0x270>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	021b      	lsls	r3, r3, #8
 8001cac:	495b      	ldr	r1, [pc, #364]	; (8001e1c <HAL_RCC_OscConfig+0x270>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d109      	bne.n	8001ccc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a1b      	ldr	r3, [r3, #32]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f000 fd15 	bl	80026ec <RCC_SetFlashLatencyFromMSIRange>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e343      	b.n	8002354 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ccc:	f000 fc4a 	bl	8002564 <HAL_RCC_GetSysClockFreq>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	4b52      	ldr	r3, [pc, #328]	; (8001e1c <HAL_RCC_OscConfig+0x270>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	091b      	lsrs	r3, r3, #4
 8001cd8:	f003 030f 	and.w	r3, r3, #15
 8001cdc:	4950      	ldr	r1, [pc, #320]	; (8001e20 <HAL_RCC_OscConfig+0x274>)
 8001cde:	5ccb      	ldrb	r3, [r1, r3]
 8001ce0:	f003 031f 	and.w	r3, r3, #31
 8001ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce8:	4a4e      	ldr	r2, [pc, #312]	; (8001e24 <HAL_RCC_OscConfig+0x278>)
 8001cea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001cec:	4b4e      	ldr	r3, [pc, #312]	; (8001e28 <HAL_RCC_OscConfig+0x27c>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff fb97 	bl	8001424 <HAL_InitTick>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001cfa:	7bfb      	ldrb	r3, [r7, #15]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d052      	beq.n	8001da6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001d00:	7bfb      	ldrb	r3, [r7, #15]
 8001d02:	e327      	b.n	8002354 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d032      	beq.n	8001d72 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d0c:	4b43      	ldr	r3, [pc, #268]	; (8001e1c <HAL_RCC_OscConfig+0x270>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a42      	ldr	r2, [pc, #264]	; (8001e1c <HAL_RCC_OscConfig+0x270>)
 8001d12:	f043 0301 	orr.w	r3, r3, #1
 8001d16:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d18:	f7ff fbd4 	bl	80014c4 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d20:	f7ff fbd0 	bl	80014c4 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e310      	b.n	8002354 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d32:	4b3a      	ldr	r3, [pc, #232]	; (8001e1c <HAL_RCC_OscConfig+0x270>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d0f0      	beq.n	8001d20 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d3e:	4b37      	ldr	r3, [pc, #220]	; (8001e1c <HAL_RCC_OscConfig+0x270>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a36      	ldr	r2, [pc, #216]	; (8001e1c <HAL_RCC_OscConfig+0x270>)
 8001d44:	f043 0308 	orr.w	r3, r3, #8
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	4b34      	ldr	r3, [pc, #208]	; (8001e1c <HAL_RCC_OscConfig+0x270>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a1b      	ldr	r3, [r3, #32]
 8001d56:	4931      	ldr	r1, [pc, #196]	; (8001e1c <HAL_RCC_OscConfig+0x270>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d5c:	4b2f      	ldr	r3, [pc, #188]	; (8001e1c <HAL_RCC_OscConfig+0x270>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	69db      	ldr	r3, [r3, #28]
 8001d68:	021b      	lsls	r3, r3, #8
 8001d6a:	492c      	ldr	r1, [pc, #176]	; (8001e1c <HAL_RCC_OscConfig+0x270>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	604b      	str	r3, [r1, #4]
 8001d70:	e01a      	b.n	8001da8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d72:	4b2a      	ldr	r3, [pc, #168]	; (8001e1c <HAL_RCC_OscConfig+0x270>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a29      	ldr	r2, [pc, #164]	; (8001e1c <HAL_RCC_OscConfig+0x270>)
 8001d78:	f023 0301 	bic.w	r3, r3, #1
 8001d7c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d7e:	f7ff fba1 	bl	80014c4 <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d84:	e008      	b.n	8001d98 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d86:	f7ff fb9d 	bl	80014c4 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e2dd      	b.n	8002354 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d98:	4b20      	ldr	r3, [pc, #128]	; (8001e1c <HAL_RCC_OscConfig+0x270>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1f0      	bne.n	8001d86 <HAL_RCC_OscConfig+0x1da>
 8001da4:	e000      	b.n	8001da8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001da6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d074      	beq.n	8001e9e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	2b08      	cmp	r3, #8
 8001db8:	d005      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x21a>
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	2b0c      	cmp	r3, #12
 8001dbe:	d10e      	bne.n	8001dde <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	2b03      	cmp	r3, #3
 8001dc4:	d10b      	bne.n	8001dde <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc6:	4b15      	ldr	r3, [pc, #84]	; (8001e1c <HAL_RCC_OscConfig+0x270>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d064      	beq.n	8001e9c <HAL_RCC_OscConfig+0x2f0>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d160      	bne.n	8001e9c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e2ba      	b.n	8002354 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001de6:	d106      	bne.n	8001df6 <HAL_RCC_OscConfig+0x24a>
 8001de8:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <HAL_RCC_OscConfig+0x270>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a0b      	ldr	r2, [pc, #44]	; (8001e1c <HAL_RCC_OscConfig+0x270>)
 8001dee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df2:	6013      	str	r3, [r2, #0]
 8001df4:	e026      	b.n	8001e44 <HAL_RCC_OscConfig+0x298>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dfe:	d115      	bne.n	8001e2c <HAL_RCC_OscConfig+0x280>
 8001e00:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <HAL_RCC_OscConfig+0x270>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a05      	ldr	r2, [pc, #20]	; (8001e1c <HAL_RCC_OscConfig+0x270>)
 8001e06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e0a:	6013      	str	r3, [r2, #0]
 8001e0c:	4b03      	ldr	r3, [pc, #12]	; (8001e1c <HAL_RCC_OscConfig+0x270>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a02      	ldr	r2, [pc, #8]	; (8001e1c <HAL_RCC_OscConfig+0x270>)
 8001e12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e16:	6013      	str	r3, [r2, #0]
 8001e18:	e014      	b.n	8001e44 <HAL_RCC_OscConfig+0x298>
 8001e1a:	bf00      	nop
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	080041f8 	.word	0x080041f8
 8001e24:	20000004 	.word	0x20000004
 8001e28:	20000008 	.word	0x20000008
 8001e2c:	4ba0      	ldr	r3, [pc, #640]	; (80020b0 <HAL_RCC_OscConfig+0x504>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a9f      	ldr	r2, [pc, #636]	; (80020b0 <HAL_RCC_OscConfig+0x504>)
 8001e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e36:	6013      	str	r3, [r2, #0]
 8001e38:	4b9d      	ldr	r3, [pc, #628]	; (80020b0 <HAL_RCC_OscConfig+0x504>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a9c      	ldr	r2, [pc, #624]	; (80020b0 <HAL_RCC_OscConfig+0x504>)
 8001e3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d013      	beq.n	8001e74 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4c:	f7ff fb3a 	bl	80014c4 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e54:	f7ff fb36 	bl	80014c4 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b64      	cmp	r3, #100	; 0x64
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e276      	b.n	8002354 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e66:	4b92      	ldr	r3, [pc, #584]	; (80020b0 <HAL_RCC_OscConfig+0x504>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d0f0      	beq.n	8001e54 <HAL_RCC_OscConfig+0x2a8>
 8001e72:	e014      	b.n	8001e9e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e74:	f7ff fb26 	bl	80014c4 <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e7c:	f7ff fb22 	bl	80014c4 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b64      	cmp	r3, #100	; 0x64
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e262      	b.n	8002354 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e8e:	4b88      	ldr	r3, [pc, #544]	; (80020b0 <HAL_RCC_OscConfig+0x504>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f0      	bne.n	8001e7c <HAL_RCC_OscConfig+0x2d0>
 8001e9a:	e000      	b.n	8001e9e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d060      	beq.n	8001f6c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	2b04      	cmp	r3, #4
 8001eae:	d005      	beq.n	8001ebc <HAL_RCC_OscConfig+0x310>
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	2b0c      	cmp	r3, #12
 8001eb4:	d119      	bne.n	8001eea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d116      	bne.n	8001eea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ebc:	4b7c      	ldr	r3, [pc, #496]	; (80020b0 <HAL_RCC_OscConfig+0x504>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d005      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x328>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d101      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e23f      	b.n	8002354 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed4:	4b76      	ldr	r3, [pc, #472]	; (80020b0 <HAL_RCC_OscConfig+0x504>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	061b      	lsls	r3, r3, #24
 8001ee2:	4973      	ldr	r1, [pc, #460]	; (80020b0 <HAL_RCC_OscConfig+0x504>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ee8:	e040      	b.n	8001f6c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d023      	beq.n	8001f3a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ef2:	4b6f      	ldr	r3, [pc, #444]	; (80020b0 <HAL_RCC_OscConfig+0x504>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a6e      	ldr	r2, [pc, #440]	; (80020b0 <HAL_RCC_OscConfig+0x504>)
 8001ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001efc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efe:	f7ff fae1 	bl	80014c4 <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f04:	e008      	b.n	8001f18 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f06:	f7ff fadd 	bl	80014c4 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e21d      	b.n	8002354 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f18:	4b65      	ldr	r3, [pc, #404]	; (80020b0 <HAL_RCC_OscConfig+0x504>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d0f0      	beq.n	8001f06 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f24:	4b62      	ldr	r3, [pc, #392]	; (80020b0 <HAL_RCC_OscConfig+0x504>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	061b      	lsls	r3, r3, #24
 8001f32:	495f      	ldr	r1, [pc, #380]	; (80020b0 <HAL_RCC_OscConfig+0x504>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	604b      	str	r3, [r1, #4]
 8001f38:	e018      	b.n	8001f6c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f3a:	4b5d      	ldr	r3, [pc, #372]	; (80020b0 <HAL_RCC_OscConfig+0x504>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a5c      	ldr	r2, [pc, #368]	; (80020b0 <HAL_RCC_OscConfig+0x504>)
 8001f40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f46:	f7ff fabd 	bl	80014c4 <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f4c:	e008      	b.n	8001f60 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f4e:	f7ff fab9 	bl	80014c4 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e1f9      	b.n	8002354 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f60:	4b53      	ldr	r3, [pc, #332]	; (80020b0 <HAL_RCC_OscConfig+0x504>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1f0      	bne.n	8001f4e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0308 	and.w	r3, r3, #8
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d03c      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d01c      	beq.n	8001fba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f80:	4b4b      	ldr	r3, [pc, #300]	; (80020b0 <HAL_RCC_OscConfig+0x504>)
 8001f82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f86:	4a4a      	ldr	r2, [pc, #296]	; (80020b0 <HAL_RCC_OscConfig+0x504>)
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f90:	f7ff fa98 	bl	80014c4 <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f98:	f7ff fa94 	bl	80014c4 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e1d4      	b.n	8002354 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001faa:	4b41      	ldr	r3, [pc, #260]	; (80020b0 <HAL_RCC_OscConfig+0x504>)
 8001fac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d0ef      	beq.n	8001f98 <HAL_RCC_OscConfig+0x3ec>
 8001fb8:	e01b      	b.n	8001ff2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fba:	4b3d      	ldr	r3, [pc, #244]	; (80020b0 <HAL_RCC_OscConfig+0x504>)
 8001fbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fc0:	4a3b      	ldr	r2, [pc, #236]	; (80020b0 <HAL_RCC_OscConfig+0x504>)
 8001fc2:	f023 0301 	bic.w	r3, r3, #1
 8001fc6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fca:	f7ff fa7b 	bl	80014c4 <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fd2:	f7ff fa77 	bl	80014c4 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e1b7      	b.n	8002354 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fe4:	4b32      	ldr	r3, [pc, #200]	; (80020b0 <HAL_RCC_OscConfig+0x504>)
 8001fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1ef      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0304 	and.w	r3, r3, #4
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f000 80a6 	beq.w	800214c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002000:	2300      	movs	r3, #0
 8002002:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002004:	4b2a      	ldr	r3, [pc, #168]	; (80020b0 <HAL_RCC_OscConfig+0x504>)
 8002006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d10d      	bne.n	800202c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002010:	4b27      	ldr	r3, [pc, #156]	; (80020b0 <HAL_RCC_OscConfig+0x504>)
 8002012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002014:	4a26      	ldr	r2, [pc, #152]	; (80020b0 <HAL_RCC_OscConfig+0x504>)
 8002016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800201a:	6593      	str	r3, [r2, #88]	; 0x58
 800201c:	4b24      	ldr	r3, [pc, #144]	; (80020b0 <HAL_RCC_OscConfig+0x504>)
 800201e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002024:	60bb      	str	r3, [r7, #8]
 8002026:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002028:	2301      	movs	r3, #1
 800202a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800202c:	4b21      	ldr	r3, [pc, #132]	; (80020b4 <HAL_RCC_OscConfig+0x508>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002034:	2b00      	cmp	r3, #0
 8002036:	d118      	bne.n	800206a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002038:	4b1e      	ldr	r3, [pc, #120]	; (80020b4 <HAL_RCC_OscConfig+0x508>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a1d      	ldr	r2, [pc, #116]	; (80020b4 <HAL_RCC_OscConfig+0x508>)
 800203e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002042:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002044:	f7ff fa3e 	bl	80014c4 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800204c:	f7ff fa3a 	bl	80014c4 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e17a      	b.n	8002354 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800205e:	4b15      	ldr	r3, [pc, #84]	; (80020b4 <HAL_RCC_OscConfig+0x508>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0f0      	beq.n	800204c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d108      	bne.n	8002084 <HAL_RCC_OscConfig+0x4d8>
 8002072:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <HAL_RCC_OscConfig+0x504>)
 8002074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002078:	4a0d      	ldr	r2, [pc, #52]	; (80020b0 <HAL_RCC_OscConfig+0x504>)
 800207a:	f043 0301 	orr.w	r3, r3, #1
 800207e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002082:	e029      	b.n	80020d8 <HAL_RCC_OscConfig+0x52c>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	2b05      	cmp	r3, #5
 800208a:	d115      	bne.n	80020b8 <HAL_RCC_OscConfig+0x50c>
 800208c:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <HAL_RCC_OscConfig+0x504>)
 800208e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002092:	4a07      	ldr	r2, [pc, #28]	; (80020b0 <HAL_RCC_OscConfig+0x504>)
 8002094:	f043 0304 	orr.w	r3, r3, #4
 8002098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800209c:	4b04      	ldr	r3, [pc, #16]	; (80020b0 <HAL_RCC_OscConfig+0x504>)
 800209e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a2:	4a03      	ldr	r2, [pc, #12]	; (80020b0 <HAL_RCC_OscConfig+0x504>)
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020ac:	e014      	b.n	80020d8 <HAL_RCC_OscConfig+0x52c>
 80020ae:	bf00      	nop
 80020b0:	40021000 	.word	0x40021000
 80020b4:	40007000 	.word	0x40007000
 80020b8:	4b9c      	ldr	r3, [pc, #624]	; (800232c <HAL_RCC_OscConfig+0x780>)
 80020ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020be:	4a9b      	ldr	r2, [pc, #620]	; (800232c <HAL_RCC_OscConfig+0x780>)
 80020c0:	f023 0301 	bic.w	r3, r3, #1
 80020c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020c8:	4b98      	ldr	r3, [pc, #608]	; (800232c <HAL_RCC_OscConfig+0x780>)
 80020ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ce:	4a97      	ldr	r2, [pc, #604]	; (800232c <HAL_RCC_OscConfig+0x780>)
 80020d0:	f023 0304 	bic.w	r3, r3, #4
 80020d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d016      	beq.n	800210e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e0:	f7ff f9f0 	bl	80014c4 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020e6:	e00a      	b.n	80020fe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e8:	f7ff f9ec 	bl	80014c4 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e12a      	b.n	8002354 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020fe:	4b8b      	ldr	r3, [pc, #556]	; (800232c <HAL_RCC_OscConfig+0x780>)
 8002100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0ed      	beq.n	80020e8 <HAL_RCC_OscConfig+0x53c>
 800210c:	e015      	b.n	800213a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800210e:	f7ff f9d9 	bl	80014c4 <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002114:	e00a      	b.n	800212c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002116:	f7ff f9d5 	bl	80014c4 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	f241 3288 	movw	r2, #5000	; 0x1388
 8002124:	4293      	cmp	r3, r2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e113      	b.n	8002354 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800212c:	4b7f      	ldr	r3, [pc, #508]	; (800232c <HAL_RCC_OscConfig+0x780>)
 800212e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1ed      	bne.n	8002116 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800213a:	7ffb      	ldrb	r3, [r7, #31]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d105      	bne.n	800214c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002140:	4b7a      	ldr	r3, [pc, #488]	; (800232c <HAL_RCC_OscConfig+0x780>)
 8002142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002144:	4a79      	ldr	r2, [pc, #484]	; (800232c <HAL_RCC_OscConfig+0x780>)
 8002146:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800214a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002150:	2b00      	cmp	r3, #0
 8002152:	f000 80fe 	beq.w	8002352 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215a:	2b02      	cmp	r3, #2
 800215c:	f040 80d0 	bne.w	8002300 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002160:	4b72      	ldr	r3, [pc, #456]	; (800232c <HAL_RCC_OscConfig+0x780>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	f003 0203 	and.w	r2, r3, #3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002170:	429a      	cmp	r2, r3
 8002172:	d130      	bne.n	80021d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	3b01      	subs	r3, #1
 8002180:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002182:	429a      	cmp	r2, r3
 8002184:	d127      	bne.n	80021d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002190:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002192:	429a      	cmp	r2, r3
 8002194:	d11f      	bne.n	80021d6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021a0:	2a07      	cmp	r2, #7
 80021a2:	bf14      	ite	ne
 80021a4:	2201      	movne	r2, #1
 80021a6:	2200      	moveq	r2, #0
 80021a8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d113      	bne.n	80021d6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b8:	085b      	lsrs	r3, r3, #1
 80021ba:	3b01      	subs	r3, #1
 80021bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80021be:	429a      	cmp	r2, r3
 80021c0:	d109      	bne.n	80021d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021cc:	085b      	lsrs	r3, r3, #1
 80021ce:	3b01      	subs	r3, #1
 80021d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d06e      	beq.n	80022b4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	2b0c      	cmp	r3, #12
 80021da:	d069      	beq.n	80022b0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80021dc:	4b53      	ldr	r3, [pc, #332]	; (800232c <HAL_RCC_OscConfig+0x780>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d105      	bne.n	80021f4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80021e8:	4b50      	ldr	r3, [pc, #320]	; (800232c <HAL_RCC_OscConfig+0x780>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e0ad      	b.n	8002354 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80021f8:	4b4c      	ldr	r3, [pc, #304]	; (800232c <HAL_RCC_OscConfig+0x780>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a4b      	ldr	r2, [pc, #300]	; (800232c <HAL_RCC_OscConfig+0x780>)
 80021fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002202:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002204:	f7ff f95e 	bl	80014c4 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800220c:	f7ff f95a 	bl	80014c4 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e09a      	b.n	8002354 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800221e:	4b43      	ldr	r3, [pc, #268]	; (800232c <HAL_RCC_OscConfig+0x780>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f0      	bne.n	800220c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800222a:	4b40      	ldr	r3, [pc, #256]	; (800232c <HAL_RCC_OscConfig+0x780>)
 800222c:	68da      	ldr	r2, [r3, #12]
 800222e:	4b40      	ldr	r3, [pc, #256]	; (8002330 <HAL_RCC_OscConfig+0x784>)
 8002230:	4013      	ands	r3, r2
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800223a:	3a01      	subs	r2, #1
 800223c:	0112      	lsls	r2, r2, #4
 800223e:	4311      	orrs	r1, r2
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002244:	0212      	lsls	r2, r2, #8
 8002246:	4311      	orrs	r1, r2
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800224c:	0852      	lsrs	r2, r2, #1
 800224e:	3a01      	subs	r2, #1
 8002250:	0552      	lsls	r2, r2, #21
 8002252:	4311      	orrs	r1, r2
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002258:	0852      	lsrs	r2, r2, #1
 800225a:	3a01      	subs	r2, #1
 800225c:	0652      	lsls	r2, r2, #25
 800225e:	4311      	orrs	r1, r2
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002264:	0912      	lsrs	r2, r2, #4
 8002266:	0452      	lsls	r2, r2, #17
 8002268:	430a      	orrs	r2, r1
 800226a:	4930      	ldr	r1, [pc, #192]	; (800232c <HAL_RCC_OscConfig+0x780>)
 800226c:	4313      	orrs	r3, r2
 800226e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002270:	4b2e      	ldr	r3, [pc, #184]	; (800232c <HAL_RCC_OscConfig+0x780>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a2d      	ldr	r2, [pc, #180]	; (800232c <HAL_RCC_OscConfig+0x780>)
 8002276:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800227a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800227c:	4b2b      	ldr	r3, [pc, #172]	; (800232c <HAL_RCC_OscConfig+0x780>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	4a2a      	ldr	r2, [pc, #168]	; (800232c <HAL_RCC_OscConfig+0x780>)
 8002282:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002286:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002288:	f7ff f91c 	bl	80014c4 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002290:	f7ff f918 	bl	80014c4 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e058      	b.n	8002354 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022a2:	4b22      	ldr	r3, [pc, #136]	; (800232c <HAL_RCC_OscConfig+0x780>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d0f0      	beq.n	8002290 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022ae:	e050      	b.n	8002352 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e04f      	b.n	8002354 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022b4:	4b1d      	ldr	r3, [pc, #116]	; (800232c <HAL_RCC_OscConfig+0x780>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d148      	bne.n	8002352 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80022c0:	4b1a      	ldr	r3, [pc, #104]	; (800232c <HAL_RCC_OscConfig+0x780>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a19      	ldr	r2, [pc, #100]	; (800232c <HAL_RCC_OscConfig+0x780>)
 80022c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022cc:	4b17      	ldr	r3, [pc, #92]	; (800232c <HAL_RCC_OscConfig+0x780>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	4a16      	ldr	r2, [pc, #88]	; (800232c <HAL_RCC_OscConfig+0x780>)
 80022d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022d8:	f7ff f8f4 	bl	80014c4 <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e0:	f7ff f8f0 	bl	80014c4 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e030      	b.n	8002354 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022f2:	4b0e      	ldr	r3, [pc, #56]	; (800232c <HAL_RCC_OscConfig+0x780>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0f0      	beq.n	80022e0 <HAL_RCC_OscConfig+0x734>
 80022fe:	e028      	b.n	8002352 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	2b0c      	cmp	r3, #12
 8002304:	d023      	beq.n	800234e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002306:	4b09      	ldr	r3, [pc, #36]	; (800232c <HAL_RCC_OscConfig+0x780>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a08      	ldr	r2, [pc, #32]	; (800232c <HAL_RCC_OscConfig+0x780>)
 800230c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002310:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002312:	f7ff f8d7 	bl	80014c4 <HAL_GetTick>
 8002316:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002318:	e00c      	b.n	8002334 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800231a:	f7ff f8d3 	bl	80014c4 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d905      	bls.n	8002334 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e013      	b.n	8002354 <HAL_RCC_OscConfig+0x7a8>
 800232c:	40021000 	.word	0x40021000
 8002330:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002334:	4b09      	ldr	r3, [pc, #36]	; (800235c <HAL_RCC_OscConfig+0x7b0>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1ec      	bne.n	800231a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002340:	4b06      	ldr	r3, [pc, #24]	; (800235c <HAL_RCC_OscConfig+0x7b0>)
 8002342:	68da      	ldr	r2, [r3, #12]
 8002344:	4905      	ldr	r1, [pc, #20]	; (800235c <HAL_RCC_OscConfig+0x7b0>)
 8002346:	4b06      	ldr	r3, [pc, #24]	; (8002360 <HAL_RCC_OscConfig+0x7b4>)
 8002348:	4013      	ands	r3, r2
 800234a:	60cb      	str	r3, [r1, #12]
 800234c:	e001      	b.n	8002352 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e000      	b.n	8002354 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3720      	adds	r7, #32
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40021000 	.word	0x40021000
 8002360:	feeefffc 	.word	0xfeeefffc

08002364 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e0e7      	b.n	8002548 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002378:	4b75      	ldr	r3, [pc, #468]	; (8002550 <HAL_RCC_ClockConfig+0x1ec>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0307 	and.w	r3, r3, #7
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	429a      	cmp	r2, r3
 8002384:	d910      	bls.n	80023a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002386:	4b72      	ldr	r3, [pc, #456]	; (8002550 <HAL_RCC_ClockConfig+0x1ec>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f023 0207 	bic.w	r2, r3, #7
 800238e:	4970      	ldr	r1, [pc, #448]	; (8002550 <HAL_RCC_ClockConfig+0x1ec>)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	4313      	orrs	r3, r2
 8002394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002396:	4b6e      	ldr	r3, [pc, #440]	; (8002550 <HAL_RCC_ClockConfig+0x1ec>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d001      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e0cf      	b.n	8002548 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d010      	beq.n	80023d6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	4b66      	ldr	r3, [pc, #408]	; (8002554 <HAL_RCC_ClockConfig+0x1f0>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d908      	bls.n	80023d6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023c4:	4b63      	ldr	r3, [pc, #396]	; (8002554 <HAL_RCC_ClockConfig+0x1f0>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	4960      	ldr	r1, [pc, #384]	; (8002554 <HAL_RCC_ClockConfig+0x1f0>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d04c      	beq.n	800247c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b03      	cmp	r3, #3
 80023e8:	d107      	bne.n	80023fa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ea:	4b5a      	ldr	r3, [pc, #360]	; (8002554 <HAL_RCC_ClockConfig+0x1f0>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d121      	bne.n	800243a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e0a6      	b.n	8002548 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d107      	bne.n	8002412 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002402:	4b54      	ldr	r3, [pc, #336]	; (8002554 <HAL_RCC_ClockConfig+0x1f0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d115      	bne.n	800243a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e09a      	b.n	8002548 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d107      	bne.n	800242a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800241a:	4b4e      	ldr	r3, [pc, #312]	; (8002554 <HAL_RCC_ClockConfig+0x1f0>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d109      	bne.n	800243a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e08e      	b.n	8002548 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800242a:	4b4a      	ldr	r3, [pc, #296]	; (8002554 <HAL_RCC_ClockConfig+0x1f0>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e086      	b.n	8002548 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800243a:	4b46      	ldr	r3, [pc, #280]	; (8002554 <HAL_RCC_ClockConfig+0x1f0>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f023 0203 	bic.w	r2, r3, #3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	4943      	ldr	r1, [pc, #268]	; (8002554 <HAL_RCC_ClockConfig+0x1f0>)
 8002448:	4313      	orrs	r3, r2
 800244a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800244c:	f7ff f83a 	bl	80014c4 <HAL_GetTick>
 8002450:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002452:	e00a      	b.n	800246a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002454:	f7ff f836 	bl	80014c4 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002462:	4293      	cmp	r3, r2
 8002464:	d901      	bls.n	800246a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e06e      	b.n	8002548 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246a:	4b3a      	ldr	r3, [pc, #232]	; (8002554 <HAL_RCC_ClockConfig+0x1f0>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 020c 	and.w	r2, r3, #12
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	429a      	cmp	r2, r3
 800247a:	d1eb      	bne.n	8002454 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d010      	beq.n	80024aa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	4b31      	ldr	r3, [pc, #196]	; (8002554 <HAL_RCC_ClockConfig+0x1f0>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002494:	429a      	cmp	r2, r3
 8002496:	d208      	bcs.n	80024aa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002498:	4b2e      	ldr	r3, [pc, #184]	; (8002554 <HAL_RCC_ClockConfig+0x1f0>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	492b      	ldr	r1, [pc, #172]	; (8002554 <HAL_RCC_ClockConfig+0x1f0>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024aa:	4b29      	ldr	r3, [pc, #164]	; (8002550 <HAL_RCC_ClockConfig+0x1ec>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d210      	bcs.n	80024da <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b8:	4b25      	ldr	r3, [pc, #148]	; (8002550 <HAL_RCC_ClockConfig+0x1ec>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f023 0207 	bic.w	r2, r3, #7
 80024c0:	4923      	ldr	r1, [pc, #140]	; (8002550 <HAL_RCC_ClockConfig+0x1ec>)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c8:	4b21      	ldr	r3, [pc, #132]	; (8002550 <HAL_RCC_ClockConfig+0x1ec>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d001      	beq.n	80024da <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e036      	b.n	8002548 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0304 	and.w	r3, r3, #4
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d008      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024e6:	4b1b      	ldr	r3, [pc, #108]	; (8002554 <HAL_RCC_ClockConfig+0x1f0>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	4918      	ldr	r1, [pc, #96]	; (8002554 <HAL_RCC_ClockConfig+0x1f0>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0308 	and.w	r3, r3, #8
 8002500:	2b00      	cmp	r3, #0
 8002502:	d009      	beq.n	8002518 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002504:	4b13      	ldr	r3, [pc, #76]	; (8002554 <HAL_RCC_ClockConfig+0x1f0>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	4910      	ldr	r1, [pc, #64]	; (8002554 <HAL_RCC_ClockConfig+0x1f0>)
 8002514:	4313      	orrs	r3, r2
 8002516:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002518:	f000 f824 	bl	8002564 <HAL_RCC_GetSysClockFreq>
 800251c:	4602      	mov	r2, r0
 800251e:	4b0d      	ldr	r3, [pc, #52]	; (8002554 <HAL_RCC_ClockConfig+0x1f0>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	091b      	lsrs	r3, r3, #4
 8002524:	f003 030f 	and.w	r3, r3, #15
 8002528:	490b      	ldr	r1, [pc, #44]	; (8002558 <HAL_RCC_ClockConfig+0x1f4>)
 800252a:	5ccb      	ldrb	r3, [r1, r3]
 800252c:	f003 031f 	and.w	r3, r3, #31
 8002530:	fa22 f303 	lsr.w	r3, r2, r3
 8002534:	4a09      	ldr	r2, [pc, #36]	; (800255c <HAL_RCC_ClockConfig+0x1f8>)
 8002536:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002538:	4b09      	ldr	r3, [pc, #36]	; (8002560 <HAL_RCC_ClockConfig+0x1fc>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4618      	mov	r0, r3
 800253e:	f7fe ff71 	bl	8001424 <HAL_InitTick>
 8002542:	4603      	mov	r3, r0
 8002544:	72fb      	strb	r3, [r7, #11]

  return status;
 8002546:	7afb      	ldrb	r3, [r7, #11]
}
 8002548:	4618      	mov	r0, r3
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40022000 	.word	0x40022000
 8002554:	40021000 	.word	0x40021000
 8002558:	080041f8 	.word	0x080041f8
 800255c:	20000004 	.word	0x20000004
 8002560:	20000008 	.word	0x20000008

08002564 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002564:	b480      	push	{r7}
 8002566:	b089      	sub	sp, #36	; 0x24
 8002568:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800256a:	2300      	movs	r3, #0
 800256c:	61fb      	str	r3, [r7, #28]
 800256e:	2300      	movs	r3, #0
 8002570:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002572:	4b3e      	ldr	r3, [pc, #248]	; (800266c <HAL_RCC_GetSysClockFreq+0x108>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 030c 	and.w	r3, r3, #12
 800257a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800257c:	4b3b      	ldr	r3, [pc, #236]	; (800266c <HAL_RCC_GetSysClockFreq+0x108>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f003 0303 	and.w	r3, r3, #3
 8002584:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d005      	beq.n	8002598 <HAL_RCC_GetSysClockFreq+0x34>
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	2b0c      	cmp	r3, #12
 8002590:	d121      	bne.n	80025d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d11e      	bne.n	80025d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002598:	4b34      	ldr	r3, [pc, #208]	; (800266c <HAL_RCC_GetSysClockFreq+0x108>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0308 	and.w	r3, r3, #8
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d107      	bne.n	80025b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025a4:	4b31      	ldr	r3, [pc, #196]	; (800266c <HAL_RCC_GetSysClockFreq+0x108>)
 80025a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025aa:	0a1b      	lsrs	r3, r3, #8
 80025ac:	f003 030f 	and.w	r3, r3, #15
 80025b0:	61fb      	str	r3, [r7, #28]
 80025b2:	e005      	b.n	80025c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025b4:	4b2d      	ldr	r3, [pc, #180]	; (800266c <HAL_RCC_GetSysClockFreq+0x108>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	091b      	lsrs	r3, r3, #4
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80025c0:	4a2b      	ldr	r2, [pc, #172]	; (8002670 <HAL_RCC_GetSysClockFreq+0x10c>)
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d10d      	bne.n	80025ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025d4:	e00a      	b.n	80025ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	2b04      	cmp	r3, #4
 80025da:	d102      	bne.n	80025e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025dc:	4b25      	ldr	r3, [pc, #148]	; (8002674 <HAL_RCC_GetSysClockFreq+0x110>)
 80025de:	61bb      	str	r3, [r7, #24]
 80025e0:	e004      	b.n	80025ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	2b08      	cmp	r3, #8
 80025e6:	d101      	bne.n	80025ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025e8:	4b23      	ldr	r3, [pc, #140]	; (8002678 <HAL_RCC_GetSysClockFreq+0x114>)
 80025ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	2b0c      	cmp	r3, #12
 80025f0:	d134      	bne.n	800265c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025f2:	4b1e      	ldr	r3, [pc, #120]	; (800266c <HAL_RCC_GetSysClockFreq+0x108>)
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d003      	beq.n	800260a <HAL_RCC_GetSysClockFreq+0xa6>
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	2b03      	cmp	r3, #3
 8002606:	d003      	beq.n	8002610 <HAL_RCC_GetSysClockFreq+0xac>
 8002608:	e005      	b.n	8002616 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800260a:	4b1a      	ldr	r3, [pc, #104]	; (8002674 <HAL_RCC_GetSysClockFreq+0x110>)
 800260c:	617b      	str	r3, [r7, #20]
      break;
 800260e:	e005      	b.n	800261c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002610:	4b19      	ldr	r3, [pc, #100]	; (8002678 <HAL_RCC_GetSysClockFreq+0x114>)
 8002612:	617b      	str	r3, [r7, #20]
      break;
 8002614:	e002      	b.n	800261c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	617b      	str	r3, [r7, #20]
      break;
 800261a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800261c:	4b13      	ldr	r3, [pc, #76]	; (800266c <HAL_RCC_GetSysClockFreq+0x108>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	091b      	lsrs	r3, r3, #4
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	3301      	adds	r3, #1
 8002628:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800262a:	4b10      	ldr	r3, [pc, #64]	; (800266c <HAL_RCC_GetSysClockFreq+0x108>)
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	0a1b      	lsrs	r3, r3, #8
 8002630:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	fb03 f202 	mul.w	r2, r3, r2
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002640:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002642:	4b0a      	ldr	r3, [pc, #40]	; (800266c <HAL_RCC_GetSysClockFreq+0x108>)
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	0e5b      	lsrs	r3, r3, #25
 8002648:	f003 0303 	and.w	r3, r3, #3
 800264c:	3301      	adds	r3, #1
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	fbb2 f3f3 	udiv	r3, r2, r3
 800265a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800265c:	69bb      	ldr	r3, [r7, #24]
}
 800265e:	4618      	mov	r0, r3
 8002660:	3724      	adds	r7, #36	; 0x24
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	40021000 	.word	0x40021000
 8002670:	08004210 	.word	0x08004210
 8002674:	00f42400 	.word	0x00f42400
 8002678:	007a1200 	.word	0x007a1200

0800267c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002680:	4b03      	ldr	r3, [pc, #12]	; (8002690 <HAL_RCC_GetHCLKFreq+0x14>)
 8002682:	681b      	ldr	r3, [r3, #0]
}
 8002684:	4618      	mov	r0, r3
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	20000004 	.word	0x20000004

08002694 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002698:	f7ff fff0 	bl	800267c <HAL_RCC_GetHCLKFreq>
 800269c:	4602      	mov	r2, r0
 800269e:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	0a1b      	lsrs	r3, r3, #8
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	4904      	ldr	r1, [pc, #16]	; (80026bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80026aa:	5ccb      	ldrb	r3, [r1, r3]
 80026ac:	f003 031f 	and.w	r3, r3, #31
 80026b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40021000 	.word	0x40021000
 80026bc:	08004208 	.word	0x08004208

080026c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80026c4:	f7ff ffda 	bl	800267c <HAL_RCC_GetHCLKFreq>
 80026c8:	4602      	mov	r2, r0
 80026ca:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	0adb      	lsrs	r3, r3, #11
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	4904      	ldr	r1, [pc, #16]	; (80026e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026d6:	5ccb      	ldrb	r3, [r1, r3]
 80026d8:	f003 031f 	and.w	r3, r3, #31
 80026dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40021000 	.word	0x40021000
 80026e8:	08004208 	.word	0x08004208

080026ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80026f4:	2300      	movs	r3, #0
 80026f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80026f8:	4b2a      	ldr	r3, [pc, #168]	; (80027a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002704:	f7ff f9ee 	bl	8001ae4 <HAL_PWREx_GetVoltageRange>
 8002708:	6178      	str	r0, [r7, #20]
 800270a:	e014      	b.n	8002736 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800270c:	4b25      	ldr	r3, [pc, #148]	; (80027a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800270e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002710:	4a24      	ldr	r2, [pc, #144]	; (80027a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002716:	6593      	str	r3, [r2, #88]	; 0x58
 8002718:	4b22      	ldr	r3, [pc, #136]	; (80027a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800271a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002724:	f7ff f9de 	bl	8001ae4 <HAL_PWREx_GetVoltageRange>
 8002728:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800272a:	4b1e      	ldr	r3, [pc, #120]	; (80027a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800272c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272e:	4a1d      	ldr	r2, [pc, #116]	; (80027a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002730:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002734:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800273c:	d10b      	bne.n	8002756 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b80      	cmp	r3, #128	; 0x80
 8002742:	d919      	bls.n	8002778 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2ba0      	cmp	r3, #160	; 0xa0
 8002748:	d902      	bls.n	8002750 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800274a:	2302      	movs	r3, #2
 800274c:	613b      	str	r3, [r7, #16]
 800274e:	e013      	b.n	8002778 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002750:	2301      	movs	r3, #1
 8002752:	613b      	str	r3, [r7, #16]
 8002754:	e010      	b.n	8002778 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b80      	cmp	r3, #128	; 0x80
 800275a:	d902      	bls.n	8002762 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800275c:	2303      	movs	r3, #3
 800275e:	613b      	str	r3, [r7, #16]
 8002760:	e00a      	b.n	8002778 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b80      	cmp	r3, #128	; 0x80
 8002766:	d102      	bne.n	800276e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002768:	2302      	movs	r3, #2
 800276a:	613b      	str	r3, [r7, #16]
 800276c:	e004      	b.n	8002778 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b70      	cmp	r3, #112	; 0x70
 8002772:	d101      	bne.n	8002778 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002774:	2301      	movs	r3, #1
 8002776:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002778:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f023 0207 	bic.w	r2, r3, #7
 8002780:	4909      	ldr	r1, [pc, #36]	; (80027a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	4313      	orrs	r3, r2
 8002786:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002788:	4b07      	ldr	r3, [pc, #28]	; (80027a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	429a      	cmp	r2, r3
 8002794:	d001      	beq.n	800279a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e000      	b.n	800279c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3718      	adds	r7, #24
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40021000 	.word	0x40021000
 80027a8:	40022000 	.word	0x40022000

080027ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027b4:	2300      	movs	r3, #0
 80027b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027b8:	2300      	movs	r3, #0
 80027ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d041      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80027d0:	d02a      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80027d2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80027d6:	d824      	bhi.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027dc:	d008      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80027de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027e2:	d81e      	bhi.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00a      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x52>
 80027e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027ec:	d010      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80027ee:	e018      	b.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027f0:	4b86      	ldr	r3, [pc, #536]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	4a85      	ldr	r2, [pc, #532]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027fa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027fc:	e015      	b.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	3304      	adds	r3, #4
 8002802:	2100      	movs	r1, #0
 8002804:	4618      	mov	r0, r3
 8002806:	f000 fabb 	bl	8002d80 <RCCEx_PLLSAI1_Config>
 800280a:	4603      	mov	r3, r0
 800280c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800280e:	e00c      	b.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3320      	adds	r3, #32
 8002814:	2100      	movs	r1, #0
 8002816:	4618      	mov	r0, r3
 8002818:	f000 fba6 	bl	8002f68 <RCCEx_PLLSAI2_Config>
 800281c:	4603      	mov	r3, r0
 800281e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002820:	e003      	b.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	74fb      	strb	r3, [r7, #19]
      break;
 8002826:	e000      	b.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002828:	bf00      	nop
    }

    if(ret == HAL_OK)
 800282a:	7cfb      	ldrb	r3, [r7, #19]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10b      	bne.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002830:	4b76      	ldr	r3, [pc, #472]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002836:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800283e:	4973      	ldr	r1, [pc, #460]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002840:	4313      	orrs	r3, r2
 8002842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002846:	e001      	b.n	800284c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002848:	7cfb      	ldrb	r3, [r7, #19]
 800284a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d041      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800285c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002860:	d02a      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002862:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002866:	d824      	bhi.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002868:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800286c:	d008      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800286e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002872:	d81e      	bhi.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00a      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002878:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800287c:	d010      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800287e:	e018      	b.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002880:	4b62      	ldr	r3, [pc, #392]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	4a61      	ldr	r2, [pc, #388]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002886:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800288a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800288c:	e015      	b.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	3304      	adds	r3, #4
 8002892:	2100      	movs	r1, #0
 8002894:	4618      	mov	r0, r3
 8002896:	f000 fa73 	bl	8002d80 <RCCEx_PLLSAI1_Config>
 800289a:	4603      	mov	r3, r0
 800289c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800289e:	e00c      	b.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3320      	adds	r3, #32
 80028a4:	2100      	movs	r1, #0
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 fb5e 	bl	8002f68 <RCCEx_PLLSAI2_Config>
 80028ac:	4603      	mov	r3, r0
 80028ae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028b0:	e003      	b.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	74fb      	strb	r3, [r7, #19]
      break;
 80028b6:	e000      	b.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80028b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028ba:	7cfb      	ldrb	r3, [r7, #19]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10b      	bne.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80028c0:	4b52      	ldr	r3, [pc, #328]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028ce:	494f      	ldr	r1, [pc, #316]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80028d6:	e001      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028d8:	7cfb      	ldrb	r3, [r7, #19]
 80028da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 80a0 	beq.w	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ea:	2300      	movs	r3, #0
 80028ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80028ee:	4b47      	ldr	r3, [pc, #284]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x152>
 80028fa:	2301      	movs	r3, #1
 80028fc:	e000      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80028fe:	2300      	movs	r3, #0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00d      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002904:	4b41      	ldr	r3, [pc, #260]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002908:	4a40      	ldr	r2, [pc, #256]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800290a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800290e:	6593      	str	r3, [r2, #88]	; 0x58
 8002910:	4b3e      	ldr	r3, [pc, #248]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800291c:	2301      	movs	r3, #1
 800291e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002920:	4b3b      	ldr	r3, [pc, #236]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a3a      	ldr	r2, [pc, #232]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800292a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800292c:	f7fe fdca 	bl	80014c4 <HAL_GetTick>
 8002930:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002932:	e009      	b.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002934:	f7fe fdc6 	bl	80014c4 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d902      	bls.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	74fb      	strb	r3, [r7, #19]
        break;
 8002946:	e005      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002948:	4b31      	ldr	r3, [pc, #196]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0ef      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002954:	7cfb      	ldrb	r3, [r7, #19]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d15c      	bne.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800295a:	4b2c      	ldr	r3, [pc, #176]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800295c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002960:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002964:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d01f      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x200>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	429a      	cmp	r2, r3
 8002976:	d019      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002978:	4b24      	ldr	r3, [pc, #144]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800297a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800297e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002982:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002984:	4b21      	ldr	r3, [pc, #132]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800298a:	4a20      	ldr	r2, [pc, #128]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800298c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002990:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002994:	4b1d      	ldr	r3, [pc, #116]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800299a:	4a1c      	ldr	r2, [pc, #112]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800299c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029a4:	4a19      	ldr	r2, [pc, #100]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d016      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b6:	f7fe fd85 	bl	80014c4 <HAL_GetTick>
 80029ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029bc:	e00b      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029be:	f7fe fd81 	bl	80014c4 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d902      	bls.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	74fb      	strb	r3, [r7, #19]
            break;
 80029d4:	e006      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029d6:	4b0d      	ldr	r3, [pc, #52]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0ec      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80029e4:	7cfb      	ldrb	r3, [r7, #19]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10c      	bne.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029ea:	4b08      	ldr	r3, [pc, #32]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029fa:	4904      	ldr	r1, [pc, #16]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a02:	e009      	b.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a04:	7cfb      	ldrb	r3, [r7, #19]
 8002a06:	74bb      	strb	r3, [r7, #18]
 8002a08:	e006      	b.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002a0a:	bf00      	nop
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a14:	7cfb      	ldrb	r3, [r7, #19]
 8002a16:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a18:	7c7b      	ldrb	r3, [r7, #17]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d105      	bne.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a1e:	4b9e      	ldr	r3, [pc, #632]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a22:	4a9d      	ldr	r2, [pc, #628]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a28:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00a      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a36:	4b98      	ldr	r3, [pc, #608]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3c:	f023 0203 	bic.w	r2, r3, #3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a44:	4994      	ldr	r1, [pc, #592]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00a      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a58:	4b8f      	ldr	r3, [pc, #572]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5e:	f023 020c 	bic.w	r2, r3, #12
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a66:	498c      	ldr	r1, [pc, #560]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0304 	and.w	r3, r3, #4
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00a      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a7a:	4b87      	ldr	r3, [pc, #540]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a80:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a88:	4983      	ldr	r1, [pc, #524]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0308 	and.w	r3, r3, #8
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00a      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a9c:	4b7e      	ldr	r3, [pc, #504]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aaa:	497b      	ldr	r1, [pc, #492]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0310 	and.w	r3, r3, #16
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00a      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002abe:	4b76      	ldr	r3, [pc, #472]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002acc:	4972      	ldr	r1, [pc, #456]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0320 	and.w	r3, r3, #32
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00a      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ae0:	4b6d      	ldr	r3, [pc, #436]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aee:	496a      	ldr	r1, [pc, #424]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00a      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b02:	4b65      	ldr	r3, [pc, #404]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b10:	4961      	ldr	r1, [pc, #388]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00a      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b24:	4b5c      	ldr	r3, [pc, #368]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b32:	4959      	ldr	r1, [pc, #356]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00a      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b46:	4b54      	ldr	r3, [pc, #336]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b54:	4950      	ldr	r1, [pc, #320]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00a      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b68:	4b4b      	ldr	r3, [pc, #300]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b76:	4948      	ldr	r1, [pc, #288]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00a      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b8a:	4b43      	ldr	r3, [pc, #268]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b98:	493f      	ldr	r1, [pc, #252]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d028      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bac:	4b3a      	ldr	r3, [pc, #232]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bba:	4937      	ldr	r1, [pc, #220]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bca:	d106      	bne.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bcc:	4b32      	ldr	r3, [pc, #200]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	4a31      	ldr	r2, [pc, #196]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bd6:	60d3      	str	r3, [r2, #12]
 8002bd8:	e011      	b.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bde:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002be2:	d10c      	bne.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	3304      	adds	r3, #4
 8002be8:	2101      	movs	r1, #1
 8002bea:	4618      	mov	r0, r3
 8002bec:	f000 f8c8 	bl	8002d80 <RCCEx_PLLSAI1_Config>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002bf4:	7cfb      	ldrb	r3, [r7, #19]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002bfa:	7cfb      	ldrb	r3, [r7, #19]
 8002bfc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d028      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c0a:	4b23      	ldr	r3, [pc, #140]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c10:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c18:	491f      	ldr	r1, [pc, #124]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c28:	d106      	bne.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c2a:	4b1b      	ldr	r3, [pc, #108]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	4a1a      	ldr	r2, [pc, #104]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c34:	60d3      	str	r3, [r2, #12]
 8002c36:	e011      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c40:	d10c      	bne.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	3304      	adds	r3, #4
 8002c46:	2101      	movs	r1, #1
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f000 f899 	bl	8002d80 <RCCEx_PLLSAI1_Config>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c52:	7cfb      	ldrb	r3, [r7, #19]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002c58:	7cfb      	ldrb	r3, [r7, #19]
 8002c5a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d02b      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c68:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c76:	4908      	ldr	r1, [pc, #32]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c86:	d109      	bne.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c88:	4b03      	ldr	r3, [pc, #12]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	4a02      	ldr	r2, [pc, #8]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c92:	60d3      	str	r3, [r2, #12]
 8002c94:	e014      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002c96:	bf00      	nop
 8002c98:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ca0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ca4:	d10c      	bne.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	3304      	adds	r3, #4
 8002caa:	2101      	movs	r1, #1
 8002cac:	4618      	mov	r0, r3
 8002cae:	f000 f867 	bl	8002d80 <RCCEx_PLLSAI1_Config>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cb6:	7cfb      	ldrb	r3, [r7, #19]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002cbc:	7cfb      	ldrb	r3, [r7, #19]
 8002cbe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d02f      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ccc:	4b2b      	ldr	r3, [pc, #172]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cda:	4928      	ldr	r1, [pc, #160]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ce6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cea:	d10d      	bne.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3304      	adds	r3, #4
 8002cf0:	2102      	movs	r1, #2
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 f844 	bl	8002d80 <RCCEx_PLLSAI1_Config>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cfc:	7cfb      	ldrb	r3, [r7, #19]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d014      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d02:	7cfb      	ldrb	r3, [r7, #19]
 8002d04:	74bb      	strb	r3, [r7, #18]
 8002d06:	e011      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d10:	d10c      	bne.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	3320      	adds	r3, #32
 8002d16:	2102      	movs	r1, #2
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f000 f925 	bl	8002f68 <RCCEx_PLLSAI2_Config>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d22:	7cfb      	ldrb	r3, [r7, #19]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d28:	7cfb      	ldrb	r3, [r7, #19]
 8002d2a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00a      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d38:	4b10      	ldr	r3, [pc, #64]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d46:	490d      	ldr	r1, [pc, #52]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00b      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d5a:	4b08      	ldr	r3, [pc, #32]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d60:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d6a:	4904      	ldr	r1, [pc, #16]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d72:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3718      	adds	r7, #24
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40021000 	.word	0x40021000

08002d80 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d8e:	4b75      	ldr	r3, [pc, #468]	; (8002f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d018      	beq.n	8002dcc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d9a:	4b72      	ldr	r3, [pc, #456]	; (8002f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	f003 0203 	and.w	r2, r3, #3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d10d      	bne.n	8002dc6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
       ||
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d009      	beq.n	8002dc6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002db2:	4b6c      	ldr	r3, [pc, #432]	; (8002f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	091b      	lsrs	r3, r3, #4
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	1c5a      	adds	r2, r3, #1
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
       ||
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d047      	beq.n	8002e56 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	73fb      	strb	r3, [r7, #15]
 8002dca:	e044      	b.n	8002e56 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2b03      	cmp	r3, #3
 8002dd2:	d018      	beq.n	8002e06 <RCCEx_PLLSAI1_Config+0x86>
 8002dd4:	2b03      	cmp	r3, #3
 8002dd6:	d825      	bhi.n	8002e24 <RCCEx_PLLSAI1_Config+0xa4>
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d002      	beq.n	8002de2 <RCCEx_PLLSAI1_Config+0x62>
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d009      	beq.n	8002df4 <RCCEx_PLLSAI1_Config+0x74>
 8002de0:	e020      	b.n	8002e24 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002de2:	4b60      	ldr	r3, [pc, #384]	; (8002f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d11d      	bne.n	8002e2a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002df2:	e01a      	b.n	8002e2a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002df4:	4b5b      	ldr	r3, [pc, #364]	; (8002f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d116      	bne.n	8002e2e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e04:	e013      	b.n	8002e2e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e06:	4b57      	ldr	r3, [pc, #348]	; (8002f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10f      	bne.n	8002e32 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e12:	4b54      	ldr	r3, [pc, #336]	; (8002f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d109      	bne.n	8002e32 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e22:	e006      	b.n	8002e32 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	73fb      	strb	r3, [r7, #15]
      break;
 8002e28:	e004      	b.n	8002e34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e2a:	bf00      	nop
 8002e2c:	e002      	b.n	8002e34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e2e:	bf00      	nop
 8002e30:	e000      	b.n	8002e34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e32:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e34:	7bfb      	ldrb	r3, [r7, #15]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10d      	bne.n	8002e56 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e3a:	4b4a      	ldr	r3, [pc, #296]	; (8002f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6819      	ldr	r1, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	011b      	lsls	r3, r3, #4
 8002e4e:	430b      	orrs	r3, r1
 8002e50:	4944      	ldr	r1, [pc, #272]	; (8002f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e56:	7bfb      	ldrb	r3, [r7, #15]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d17d      	bne.n	8002f58 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e5c:	4b41      	ldr	r3, [pc, #260]	; (8002f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a40      	ldr	r2, [pc, #256]	; (8002f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e62:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e68:	f7fe fb2c 	bl	80014c4 <HAL_GetTick>
 8002e6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e6e:	e009      	b.n	8002e84 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e70:	f7fe fb28 	bl	80014c4 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d902      	bls.n	8002e84 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	73fb      	strb	r3, [r7, #15]
        break;
 8002e82:	e005      	b.n	8002e90 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e84:	4b37      	ldr	r3, [pc, #220]	; (8002f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1ef      	bne.n	8002e70 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e90:	7bfb      	ldrb	r3, [r7, #15]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d160      	bne.n	8002f58 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d111      	bne.n	8002ec0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e9c:	4b31      	ldr	r3, [pc, #196]	; (8002f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ea4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6892      	ldr	r2, [r2, #8]
 8002eac:	0211      	lsls	r1, r2, #8
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	68d2      	ldr	r2, [r2, #12]
 8002eb2:	0912      	lsrs	r2, r2, #4
 8002eb4:	0452      	lsls	r2, r2, #17
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	492a      	ldr	r1, [pc, #168]	; (8002f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	610b      	str	r3, [r1, #16]
 8002ebe:	e027      	b.n	8002f10 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d112      	bne.n	8002eec <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ec6:	4b27      	ldr	r3, [pc, #156]	; (8002f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002ece:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	6892      	ldr	r2, [r2, #8]
 8002ed6:	0211      	lsls	r1, r2, #8
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6912      	ldr	r2, [r2, #16]
 8002edc:	0852      	lsrs	r2, r2, #1
 8002ede:	3a01      	subs	r2, #1
 8002ee0:	0552      	lsls	r2, r2, #21
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	491f      	ldr	r1, [pc, #124]	; (8002f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	610b      	str	r3, [r1, #16]
 8002eea:	e011      	b.n	8002f10 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002eec:	4b1d      	ldr	r3, [pc, #116]	; (8002f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ef4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	6892      	ldr	r2, [r2, #8]
 8002efc:	0211      	lsls	r1, r2, #8
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6952      	ldr	r2, [r2, #20]
 8002f02:	0852      	lsrs	r2, r2, #1
 8002f04:	3a01      	subs	r2, #1
 8002f06:	0652      	lsls	r2, r2, #25
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	4916      	ldr	r1, [pc, #88]	; (8002f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002f10:	4b14      	ldr	r3, [pc, #80]	; (8002f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a13      	ldr	r2, [pc, #76]	; (8002f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f1a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f1c:	f7fe fad2 	bl	80014c4 <HAL_GetTick>
 8002f20:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f22:	e009      	b.n	8002f38 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f24:	f7fe face 	bl	80014c4 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d902      	bls.n	8002f38 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	73fb      	strb	r3, [r7, #15]
          break;
 8002f36:	e005      	b.n	8002f44 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f38:	4b0a      	ldr	r3, [pc, #40]	; (8002f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d0ef      	beq.n	8002f24 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002f44:	7bfb      	ldrb	r3, [r7, #15]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d106      	bne.n	8002f58 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f4a:	4b06      	ldr	r3, [pc, #24]	; (8002f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f4c:	691a      	ldr	r2, [r3, #16]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	4904      	ldr	r1, [pc, #16]	; (8002f64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40021000 	.word	0x40021000

08002f68 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f72:	2300      	movs	r3, #0
 8002f74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f76:	4b6a      	ldr	r3, [pc, #424]	; (8003120 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d018      	beq.n	8002fb4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002f82:	4b67      	ldr	r3, [pc, #412]	; (8003120 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f003 0203 	and.w	r2, r3, #3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d10d      	bne.n	8002fae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
       ||
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d009      	beq.n	8002fae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002f9a:	4b61      	ldr	r3, [pc, #388]	; (8003120 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	091b      	lsrs	r3, r3, #4
 8002fa0:	f003 0307 	and.w	r3, r3, #7
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
       ||
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d047      	beq.n	800303e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	73fb      	strb	r3, [r7, #15]
 8002fb2:	e044      	b.n	800303e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2b03      	cmp	r3, #3
 8002fba:	d018      	beq.n	8002fee <RCCEx_PLLSAI2_Config+0x86>
 8002fbc:	2b03      	cmp	r3, #3
 8002fbe:	d825      	bhi.n	800300c <RCCEx_PLLSAI2_Config+0xa4>
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d002      	beq.n	8002fca <RCCEx_PLLSAI2_Config+0x62>
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d009      	beq.n	8002fdc <RCCEx_PLLSAI2_Config+0x74>
 8002fc8:	e020      	b.n	800300c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fca:	4b55      	ldr	r3, [pc, #340]	; (8003120 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d11d      	bne.n	8003012 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fda:	e01a      	b.n	8003012 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002fdc:	4b50      	ldr	r3, [pc, #320]	; (8003120 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d116      	bne.n	8003016 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fec:	e013      	b.n	8003016 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002fee:	4b4c      	ldr	r3, [pc, #304]	; (8003120 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10f      	bne.n	800301a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ffa:	4b49      	ldr	r3, [pc, #292]	; (8003120 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d109      	bne.n	800301a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800300a:	e006      	b.n	800301a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	73fb      	strb	r3, [r7, #15]
      break;
 8003010:	e004      	b.n	800301c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003012:	bf00      	nop
 8003014:	e002      	b.n	800301c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003016:	bf00      	nop
 8003018:	e000      	b.n	800301c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800301a:	bf00      	nop
    }

    if(status == HAL_OK)
 800301c:	7bfb      	ldrb	r3, [r7, #15]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10d      	bne.n	800303e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003022:	4b3f      	ldr	r3, [pc, #252]	; (8003120 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6819      	ldr	r1, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	3b01      	subs	r3, #1
 8003034:	011b      	lsls	r3, r3, #4
 8003036:	430b      	orrs	r3, r1
 8003038:	4939      	ldr	r1, [pc, #228]	; (8003120 <RCCEx_PLLSAI2_Config+0x1b8>)
 800303a:	4313      	orrs	r3, r2
 800303c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800303e:	7bfb      	ldrb	r3, [r7, #15]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d167      	bne.n	8003114 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003044:	4b36      	ldr	r3, [pc, #216]	; (8003120 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a35      	ldr	r2, [pc, #212]	; (8003120 <RCCEx_PLLSAI2_Config+0x1b8>)
 800304a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800304e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003050:	f7fe fa38 	bl	80014c4 <HAL_GetTick>
 8003054:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003056:	e009      	b.n	800306c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003058:	f7fe fa34 	bl	80014c4 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d902      	bls.n	800306c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	73fb      	strb	r3, [r7, #15]
        break;
 800306a:	e005      	b.n	8003078 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800306c:	4b2c      	ldr	r3, [pc, #176]	; (8003120 <RCCEx_PLLSAI2_Config+0x1b8>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1ef      	bne.n	8003058 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003078:	7bfb      	ldrb	r3, [r7, #15]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d14a      	bne.n	8003114 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d111      	bne.n	80030a8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003084:	4b26      	ldr	r3, [pc, #152]	; (8003120 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003086:	695b      	ldr	r3, [r3, #20]
 8003088:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800308c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	6892      	ldr	r2, [r2, #8]
 8003094:	0211      	lsls	r1, r2, #8
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	68d2      	ldr	r2, [r2, #12]
 800309a:	0912      	lsrs	r2, r2, #4
 800309c:	0452      	lsls	r2, r2, #17
 800309e:	430a      	orrs	r2, r1
 80030a0:	491f      	ldr	r1, [pc, #124]	; (8003120 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	614b      	str	r3, [r1, #20]
 80030a6:	e011      	b.n	80030cc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80030a8:	4b1d      	ldr	r3, [pc, #116]	; (8003120 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030aa:	695b      	ldr	r3, [r3, #20]
 80030ac:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80030b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	6892      	ldr	r2, [r2, #8]
 80030b8:	0211      	lsls	r1, r2, #8
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	6912      	ldr	r2, [r2, #16]
 80030be:	0852      	lsrs	r2, r2, #1
 80030c0:	3a01      	subs	r2, #1
 80030c2:	0652      	lsls	r2, r2, #25
 80030c4:	430a      	orrs	r2, r1
 80030c6:	4916      	ldr	r1, [pc, #88]	; (8003120 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80030cc:	4b14      	ldr	r3, [pc, #80]	; (8003120 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a13      	ldr	r2, [pc, #76]	; (8003120 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d8:	f7fe f9f4 	bl	80014c4 <HAL_GetTick>
 80030dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030de:	e009      	b.n	80030f4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80030e0:	f7fe f9f0 	bl	80014c4 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d902      	bls.n	80030f4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	73fb      	strb	r3, [r7, #15]
          break;
 80030f2:	e005      	b.n	8003100 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030f4:	4b0a      	ldr	r3, [pc, #40]	; (8003120 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d0ef      	beq.n	80030e0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003100:	7bfb      	ldrb	r3, [r7, #15]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d106      	bne.n	8003114 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003106:	4b06      	ldr	r3, [pc, #24]	; (8003120 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003108:	695a      	ldr	r2, [r3, #20]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	4904      	ldr	r1, [pc, #16]	; (8003120 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003110:	4313      	orrs	r3, r2
 8003112:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003114:	7bfb      	ldrb	r3, [r7, #15]
}
 8003116:	4618      	mov	r0, r3
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	40021000 	.word	0x40021000

08003124 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e095      	b.n	8003262 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	2b00      	cmp	r3, #0
 800313c:	d108      	bne.n	8003150 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003146:	d009      	beq.n	800315c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	61da      	str	r2, [r3, #28]
 800314e:	e005      	b.n	800315c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d106      	bne.n	800317c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f7fd fff6 	bl	8001168 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2202      	movs	r2, #2
 8003180:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003192:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800319c:	d902      	bls.n	80031a4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800319e:	2300      	movs	r3, #0
 80031a0:	60fb      	str	r3, [r7, #12]
 80031a2:	e002      	b.n	80031aa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80031a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80031b2:	d007      	beq.n	80031c4 <HAL_SPI_Init+0xa0>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80031bc:	d002      	beq.n	80031c4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80031d4:	431a      	orrs	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	431a      	orrs	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	431a      	orrs	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031f2:	431a      	orrs	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	69db      	ldr	r3, [r3, #28]
 80031f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031fc:	431a      	orrs	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003206:	ea42 0103 	orr.w	r1, r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	430a      	orrs	r2, r1
 8003218:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	0c1b      	lsrs	r3, r3, #16
 8003220:	f003 0204 	and.w	r2, r3, #4
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	f003 0310 	and.w	r3, r3, #16
 800322c:	431a      	orrs	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	431a      	orrs	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003240:	ea42 0103 	orr.w	r1, r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b088      	sub	sp, #32
 800326e:	af00      	add	r7, sp, #0
 8003270:	60f8      	str	r0, [r7, #12]
 8003272:	60b9      	str	r1, [r7, #8]
 8003274:	603b      	str	r3, [r7, #0]
 8003276:	4613      	mov	r3, r2
 8003278:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800327a:	2300      	movs	r3, #0
 800327c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003284:	2b01      	cmp	r3, #1
 8003286:	d101      	bne.n	800328c <HAL_SPI_Transmit+0x22>
 8003288:	2302      	movs	r3, #2
 800328a:	e158      	b.n	800353e <HAL_SPI_Transmit+0x2d4>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003294:	f7fe f916 	bl	80014c4 <HAL_GetTick>
 8003298:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800329a:	88fb      	ldrh	r3, [r7, #6]
 800329c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d002      	beq.n	80032b0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80032aa:	2302      	movs	r3, #2
 80032ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032ae:	e13d      	b.n	800352c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d002      	beq.n	80032bc <HAL_SPI_Transmit+0x52>
 80032b6:	88fb      	ldrh	r3, [r7, #6]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d102      	bne.n	80032c2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032c0:	e134      	b.n	800352c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2203      	movs	r2, #3
 80032c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	88fa      	ldrh	r2, [r7, #6]
 80032da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	88fa      	ldrh	r2, [r7, #6]
 80032e0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800330c:	d10f      	bne.n	800332e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800331c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800332c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003338:	2b40      	cmp	r3, #64	; 0x40
 800333a:	d007      	beq.n	800334c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800334a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003354:	d94b      	bls.n	80033ee <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d002      	beq.n	8003364 <HAL_SPI_Transmit+0xfa>
 800335e:	8afb      	ldrh	r3, [r7, #22]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d13e      	bne.n	80033e2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003368:	881a      	ldrh	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003374:	1c9a      	adds	r2, r3, #2
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800337e:	b29b      	uxth	r3, r3
 8003380:	3b01      	subs	r3, #1
 8003382:	b29a      	uxth	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003388:	e02b      	b.n	80033e2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b02      	cmp	r3, #2
 8003396:	d112      	bne.n	80033be <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339c:	881a      	ldrh	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a8:	1c9a      	adds	r2, r3, #2
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	3b01      	subs	r3, #1
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033bc:	e011      	b.n	80033e2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033be:	f7fe f881 	bl	80014c4 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d803      	bhi.n	80033d6 <HAL_SPI_Transmit+0x16c>
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033d4:	d102      	bne.n	80033dc <HAL_SPI_Transmit+0x172>
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d102      	bne.n	80033e2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80033e0:	e0a4      	b.n	800352c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1ce      	bne.n	800338a <HAL_SPI_Transmit+0x120>
 80033ec:	e07c      	b.n	80034e8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d002      	beq.n	80033fc <HAL_SPI_Transmit+0x192>
 80033f6:	8afb      	ldrh	r3, [r7, #22]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d170      	bne.n	80034de <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003400:	b29b      	uxth	r3, r3
 8003402:	2b01      	cmp	r3, #1
 8003404:	d912      	bls.n	800342c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340a:	881a      	ldrh	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003416:	1c9a      	adds	r2, r3, #2
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003420:	b29b      	uxth	r3, r3
 8003422:	3b02      	subs	r3, #2
 8003424:	b29a      	uxth	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	87da      	strh	r2, [r3, #62]	; 0x3e
 800342a:	e058      	b.n	80034de <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	330c      	adds	r3, #12
 8003436:	7812      	ldrb	r2, [r2, #0]
 8003438:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343e:	1c5a      	adds	r2, r3, #1
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003448:	b29b      	uxth	r3, r3
 800344a:	3b01      	subs	r3, #1
 800344c:	b29a      	uxth	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003452:	e044      	b.n	80034de <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b02      	cmp	r3, #2
 8003460:	d12b      	bne.n	80034ba <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003466:	b29b      	uxth	r3, r3
 8003468:	2b01      	cmp	r3, #1
 800346a:	d912      	bls.n	8003492 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003470:	881a      	ldrh	r2, [r3, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347c:	1c9a      	adds	r2, r3, #2
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003486:	b29b      	uxth	r3, r3
 8003488:	3b02      	subs	r3, #2
 800348a:	b29a      	uxth	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003490:	e025      	b.n	80034de <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	330c      	adds	r3, #12
 800349c:	7812      	ldrb	r2, [r2, #0]
 800349e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a4:	1c5a      	adds	r2, r3, #1
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	3b01      	subs	r3, #1
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80034b8:	e011      	b.n	80034de <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034ba:	f7fe f803 	bl	80014c4 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d803      	bhi.n	80034d2 <HAL_SPI_Transmit+0x268>
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034d0:	d102      	bne.n	80034d8 <HAL_SPI_Transmit+0x26e>
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d102      	bne.n	80034de <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80034dc:	e026      	b.n	800352c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1b5      	bne.n	8003454 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	6839      	ldr	r1, [r7, #0]
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f000 f949 	bl	8003784 <SPI_EndRxTxTransaction>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d002      	beq.n	80034fe <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2220      	movs	r2, #32
 80034fc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10a      	bne.n	800351c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003506:	2300      	movs	r3, #0
 8003508:	613b      	str	r3, [r7, #16]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	613b      	str	r3, [r7, #16]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	613b      	str	r3, [r7, #16]
 800351a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003520:	2b00      	cmp	r3, #0
 8003522:	d002      	beq.n	800352a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	77fb      	strb	r3, [r7, #31]
 8003528:	e000      	b.n	800352c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800352a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800353c:	7ffb      	ldrb	r3, [r7, #31]
}
 800353e:	4618      	mov	r0, r3
 8003540:	3720      	adds	r7, #32
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
	...

08003548 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b088      	sub	sp, #32
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	603b      	str	r3, [r7, #0]
 8003554:	4613      	mov	r3, r2
 8003556:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003558:	f7fd ffb4 	bl	80014c4 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003560:	1a9b      	subs	r3, r3, r2
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	4413      	add	r3, r2
 8003566:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003568:	f7fd ffac 	bl	80014c4 <HAL_GetTick>
 800356c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800356e:	4b39      	ldr	r3, [pc, #228]	; (8003654 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	015b      	lsls	r3, r3, #5
 8003574:	0d1b      	lsrs	r3, r3, #20
 8003576:	69fa      	ldr	r2, [r7, #28]
 8003578:	fb02 f303 	mul.w	r3, r2, r3
 800357c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800357e:	e054      	b.n	800362a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003586:	d050      	beq.n	800362a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003588:	f7fd ff9c 	bl	80014c4 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	69fa      	ldr	r2, [r7, #28]
 8003594:	429a      	cmp	r2, r3
 8003596:	d902      	bls.n	800359e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d13d      	bne.n	800361a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80035ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035b6:	d111      	bne.n	80035dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035c0:	d004      	beq.n	80035cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ca:	d107      	bne.n	80035dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035e4:	d10f      	bne.n	8003606 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003604:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e017      	b.n	800364a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003620:	2300      	movs	r3, #0
 8003622:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	3b01      	subs	r3, #1
 8003628:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	4013      	ands	r3, r2
 8003634:	68ba      	ldr	r2, [r7, #8]
 8003636:	429a      	cmp	r2, r3
 8003638:	bf0c      	ite	eq
 800363a:	2301      	moveq	r3, #1
 800363c:	2300      	movne	r3, #0
 800363e:	b2db      	uxtb	r3, r3
 8003640:	461a      	mov	r2, r3
 8003642:	79fb      	ldrb	r3, [r7, #7]
 8003644:	429a      	cmp	r2, r3
 8003646:	d19b      	bne.n	8003580 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3720      	adds	r7, #32
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	20000004 	.word	0x20000004

08003658 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b08a      	sub	sp, #40	; 0x28
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
 8003664:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003666:	2300      	movs	r3, #0
 8003668:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800366a:	f7fd ff2b 	bl	80014c4 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003672:	1a9b      	subs	r3, r3, r2
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	4413      	add	r3, r2
 8003678:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800367a:	f7fd ff23 	bl	80014c4 <HAL_GetTick>
 800367e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	330c      	adds	r3, #12
 8003686:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003688:	4b3d      	ldr	r3, [pc, #244]	; (8003780 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	4613      	mov	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4413      	add	r3, r2
 8003692:	00da      	lsls	r2, r3, #3
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	0d1b      	lsrs	r3, r3, #20
 8003698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800369a:	fb02 f303 	mul.w	r3, r2, r3
 800369e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80036a0:	e060      	b.n	8003764 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80036a8:	d107      	bne.n	80036ba <SPI_WaitFifoStateUntilTimeout+0x62>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d104      	bne.n	80036ba <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80036b8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036c0:	d050      	beq.n	8003764 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036c2:	f7fd feff 	bl	80014c4 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d902      	bls.n	80036d8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d13d      	bne.n	8003754 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80036e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036f0:	d111      	bne.n	8003716 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036fa:	d004      	beq.n	8003706 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003704:	d107      	bne.n	8003716 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003714:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800371e:	d10f      	bne.n	8003740 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800373e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e010      	b.n	8003776 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800375a:	2300      	movs	r3, #0
 800375c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	3b01      	subs	r3, #1
 8003762:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689a      	ldr	r2, [r3, #8]
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	4013      	ands	r3, r2
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	429a      	cmp	r2, r3
 8003772:	d196      	bne.n	80036a2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3728      	adds	r7, #40	; 0x28
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	20000004 	.word	0x20000004

08003784 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af02      	add	r7, sp, #8
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	2200      	movs	r2, #0
 8003798:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f7ff ff5b 	bl	8003658 <SPI_WaitFifoStateUntilTimeout>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d007      	beq.n	80037b8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ac:	f043 0220 	orr.w	r2, r3, #32
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e027      	b.n	8003808 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	9300      	str	r3, [sp, #0]
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	2200      	movs	r2, #0
 80037c0:	2180      	movs	r1, #128	; 0x80
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f7ff fec0 	bl	8003548 <SPI_WaitFlagStateUntilTimeout>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d007      	beq.n	80037de <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037d2:	f043 0220 	orr.w	r2, r3, #32
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e014      	b.n	8003808 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f7ff ff34 	bl	8003658 <SPI_WaitFifoStateUntilTimeout>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d007      	beq.n	8003806 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037fa:	f043 0220 	orr.w	r2, r3, #32
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e000      	b.n	8003808 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e040      	b.n	80038a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003826:	2b00      	cmp	r3, #0
 8003828:	d106      	bne.n	8003838 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7fd fcfa 	bl	800122c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2224      	movs	r2, #36	; 0x24
 800383c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 0201 	bic.w	r2, r2, #1
 800384c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f82c 	bl	80038ac <UART_SetConfig>
 8003854:	4603      	mov	r3, r0
 8003856:	2b01      	cmp	r3, #1
 8003858:	d101      	bne.n	800385e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e022      	b.n	80038a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 fad8 	bl	8003e1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800387a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689a      	ldr	r2, [r3, #8]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800388a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0201 	orr.w	r2, r2, #1
 800389a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 fb5f 	bl	8003f60 <UART_CheckIdleState>
 80038a2:	4603      	mov	r3, r0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038b0:	b08a      	sub	sp, #40	; 0x28
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038b6:	2300      	movs	r3, #0
 80038b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	689a      	ldr	r2, [r3, #8]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	431a      	orrs	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	431a      	orrs	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	69db      	ldr	r3, [r3, #28]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	4ba4      	ldr	r3, [pc, #656]	; (8003b6c <UART_SetConfig+0x2c0>)
 80038dc:	4013      	ands	r3, r2
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	6812      	ldr	r2, [r2, #0]
 80038e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038e4:	430b      	orrs	r3, r1
 80038e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	68da      	ldr	r2, [r3, #12]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a99      	ldr	r2, [pc, #612]	; (8003b70 <UART_SetConfig+0x2c4>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d004      	beq.n	8003918 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003914:	4313      	orrs	r3, r2
 8003916:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003928:	430a      	orrs	r2, r1
 800392a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a90      	ldr	r2, [pc, #576]	; (8003b74 <UART_SetConfig+0x2c8>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d126      	bne.n	8003984 <UART_SetConfig+0xd8>
 8003936:	4b90      	ldr	r3, [pc, #576]	; (8003b78 <UART_SetConfig+0x2cc>)
 8003938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393c:	f003 0303 	and.w	r3, r3, #3
 8003940:	2b03      	cmp	r3, #3
 8003942:	d81b      	bhi.n	800397c <UART_SetConfig+0xd0>
 8003944:	a201      	add	r2, pc, #4	; (adr r2, 800394c <UART_SetConfig+0xa0>)
 8003946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800394a:	bf00      	nop
 800394c:	0800395d 	.word	0x0800395d
 8003950:	0800396d 	.word	0x0800396d
 8003954:	08003965 	.word	0x08003965
 8003958:	08003975 	.word	0x08003975
 800395c:	2301      	movs	r3, #1
 800395e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003962:	e116      	b.n	8003b92 <UART_SetConfig+0x2e6>
 8003964:	2302      	movs	r3, #2
 8003966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800396a:	e112      	b.n	8003b92 <UART_SetConfig+0x2e6>
 800396c:	2304      	movs	r3, #4
 800396e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003972:	e10e      	b.n	8003b92 <UART_SetConfig+0x2e6>
 8003974:	2308      	movs	r3, #8
 8003976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800397a:	e10a      	b.n	8003b92 <UART_SetConfig+0x2e6>
 800397c:	2310      	movs	r3, #16
 800397e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003982:	e106      	b.n	8003b92 <UART_SetConfig+0x2e6>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a7c      	ldr	r2, [pc, #496]	; (8003b7c <UART_SetConfig+0x2d0>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d138      	bne.n	8003a00 <UART_SetConfig+0x154>
 800398e:	4b7a      	ldr	r3, [pc, #488]	; (8003b78 <UART_SetConfig+0x2cc>)
 8003990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003994:	f003 030c 	and.w	r3, r3, #12
 8003998:	2b0c      	cmp	r3, #12
 800399a:	d82d      	bhi.n	80039f8 <UART_SetConfig+0x14c>
 800399c:	a201      	add	r2, pc, #4	; (adr r2, 80039a4 <UART_SetConfig+0xf8>)
 800399e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a2:	bf00      	nop
 80039a4:	080039d9 	.word	0x080039d9
 80039a8:	080039f9 	.word	0x080039f9
 80039ac:	080039f9 	.word	0x080039f9
 80039b0:	080039f9 	.word	0x080039f9
 80039b4:	080039e9 	.word	0x080039e9
 80039b8:	080039f9 	.word	0x080039f9
 80039bc:	080039f9 	.word	0x080039f9
 80039c0:	080039f9 	.word	0x080039f9
 80039c4:	080039e1 	.word	0x080039e1
 80039c8:	080039f9 	.word	0x080039f9
 80039cc:	080039f9 	.word	0x080039f9
 80039d0:	080039f9 	.word	0x080039f9
 80039d4:	080039f1 	.word	0x080039f1
 80039d8:	2300      	movs	r3, #0
 80039da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039de:	e0d8      	b.n	8003b92 <UART_SetConfig+0x2e6>
 80039e0:	2302      	movs	r3, #2
 80039e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039e6:	e0d4      	b.n	8003b92 <UART_SetConfig+0x2e6>
 80039e8:	2304      	movs	r3, #4
 80039ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ee:	e0d0      	b.n	8003b92 <UART_SetConfig+0x2e6>
 80039f0:	2308      	movs	r3, #8
 80039f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039f6:	e0cc      	b.n	8003b92 <UART_SetConfig+0x2e6>
 80039f8:	2310      	movs	r3, #16
 80039fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039fe:	e0c8      	b.n	8003b92 <UART_SetConfig+0x2e6>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a5e      	ldr	r2, [pc, #376]	; (8003b80 <UART_SetConfig+0x2d4>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d125      	bne.n	8003a56 <UART_SetConfig+0x1aa>
 8003a0a:	4b5b      	ldr	r3, [pc, #364]	; (8003b78 <UART_SetConfig+0x2cc>)
 8003a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a10:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a14:	2b30      	cmp	r3, #48	; 0x30
 8003a16:	d016      	beq.n	8003a46 <UART_SetConfig+0x19a>
 8003a18:	2b30      	cmp	r3, #48	; 0x30
 8003a1a:	d818      	bhi.n	8003a4e <UART_SetConfig+0x1a2>
 8003a1c:	2b20      	cmp	r3, #32
 8003a1e:	d00a      	beq.n	8003a36 <UART_SetConfig+0x18a>
 8003a20:	2b20      	cmp	r3, #32
 8003a22:	d814      	bhi.n	8003a4e <UART_SetConfig+0x1a2>
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d002      	beq.n	8003a2e <UART_SetConfig+0x182>
 8003a28:	2b10      	cmp	r3, #16
 8003a2a:	d008      	beq.n	8003a3e <UART_SetConfig+0x192>
 8003a2c:	e00f      	b.n	8003a4e <UART_SetConfig+0x1a2>
 8003a2e:	2300      	movs	r3, #0
 8003a30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a34:	e0ad      	b.n	8003b92 <UART_SetConfig+0x2e6>
 8003a36:	2302      	movs	r3, #2
 8003a38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a3c:	e0a9      	b.n	8003b92 <UART_SetConfig+0x2e6>
 8003a3e:	2304      	movs	r3, #4
 8003a40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a44:	e0a5      	b.n	8003b92 <UART_SetConfig+0x2e6>
 8003a46:	2308      	movs	r3, #8
 8003a48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a4c:	e0a1      	b.n	8003b92 <UART_SetConfig+0x2e6>
 8003a4e:	2310      	movs	r3, #16
 8003a50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a54:	e09d      	b.n	8003b92 <UART_SetConfig+0x2e6>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a4a      	ldr	r2, [pc, #296]	; (8003b84 <UART_SetConfig+0x2d8>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d125      	bne.n	8003aac <UART_SetConfig+0x200>
 8003a60:	4b45      	ldr	r3, [pc, #276]	; (8003b78 <UART_SetConfig+0x2cc>)
 8003a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a66:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003a6a:	2bc0      	cmp	r3, #192	; 0xc0
 8003a6c:	d016      	beq.n	8003a9c <UART_SetConfig+0x1f0>
 8003a6e:	2bc0      	cmp	r3, #192	; 0xc0
 8003a70:	d818      	bhi.n	8003aa4 <UART_SetConfig+0x1f8>
 8003a72:	2b80      	cmp	r3, #128	; 0x80
 8003a74:	d00a      	beq.n	8003a8c <UART_SetConfig+0x1e0>
 8003a76:	2b80      	cmp	r3, #128	; 0x80
 8003a78:	d814      	bhi.n	8003aa4 <UART_SetConfig+0x1f8>
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d002      	beq.n	8003a84 <UART_SetConfig+0x1d8>
 8003a7e:	2b40      	cmp	r3, #64	; 0x40
 8003a80:	d008      	beq.n	8003a94 <UART_SetConfig+0x1e8>
 8003a82:	e00f      	b.n	8003aa4 <UART_SetConfig+0x1f8>
 8003a84:	2300      	movs	r3, #0
 8003a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a8a:	e082      	b.n	8003b92 <UART_SetConfig+0x2e6>
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a92:	e07e      	b.n	8003b92 <UART_SetConfig+0x2e6>
 8003a94:	2304      	movs	r3, #4
 8003a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a9a:	e07a      	b.n	8003b92 <UART_SetConfig+0x2e6>
 8003a9c:	2308      	movs	r3, #8
 8003a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aa2:	e076      	b.n	8003b92 <UART_SetConfig+0x2e6>
 8003aa4:	2310      	movs	r3, #16
 8003aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aaa:	e072      	b.n	8003b92 <UART_SetConfig+0x2e6>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a35      	ldr	r2, [pc, #212]	; (8003b88 <UART_SetConfig+0x2dc>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d12a      	bne.n	8003b0c <UART_SetConfig+0x260>
 8003ab6:	4b30      	ldr	r3, [pc, #192]	; (8003b78 <UART_SetConfig+0x2cc>)
 8003ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003abc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ac0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ac4:	d01a      	beq.n	8003afc <UART_SetConfig+0x250>
 8003ac6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003aca:	d81b      	bhi.n	8003b04 <UART_SetConfig+0x258>
 8003acc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ad0:	d00c      	beq.n	8003aec <UART_SetConfig+0x240>
 8003ad2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ad6:	d815      	bhi.n	8003b04 <UART_SetConfig+0x258>
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <UART_SetConfig+0x238>
 8003adc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ae0:	d008      	beq.n	8003af4 <UART_SetConfig+0x248>
 8003ae2:	e00f      	b.n	8003b04 <UART_SetConfig+0x258>
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aea:	e052      	b.n	8003b92 <UART_SetConfig+0x2e6>
 8003aec:	2302      	movs	r3, #2
 8003aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003af2:	e04e      	b.n	8003b92 <UART_SetConfig+0x2e6>
 8003af4:	2304      	movs	r3, #4
 8003af6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003afa:	e04a      	b.n	8003b92 <UART_SetConfig+0x2e6>
 8003afc:	2308      	movs	r3, #8
 8003afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b02:	e046      	b.n	8003b92 <UART_SetConfig+0x2e6>
 8003b04:	2310      	movs	r3, #16
 8003b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b0a:	e042      	b.n	8003b92 <UART_SetConfig+0x2e6>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a17      	ldr	r2, [pc, #92]	; (8003b70 <UART_SetConfig+0x2c4>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d13a      	bne.n	8003b8c <UART_SetConfig+0x2e0>
 8003b16:	4b18      	ldr	r3, [pc, #96]	; (8003b78 <UART_SetConfig+0x2cc>)
 8003b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b24:	d01a      	beq.n	8003b5c <UART_SetConfig+0x2b0>
 8003b26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b2a:	d81b      	bhi.n	8003b64 <UART_SetConfig+0x2b8>
 8003b2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b30:	d00c      	beq.n	8003b4c <UART_SetConfig+0x2a0>
 8003b32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b36:	d815      	bhi.n	8003b64 <UART_SetConfig+0x2b8>
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d003      	beq.n	8003b44 <UART_SetConfig+0x298>
 8003b3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b40:	d008      	beq.n	8003b54 <UART_SetConfig+0x2a8>
 8003b42:	e00f      	b.n	8003b64 <UART_SetConfig+0x2b8>
 8003b44:	2300      	movs	r3, #0
 8003b46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b4a:	e022      	b.n	8003b92 <UART_SetConfig+0x2e6>
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b52:	e01e      	b.n	8003b92 <UART_SetConfig+0x2e6>
 8003b54:	2304      	movs	r3, #4
 8003b56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b5a:	e01a      	b.n	8003b92 <UART_SetConfig+0x2e6>
 8003b5c:	2308      	movs	r3, #8
 8003b5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b62:	e016      	b.n	8003b92 <UART_SetConfig+0x2e6>
 8003b64:	2310      	movs	r3, #16
 8003b66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b6a:	e012      	b.n	8003b92 <UART_SetConfig+0x2e6>
 8003b6c:	efff69f3 	.word	0xefff69f3
 8003b70:	40008000 	.word	0x40008000
 8003b74:	40013800 	.word	0x40013800
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	40004400 	.word	0x40004400
 8003b80:	40004800 	.word	0x40004800
 8003b84:	40004c00 	.word	0x40004c00
 8003b88:	40005000 	.word	0x40005000
 8003b8c:	2310      	movs	r3, #16
 8003b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a9f      	ldr	r2, [pc, #636]	; (8003e14 <UART_SetConfig+0x568>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d17a      	bne.n	8003c92 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ba0:	2b08      	cmp	r3, #8
 8003ba2:	d824      	bhi.n	8003bee <UART_SetConfig+0x342>
 8003ba4:	a201      	add	r2, pc, #4	; (adr r2, 8003bac <UART_SetConfig+0x300>)
 8003ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003baa:	bf00      	nop
 8003bac:	08003bd1 	.word	0x08003bd1
 8003bb0:	08003bef 	.word	0x08003bef
 8003bb4:	08003bd9 	.word	0x08003bd9
 8003bb8:	08003bef 	.word	0x08003bef
 8003bbc:	08003bdf 	.word	0x08003bdf
 8003bc0:	08003bef 	.word	0x08003bef
 8003bc4:	08003bef 	.word	0x08003bef
 8003bc8:	08003bef 	.word	0x08003bef
 8003bcc:	08003be7 	.word	0x08003be7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bd0:	f7fe fd60 	bl	8002694 <HAL_RCC_GetPCLK1Freq>
 8003bd4:	61f8      	str	r0, [r7, #28]
        break;
 8003bd6:	e010      	b.n	8003bfa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bd8:	4b8f      	ldr	r3, [pc, #572]	; (8003e18 <UART_SetConfig+0x56c>)
 8003bda:	61fb      	str	r3, [r7, #28]
        break;
 8003bdc:	e00d      	b.n	8003bfa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bde:	f7fe fcc1 	bl	8002564 <HAL_RCC_GetSysClockFreq>
 8003be2:	61f8      	str	r0, [r7, #28]
        break;
 8003be4:	e009      	b.n	8003bfa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003be6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bea:	61fb      	str	r3, [r7, #28]
        break;
 8003bec:	e005      	b.n	8003bfa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003bf8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 80fb 	beq.w	8003df8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	4613      	mov	r3, r2
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	4413      	add	r3, r2
 8003c0c:	69fa      	ldr	r2, [r7, #28]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d305      	bcc.n	8003c1e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c18:	69fa      	ldr	r2, [r7, #28]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d903      	bls.n	8003c26 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c24:	e0e8      	b.n	8003df8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	461c      	mov	r4, r3
 8003c2c:	4615      	mov	r5, r2
 8003c2e:	f04f 0200 	mov.w	r2, #0
 8003c32:	f04f 0300 	mov.w	r3, #0
 8003c36:	022b      	lsls	r3, r5, #8
 8003c38:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003c3c:	0222      	lsls	r2, r4, #8
 8003c3e:	68f9      	ldr	r1, [r7, #12]
 8003c40:	6849      	ldr	r1, [r1, #4]
 8003c42:	0849      	lsrs	r1, r1, #1
 8003c44:	2000      	movs	r0, #0
 8003c46:	4688      	mov	r8, r1
 8003c48:	4681      	mov	r9, r0
 8003c4a:	eb12 0a08 	adds.w	sl, r2, r8
 8003c4e:	eb43 0b09 	adc.w	fp, r3, r9
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	603b      	str	r3, [r7, #0]
 8003c5a:	607a      	str	r2, [r7, #4]
 8003c5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c60:	4650      	mov	r0, sl
 8003c62:	4659      	mov	r1, fp
 8003c64:	f7fc fab0 	bl	80001c8 <__aeabi_uldivmod>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c76:	d308      	bcc.n	8003c8a <UART_SetConfig+0x3de>
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c7e:	d204      	bcs.n	8003c8a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	60da      	str	r2, [r3, #12]
 8003c88:	e0b6      	b.n	8003df8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c90:	e0b2      	b.n	8003df8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	69db      	ldr	r3, [r3, #28]
 8003c96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c9a:	d15e      	bne.n	8003d5a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003c9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ca0:	2b08      	cmp	r3, #8
 8003ca2:	d828      	bhi.n	8003cf6 <UART_SetConfig+0x44a>
 8003ca4:	a201      	add	r2, pc, #4	; (adr r2, 8003cac <UART_SetConfig+0x400>)
 8003ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003caa:	bf00      	nop
 8003cac:	08003cd1 	.word	0x08003cd1
 8003cb0:	08003cd9 	.word	0x08003cd9
 8003cb4:	08003ce1 	.word	0x08003ce1
 8003cb8:	08003cf7 	.word	0x08003cf7
 8003cbc:	08003ce7 	.word	0x08003ce7
 8003cc0:	08003cf7 	.word	0x08003cf7
 8003cc4:	08003cf7 	.word	0x08003cf7
 8003cc8:	08003cf7 	.word	0x08003cf7
 8003ccc:	08003cef 	.word	0x08003cef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cd0:	f7fe fce0 	bl	8002694 <HAL_RCC_GetPCLK1Freq>
 8003cd4:	61f8      	str	r0, [r7, #28]
        break;
 8003cd6:	e014      	b.n	8003d02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cd8:	f7fe fcf2 	bl	80026c0 <HAL_RCC_GetPCLK2Freq>
 8003cdc:	61f8      	str	r0, [r7, #28]
        break;
 8003cde:	e010      	b.n	8003d02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ce0:	4b4d      	ldr	r3, [pc, #308]	; (8003e18 <UART_SetConfig+0x56c>)
 8003ce2:	61fb      	str	r3, [r7, #28]
        break;
 8003ce4:	e00d      	b.n	8003d02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ce6:	f7fe fc3d 	bl	8002564 <HAL_RCC_GetSysClockFreq>
 8003cea:	61f8      	str	r0, [r7, #28]
        break;
 8003cec:	e009      	b.n	8003d02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cf2:	61fb      	str	r3, [r7, #28]
        break;
 8003cf4:	e005      	b.n	8003d02 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003d00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d077      	beq.n	8003df8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	005a      	lsls	r2, r3, #1
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	085b      	lsrs	r3, r3, #1
 8003d12:	441a      	add	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d1c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	2b0f      	cmp	r3, #15
 8003d22:	d916      	bls.n	8003d52 <UART_SetConfig+0x4a6>
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d2a:	d212      	bcs.n	8003d52 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	f023 030f 	bic.w	r3, r3, #15
 8003d34:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	085b      	lsrs	r3, r3, #1
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	f003 0307 	and.w	r3, r3, #7
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	8afb      	ldrh	r3, [r7, #22]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	8afa      	ldrh	r2, [r7, #22]
 8003d4e:	60da      	str	r2, [r3, #12]
 8003d50:	e052      	b.n	8003df8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d58:	e04e      	b.n	8003df8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d5e:	2b08      	cmp	r3, #8
 8003d60:	d827      	bhi.n	8003db2 <UART_SetConfig+0x506>
 8003d62:	a201      	add	r2, pc, #4	; (adr r2, 8003d68 <UART_SetConfig+0x4bc>)
 8003d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d68:	08003d8d 	.word	0x08003d8d
 8003d6c:	08003d95 	.word	0x08003d95
 8003d70:	08003d9d 	.word	0x08003d9d
 8003d74:	08003db3 	.word	0x08003db3
 8003d78:	08003da3 	.word	0x08003da3
 8003d7c:	08003db3 	.word	0x08003db3
 8003d80:	08003db3 	.word	0x08003db3
 8003d84:	08003db3 	.word	0x08003db3
 8003d88:	08003dab 	.word	0x08003dab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d8c:	f7fe fc82 	bl	8002694 <HAL_RCC_GetPCLK1Freq>
 8003d90:	61f8      	str	r0, [r7, #28]
        break;
 8003d92:	e014      	b.n	8003dbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d94:	f7fe fc94 	bl	80026c0 <HAL_RCC_GetPCLK2Freq>
 8003d98:	61f8      	str	r0, [r7, #28]
        break;
 8003d9a:	e010      	b.n	8003dbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d9c:	4b1e      	ldr	r3, [pc, #120]	; (8003e18 <UART_SetConfig+0x56c>)
 8003d9e:	61fb      	str	r3, [r7, #28]
        break;
 8003da0:	e00d      	b.n	8003dbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003da2:	f7fe fbdf 	bl	8002564 <HAL_RCC_GetSysClockFreq>
 8003da6:	61f8      	str	r0, [r7, #28]
        break;
 8003da8:	e009      	b.n	8003dbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003daa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dae:	61fb      	str	r3, [r7, #28]
        break;
 8003db0:	e005      	b.n	8003dbe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003db2:	2300      	movs	r3, #0
 8003db4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003dbc:	bf00      	nop
    }

    if (pclk != 0U)
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d019      	beq.n	8003df8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	085a      	lsrs	r2, r3, #1
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	441a      	add	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	2b0f      	cmp	r3, #15
 8003ddc:	d909      	bls.n	8003df2 <UART_SetConfig+0x546>
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003de4:	d205      	bcs.n	8003df2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	60da      	str	r2, [r3, #12]
 8003df0:	e002      	b.n	8003df8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003e04:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3728      	adds	r7, #40	; 0x28
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e12:	bf00      	nop
 8003e14:	40008000 	.word	0x40008000
 8003e18:	00f42400 	.word	0x00f42400

08003e1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00a      	beq.n	8003e46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	430a      	orrs	r2, r1
 8003e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00a      	beq.n	8003e68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00a      	beq.n	8003e8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8e:	f003 0308 	and.w	r3, r3, #8
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00a      	beq.n	8003eac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	f003 0310 	and.w	r3, r3, #16
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00a      	beq.n	8003ece <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	f003 0320 	and.w	r3, r3, #32
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00a      	beq.n	8003ef0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d01a      	beq.n	8003f32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f1a:	d10a      	bne.n	8003f32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00a      	beq.n	8003f54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	605a      	str	r2, [r3, #4]
  }
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af02      	add	r7, sp, #8
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f70:	f7fd faa8 	bl	80014c4 <HAL_GetTick>
 8003f74:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0308 	and.w	r3, r3, #8
 8003f80:	2b08      	cmp	r3, #8
 8003f82:	d10e      	bne.n	8003fa2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f88:	9300      	str	r3, [sp, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f82d 	bl	8003ff2 <UART_WaitOnFlagUntilTimeout>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e023      	b.n	8003fea <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	2b04      	cmp	r3, #4
 8003fae:	d10e      	bne.n	8003fce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f817 	bl	8003ff2 <UART_WaitOnFlagUntilTimeout>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e00d      	b.n	8003fea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b09c      	sub	sp, #112	; 0x70
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	60f8      	str	r0, [r7, #12]
 8003ffa:	60b9      	str	r1, [r7, #8]
 8003ffc:	603b      	str	r3, [r7, #0]
 8003ffe:	4613      	mov	r3, r2
 8004000:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004002:	e0a5      	b.n	8004150 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004004:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004006:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800400a:	f000 80a1 	beq.w	8004150 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800400e:	f7fd fa59 	bl	80014c4 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800401a:	429a      	cmp	r2, r3
 800401c:	d302      	bcc.n	8004024 <UART_WaitOnFlagUntilTimeout+0x32>
 800401e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004020:	2b00      	cmp	r3, #0
 8004022:	d13e      	bne.n	80040a2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800402c:	e853 3f00 	ldrex	r3, [r3]
 8004030:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004034:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004038:	667b      	str	r3, [r7, #100]	; 0x64
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	461a      	mov	r2, r3
 8004040:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004042:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004044:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004046:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004048:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800404a:	e841 2300 	strex	r3, r2, [r1]
 800404e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004050:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1e6      	bne.n	8004024 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	3308      	adds	r3, #8
 800405c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004060:	e853 3f00 	ldrex	r3, [r3]
 8004064:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004068:	f023 0301 	bic.w	r3, r3, #1
 800406c:	663b      	str	r3, [r7, #96]	; 0x60
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	3308      	adds	r3, #8
 8004074:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004076:	64ba      	str	r2, [r7, #72]	; 0x48
 8004078:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800407c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800407e:	e841 2300 	strex	r3, r2, [r1]
 8004082:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1e5      	bne.n	8004056 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2220      	movs	r2, #32
 800408e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2220      	movs	r2, #32
 8004094:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e067      	b.n	8004172 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d04f      	beq.n	8004150 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040be:	d147      	bne.n	8004150 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040c8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d2:	e853 3f00 	ldrex	r3, [r3]
 80040d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	461a      	mov	r2, r3
 80040e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e8:	637b      	str	r3, [r7, #52]	; 0x34
 80040ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040f0:	e841 2300 	strex	r3, r2, [r1]
 80040f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1e6      	bne.n	80040ca <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	3308      	adds	r3, #8
 8004102:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	e853 3f00 	ldrex	r3, [r3]
 800410a:	613b      	str	r3, [r7, #16]
   return(result);
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	f023 0301 	bic.w	r3, r3, #1
 8004112:	66bb      	str	r3, [r7, #104]	; 0x68
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	3308      	adds	r3, #8
 800411a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800411c:	623a      	str	r2, [r7, #32]
 800411e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004120:	69f9      	ldr	r1, [r7, #28]
 8004122:	6a3a      	ldr	r2, [r7, #32]
 8004124:	e841 2300 	strex	r3, r2, [r1]
 8004128:	61bb      	str	r3, [r7, #24]
   return(result);
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1e5      	bne.n	80040fc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2220      	movs	r2, #32
 8004134:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2220      	movs	r2, #32
 800413a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2220      	movs	r2, #32
 8004140:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e010      	b.n	8004172 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	69da      	ldr	r2, [r3, #28]
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	4013      	ands	r3, r2
 800415a:	68ba      	ldr	r2, [r7, #8]
 800415c:	429a      	cmp	r2, r3
 800415e:	bf0c      	ite	eq
 8004160:	2301      	moveq	r3, #1
 8004162:	2300      	movne	r3, #0
 8004164:	b2db      	uxtb	r3, r3
 8004166:	461a      	mov	r2, r3
 8004168:	79fb      	ldrb	r3, [r7, #7]
 800416a:	429a      	cmp	r2, r3
 800416c:	f43f af4a 	beq.w	8004004 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3770      	adds	r7, #112	; 0x70
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
	...

0800417c <__libc_init_array>:
 800417c:	b570      	push	{r4, r5, r6, lr}
 800417e:	4d0d      	ldr	r5, [pc, #52]	; (80041b4 <__libc_init_array+0x38>)
 8004180:	4c0d      	ldr	r4, [pc, #52]	; (80041b8 <__libc_init_array+0x3c>)
 8004182:	1b64      	subs	r4, r4, r5
 8004184:	10a4      	asrs	r4, r4, #2
 8004186:	2600      	movs	r6, #0
 8004188:	42a6      	cmp	r6, r4
 800418a:	d109      	bne.n	80041a0 <__libc_init_array+0x24>
 800418c:	4d0b      	ldr	r5, [pc, #44]	; (80041bc <__libc_init_array+0x40>)
 800418e:	4c0c      	ldr	r4, [pc, #48]	; (80041c0 <__libc_init_array+0x44>)
 8004190:	f000 f820 	bl	80041d4 <_init>
 8004194:	1b64      	subs	r4, r4, r5
 8004196:	10a4      	asrs	r4, r4, #2
 8004198:	2600      	movs	r6, #0
 800419a:	42a6      	cmp	r6, r4
 800419c:	d105      	bne.n	80041aa <__libc_init_array+0x2e>
 800419e:	bd70      	pop	{r4, r5, r6, pc}
 80041a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80041a4:	4798      	blx	r3
 80041a6:	3601      	adds	r6, #1
 80041a8:	e7ee      	b.n	8004188 <__libc_init_array+0xc>
 80041aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80041ae:	4798      	blx	r3
 80041b0:	3601      	adds	r6, #1
 80041b2:	e7f2      	b.n	800419a <__libc_init_array+0x1e>
 80041b4:	08004248 	.word	0x08004248
 80041b8:	08004248 	.word	0x08004248
 80041bc:	08004248 	.word	0x08004248
 80041c0:	0800424c 	.word	0x0800424c

080041c4 <memset>:
 80041c4:	4402      	add	r2, r0
 80041c6:	4603      	mov	r3, r0
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d100      	bne.n	80041ce <memset+0xa>
 80041cc:	4770      	bx	lr
 80041ce:	f803 1b01 	strb.w	r1, [r3], #1
 80041d2:	e7f9      	b.n	80041c8 <memset+0x4>

080041d4 <_init>:
 80041d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041d6:	bf00      	nop
 80041d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041da:	bc08      	pop	{r3}
 80041dc:	469e      	mov	lr, r3
 80041de:	4770      	bx	lr

080041e0 <_fini>:
 80041e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041e2:	bf00      	nop
 80041e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041e6:	bc08      	pop	{r3}
 80041e8:	469e      	mov	lr, r3
 80041ea:	4770      	bx	lr
