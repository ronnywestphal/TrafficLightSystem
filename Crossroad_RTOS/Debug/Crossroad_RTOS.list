
Crossroad_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a20  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08007bb0  08007bb0  00017bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d10  08007d10  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08007d10  08007d10  00017d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d18  08007d18  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d18  08007d18  00017d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d1c  08007d1c  00017d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007d20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b44  2000007c  08007d9c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001bc0  08007d9c  00021bc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f523  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040c5  00000000  00000000  0003f5cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001968  00000000  00000000  00043698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017d0  00000000  00000000  00045000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a0b9  00000000  00000000  000467d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dbb4  00000000  00000000  00070889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100865  00000000  00000000  0008e43d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018eca2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cec  00000000  00000000  0018ecf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007b98 	.word	0x08007b98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08007b98 	.word	0x08007b98

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <nextDirection>:
extern SemaphoreHandle_t NbinarySem;

/**
  * @brief switches the direction of the LEDs
  */
void nextDirection(void){
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	gpio_clearAllNotBlue();
 80004d8:	f000 fca8 	bl	8000e2c <gpio_clearAllNotBlue>
	if (greenVertical){
 80004dc:	4b09      	ldr	r3, [pc, #36]	; (8000504 <nextDirection+0x30>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d003      	beq.n	80004ec <nextDirection+0x18>
		gpio_setMultipleLights(horizontalGreen);
 80004e4:	4808      	ldr	r0, [pc, #32]	; (8000508 <nextDirection+0x34>)
 80004e6:	f000 fc7b 	bl	8000de0 <gpio_setMultipleLights>
 80004ea:	e002      	b.n	80004f2 <nextDirection+0x1e>
	} else{
		gpio_setMultipleLights(verticalGreen);
 80004ec:	4807      	ldr	r0, [pc, #28]	; (800050c <nextDirection+0x38>)
 80004ee:	f000 fc77 	bl	8000de0 <gpio_setMultipleLights>
	}
	greenVertical = greenVertical ? false : true;
 80004f2:	4b04      	ldr	r3, [pc, #16]	; (8000504 <nextDirection+0x30>)
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	f083 0301 	eor.w	r3, r3, #1
 80004fa:	b2da      	uxtb	r2, r3
 80004fc:	4b01      	ldr	r3, [pc, #4]	; (8000504 <nextDirection+0x30>)
 80004fe:	701a      	strb	r2, [r3, #0]
}
 8000500:	bf00      	nop
 8000502:	bd80      	pop	{r7, pc}
 8000504:	2000009c 	.word	0x2000009c
 8000508:	08007bf4 	.word	0x08007bf4
 800050c:	08007bf0 	.word	0x08007bf0

08000510 <checkNextState>:

/**
  * @brief called after a yellow light when the next state of the state machine needs to be evaluated
  */
void checkNextState(void){
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
	if (NBtnPressed || SBtnPressed){
 8000514:	4b29      	ldr	r3, [pc, #164]	; (80005bc <checkNextState+0xac>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d103      	bne.n	8000524 <checkNextState+0x14>
 800051c:	4b28      	ldr	r3, [pc, #160]	; (80005c0 <checkNextState+0xb0>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d007      	beq.n	8000534 <checkNextState+0x24>
		waitTime = walkingDelay;
 8000524:	4b27      	ldr	r3, [pc, #156]	; (80005c4 <checkNextState+0xb4>)
 8000526:	f44f 7261 	mov.w	r2, #900	; 0x384
 800052a:	601a      	str	r2, [r3, #0]
		stayGreen = false;
 800052c:	4b26      	ldr	r3, [pc, #152]	; (80005c8 <checkNextState+0xb8>)
 800052e:	2200      	movs	r2, #0
 8000530:	701a      	strb	r2, [r3, #0]
 8000532:	e03d      	b.n	80005b0 <checkNextState+0xa0>
	} else {
		if (!carsVertical && !carsHorizontal) {
 8000534:	4b25      	ldr	r3, [pc, #148]	; (80005cc <checkNextState+0xbc>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	f083 0301 	eor.w	r3, r3, #1
 800053c:	b2db      	uxtb	r3, r3
 800053e:	2b00      	cmp	r3, #0
 8000540:	d012      	beq.n	8000568 <checkNextState+0x58>
 8000542:	4b23      	ldr	r3, [pc, #140]	; (80005d0 <checkNextState+0xc0>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	f083 0301 	eor.w	r3, r3, #1
 800054a:	b2db      	uxtb	r3, r3
 800054c:	2b00      	cmp	r3, #0
 800054e:	d00b      	beq.n	8000568 <checkNextState+0x58>
			waitTime = carsVertical ? redDelayMax : greenDelay;
 8000550:	4b1e      	ldr	r3, [pc, #120]	; (80005cc <checkNextState+0xbc>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d002      	beq.n	800055e <checkNextState+0x4e>
 8000558:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800055c:	e001      	b.n	8000562 <checkNextState+0x52>
 800055e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000562:	4a18      	ldr	r2, [pc, #96]	; (80005c4 <checkNextState+0xb4>)
 8000564:	6013      	str	r3, [r2, #0]
 8000566:	e018      	b.n	800059a <checkNextState+0x8a>
		}
		else if (carsVertical != carsHorizontal){
 8000568:	4b18      	ldr	r3, [pc, #96]	; (80005cc <checkNextState+0xbc>)
 800056a:	781a      	ldrb	r2, [r3, #0]
 800056c:	4b18      	ldr	r3, [pc, #96]	; (80005d0 <checkNextState+0xc0>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	429a      	cmp	r2, r3
 8000572:	d012      	beq.n	800059a <checkNextState+0x8a>
			gpio_clearAllNotBlue();
 8000574:	f000 fc5a 	bl	8000e2c <gpio_clearAllNotBlue>
			if (carsVertical){
 8000578:	4b14      	ldr	r3, [pc, #80]	; (80005cc <checkNextState+0xbc>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d006      	beq.n	800058e <checkNextState+0x7e>
				gpio_setMultipleLights(verticalGreen);
 8000580:	4814      	ldr	r0, [pc, #80]	; (80005d4 <checkNextState+0xc4>)
 8000582:	f000 fc2d 	bl	8000de0 <gpio_setMultipleLights>
				greenVertical = true;
 8000586:	4b14      	ldr	r3, [pc, #80]	; (80005d8 <checkNextState+0xc8>)
 8000588:	2201      	movs	r2, #1
 800058a:	701a      	strb	r2, [r3, #0]
 800058c:	e005      	b.n	800059a <checkNextState+0x8a>
			} else {
				gpio_setMultipleLights(horizontalGreen);
 800058e:	4813      	ldr	r0, [pc, #76]	; (80005dc <checkNextState+0xcc>)
 8000590:	f000 fc26 	bl	8000de0 <gpio_setMultipleLights>
				greenVertical = false;
 8000594:	4b10      	ldr	r3, [pc, #64]	; (80005d8 <checkNextState+0xc8>)
 8000596:	2200      	movs	r2, #0
 8000598:	701a      	strb	r2, [r3, #0]
			}
		}
		stayGreen = carsVertical != carsHorizontal ? true : false;
 800059a:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <checkNextState+0xbc>)
 800059c:	781a      	ldrb	r2, [r3, #0]
 800059e:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <checkNextState+0xc0>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	429a      	cmp	r2, r3
 80005a4:	bf14      	ite	ne
 80005a6:	2301      	movne	r3, #1
 80005a8:	2300      	moveq	r3, #0
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <checkNextState+0xb8>)
 80005ae:	701a      	strb	r2, [r3, #0]
	}
	NextState = Start;
 80005b0:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <checkNextState+0xd0>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	701a      	strb	r2, [r3, #0]
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	2000009d 	.word	0x2000009d
 80005c0:	2000009e 	.word	0x2000009e
 80005c4:	20000000 	.word	0x20000000
 80005c8:	2000009f 	.word	0x2000009f
 80005cc:	2000009a 	.word	0x2000009a
 80005d0:	2000009b 	.word	0x2000009b
 80005d4:	08007bf0 	.word	0x08007bf0
 80005d8:	2000009c 	.word	0x2000009c
 80005dc:	08007bf4 	.word	0x08007bf4
 80005e0:	20000099 	.word	0x20000099

080005e4 <yellowLeds>:

/**
  * @brief sets the cars LEDs to yellow and pedestrians LEDs to red
  */
void yellowLeds(void){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	gpio_clearAllNotBlue();
 80005e8:	f000 fc20 	bl	8000e2c <gpio_clearAllNotBlue>
	gpio_setMultipleLights(yellowState);
 80005ec:	4802      	ldr	r0, [pc, #8]	; (80005f8 <yellowLeds+0x14>)
 80005ee:	f000 fbf7 	bl	8000de0 <gpio_setMultipleLights>
}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	08007bf8 	.word	0x08007bf8

080005fc <blueStateToggle>:

/**
  * @brief toggles the blue LEDs after a pedestrian has pushed a button
  * 	   if another pedestrian pushes the other button then all blue LEDs will toggle
  */
void blueStateToggle(void){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	if (NBtnPressed)
 8000600:	4b07      	ldr	r3, [pc, #28]	; (8000620 <blueStateToggle+0x24>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d002      	beq.n	800060e <blueStateToggle+0x12>
		gpio_togglePin(N_Blue);
 8000608:	200d      	movs	r0, #13
 800060a:	f000 fc29 	bl	8000e60 <gpio_togglePin>
	if (SBtnPressed)
 800060e:	4b05      	ldr	r3, [pc, #20]	; (8000624 <blueStateToggle+0x28>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d002      	beq.n	800061c <blueStateToggle+0x20>
		gpio_togglePin(S_Blue);
 8000616:	2015      	movs	r0, #21
 8000618:	f000 fc22 	bl	8000e60 <gpio_togglePin>
}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	2000009d 	.word	0x2000009d
 8000624:	2000009e 	.word	0x2000009e

08000628 <nextBlueLedsAction>:

void nextBlueLedsAction(void){
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
	if (greenVertical){
 800062c:	4b18      	ldr	r3, [pc, #96]	; (8000690 <nextBlueLedsAction+0x68>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d006      	beq.n	8000642 <nextBlueLedsAction+0x1a>
		NBtnPressed = false;
 8000634:	4b17      	ldr	r3, [pc, #92]	; (8000694 <nextBlueLedsAction+0x6c>)
 8000636:	2200      	movs	r2, #0
 8000638:	701a      	strb	r2, [r3, #0]
		clearPin(N_Blue);
 800063a:	200d      	movs	r0, #13
 800063c:	f000 fc50 	bl	8000ee0 <clearPin>
 8000640:	e005      	b.n	800064e <nextBlueLedsAction+0x26>
	}
	else {
		SBtnPressed = false;
 8000642:	4b15      	ldr	r3, [pc, #84]	; (8000698 <nextBlueLedsAction+0x70>)
 8000644:	2200      	movs	r2, #0
 8000646:	701a      	strb	r2, [r3, #0]
		clearPin(S_Blue);
 8000648:	2015      	movs	r0, #21
 800064a:	f000 fc49 	bl	8000ee0 <clearPin>
	}
	if (!NBtnPressed && !SBtnPressed && waitTime != pedestrianDelay) {
 800064e:	4b11      	ldr	r3, [pc, #68]	; (8000694 <nextBlueLedsAction+0x6c>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	f083 0301 	eor.w	r3, r3, #1
 8000656:	b2db      	uxtb	r3, r3
 8000658:	2b00      	cmp	r3, #0
 800065a:	d017      	beq.n	800068c <nextBlueLedsAction+0x64>
 800065c:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <nextBlueLedsAction+0x70>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	f083 0301 	eor.w	r3, r3, #1
 8000664:	b2db      	uxtb	r3, r3
 8000666:	2b00      	cmp	r3, #0
 8000668:	d010      	beq.n	800068c <nextBlueLedsAction+0x64>
 800066a:	4b0c      	ldr	r3, [pc, #48]	; (800069c <nextBlueLedsAction+0x74>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000672:	d00b      	beq.n	800068c <nextBlueLedsAction+0x64>
		xSemaphoreTake(NbinarySem,(TickType_t)0);
 8000674:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <nextBlueLedsAction+0x78>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f004 ff08 	bl	8005490 <xQueueSemaphoreTake>
		if (specificPin != 0x80) afterBlueState();
 8000680:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <nextBlueLedsAction+0x7c>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b80      	cmp	r3, #128	; 0x80
 8000686:	d001      	beq.n	800068c <nextBlueLedsAction+0x64>
 8000688:	f000 f80e 	bl	80006a8 <afterBlueState>
	}
}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	2000009c 	.word	0x2000009c
 8000694:	2000009d 	.word	0x2000009d
 8000698:	2000009e 	.word	0x2000009e
 800069c:	20000000 	.word	0x20000000
 80006a0:	200000a0 	.word	0x200000a0
 80006a4:	20000004 	.word	0x20000004

080006a8 <afterBlueState>:

/**
  * @brief decides what to do after the blue LEDs stops blinking
  * 		  if there are cars in only one direction - that direction will become and/or stay green
  */
void afterBlueState(void){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	if (specificPin == N_Blue && !carsVertical && carsHorizontal){
 80006ac:	4b20      	ldr	r3, [pc, #128]	; (8000730 <afterBlueState+0x88>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b0d      	cmp	r3, #13
 80006b2:	d114      	bne.n	80006de <afterBlueState+0x36>
 80006b4:	4b1f      	ldr	r3, [pc, #124]	; (8000734 <afterBlueState+0x8c>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	f083 0301 	eor.w	r3, r3, #1
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d00d      	beq.n	80006de <afterBlueState+0x36>
 80006c2:	4b1d      	ldr	r3, [pc, #116]	; (8000738 <afterBlueState+0x90>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d009      	beq.n	80006de <afterBlueState+0x36>
		nextDirection();
 80006ca:	f7ff ff03 	bl	80004d4 <nextDirection>
		waitTime = redDelayMax;
 80006ce:	4b1b      	ldr	r3, [pc, #108]	; (800073c <afterBlueState+0x94>)
 80006d0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80006d4:	601a      	str	r2, [r3, #0]
		stayGreen = true;
 80006d6:	4b1a      	ldr	r3, [pc, #104]	; (8000740 <afterBlueState+0x98>)
 80006d8:	2201      	movs	r2, #1
 80006da:	701a      	strb	r2, [r3, #0]
 80006dc:	e01f      	b.n	800071e <afterBlueState+0x76>
	}
	else if (specificPin == S_Blue && carsVertical && !carsHorizontal){
 80006de:	4b14      	ldr	r3, [pc, #80]	; (8000730 <afterBlueState+0x88>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b15      	cmp	r3, #21
 80006e4:	d114      	bne.n	8000710 <afterBlueState+0x68>
 80006e6:	4b13      	ldr	r3, [pc, #76]	; (8000734 <afterBlueState+0x8c>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d010      	beq.n	8000710 <afterBlueState+0x68>
 80006ee:	4b12      	ldr	r3, [pc, #72]	; (8000738 <afterBlueState+0x90>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	f083 0301 	eor.w	r3, r3, #1
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d009      	beq.n	8000710 <afterBlueState+0x68>
		nextDirection();
 80006fc:	f7ff feea 	bl	80004d4 <nextDirection>
		waitTime = redDelayMax;
 8000700:	4b0e      	ldr	r3, [pc, #56]	; (800073c <afterBlueState+0x94>)
 8000702:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000706:	601a      	str	r2, [r3, #0]
		stayGreen = true;
 8000708:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <afterBlueState+0x98>)
 800070a:	2201      	movs	r2, #1
 800070c:	701a      	strb	r2, [r3, #0]
 800070e:	e006      	b.n	800071e <afterBlueState+0x76>
	}
	else {
		waitTime = walkingDelay;
 8000710:	4b0a      	ldr	r3, [pc, #40]	; (800073c <afterBlueState+0x94>)
 8000712:	f44f 7261 	mov.w	r2, #900	; 0x384
 8000716:	601a      	str	r2, [r3, #0]
		stayGreen = false;
 8000718:	4b09      	ldr	r3, [pc, #36]	; (8000740 <afterBlueState+0x98>)
 800071a:	2200      	movs	r2, #0
 800071c:	701a      	strb	r2, [r3, #0]
	}
	NextState = Start;
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <afterBlueState+0x9c>)
 8000720:	2200      	movs	r2, #0
 8000722:	701a      	strb	r2, [r3, #0]
	specificPin = 0x80;
 8000724:	4b02      	ldr	r3, [pc, #8]	; (8000730 <afterBlueState+0x88>)
 8000726:	2280      	movs	r2, #128	; 0x80
 8000728:	701a      	strb	r2, [r3, #0]

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000004 	.word	0x20000004
 8000734:	2000009a 	.word	0x2000009a
 8000738:	2000009b 	.word	0x2000009b
 800073c:	20000000 	.word	0x20000000
 8000740:	2000009f 	.word	0x2000009f
 8000744:	20000099 	.word	0x20000099

08000748 <HAL_GPIO_EXTI_Callback>:
/**
  * @brief ISR for buttons (pedestrians) and toggles (cars). It evaluates the system and makes the
  *        appropriate changes and decides the next state in the state machine.
  * @param GPIO_Pin: the pin that initiated the interrupt
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == N_Btn_Pin && !NBtnPressed){
 8000752:	88fb      	ldrh	r3, [r7, #6]
 8000754:	2b80      	cmp	r3, #128	; 0x80
 8000756:	d14e      	bne.n	80007f6 <HAL_GPIO_EXTI_Callback+0xae>
 8000758:	4b93      	ldr	r3, [pc, #588]	; (80009a8 <HAL_GPIO_EXTI_Callback+0x260>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	f083 0301 	eor.w	r3, r3, #1
 8000760:	b2db      	uxtb	r3, r3
 8000762:	2b00      	cmp	r3, #0
 8000764:	d047      	beq.n	80007f6 <HAL_GPIO_EXTI_Callback+0xae>
		if (!greenVertical && stayGreen && !SBtnPressed){	// green indefinitely in current state
 8000766:	4b91      	ldr	r3, [pc, #580]	; (80009ac <HAL_GPIO_EXTI_Callback+0x264>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	f083 0301 	eor.w	r3, r3, #1
 800076e:	b2db      	uxtb	r3, r3
 8000770:	2b00      	cmp	r3, #0
 8000772:	d011      	beq.n	8000798 <HAL_GPIO_EXTI_Callback+0x50>
 8000774:	4b8e      	ldr	r3, [pc, #568]	; (80009b0 <HAL_GPIO_EXTI_Callback+0x268>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d00d      	beq.n	8000798 <HAL_GPIO_EXTI_Callback+0x50>
 800077c:	4b8d      	ldr	r3, [pc, #564]	; (80009b4 <HAL_GPIO_EXTI_Callback+0x26c>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	f083 0301 	eor.w	r3, r3, #1
 8000784:	b2db      	uxtb	r3, r3
 8000786:	2b00      	cmp	r3, #0
 8000788:	d006      	beq.n	8000798 <HAL_GPIO_EXTI_Callback+0x50>
			SBtnPressed = false;
 800078a:	4b8a      	ldr	r3, [pc, #552]	; (80009b4 <HAL_GPIO_EXTI_Callback+0x26c>)
 800078c:	2200      	movs	r2, #0
 800078e:	701a      	strb	r2, [r3, #0]
			specificPin = 0x80;
 8000790:	4b89      	ldr	r3, [pc, #548]	; (80009b8 <HAL_GPIO_EXTI_Callback+0x270>)
 8000792:	2280      	movs	r2, #128	; 0x80
 8000794:	701a      	strb	r2, [r3, #0]
 8000796:	e02d      	b.n	80007f4 <HAL_GPIO_EXTI_Callback+0xac>
		} else {
			specificPin = N_Blue;
 8000798:	4b87      	ldr	r3, [pc, #540]	; (80009b8 <HAL_GPIO_EXTI_Callback+0x270>)
 800079a:	220d      	movs	r2, #13
 800079c:	701a      	strb	r2, [r3, #0]
			NBtnPressed = true;
 800079e:	4b82      	ldr	r3, [pc, #520]	; (80009a8 <HAL_GPIO_EXTI_Callback+0x260>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	701a      	strb	r2, [r3, #0]
			xSemaphoreGiveFromISR(NbinarySem, NULL);	// BlueLeds task will take
 80007a4:	4b85      	ldr	r3, [pc, #532]	; (80009bc <HAL_GPIO_EXTI_Callback+0x274>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f004 fd03 	bl	80051b6 <xQueueGiveFromISR>
			if (greenVertical && SBtnPressed == false){
 80007b0:	4b7e      	ldr	r3, [pc, #504]	; (80009ac <HAL_GPIO_EXTI_Callback+0x264>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d012      	beq.n	80007de <HAL_GPIO_EXTI_Callback+0x96>
 80007b8:	4b7e      	ldr	r3, [pc, #504]	; (80009b4 <HAL_GPIO_EXTI_Callback+0x26c>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	f083 0301 	eor.w	r3, r3, #1
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d00b      	beq.n	80007de <HAL_GPIO_EXTI_Callback+0x96>
				if (stayGreen){
 80007c6:	4b7a      	ldr	r3, [pc, #488]	; (80009b0 <HAL_GPIO_EXTI_Callback+0x268>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d012      	beq.n	80007f4 <HAL_GPIO_EXTI_Callback+0xac>
					NextState = DefaultState;
 80007ce:	4b7c      	ldr	r3, [pc, #496]	; (80009c0 <HAL_GPIO_EXTI_Callback+0x278>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	701a      	strb	r2, [r3, #0]
					waitTime = pedestrianDelay;
 80007d4:	4b7b      	ldr	r3, [pc, #492]	; (80009c4 <HAL_GPIO_EXTI_Callback+0x27c>)
 80007d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007da:	601a      	str	r2, [r3, #0]
				if (stayGreen){
 80007dc:	e00a      	b.n	80007f4 <HAL_GPIO_EXTI_Callback+0xac>
				}
			} else if (pinState(S_Blue)) {
 80007de:	2015      	movs	r0, #21
 80007e0:	f000 fb58 	bl	8000e94 <pinState>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	f000 80d6 	beq.w	8000998 <HAL_GPIO_EXTI_Callback+0x250>
				setPin(N_Blue);							// sync blinking with other leds
 80007ec:	200d      	movs	r0, #13
 80007ee:	f000 fb99 	bl	8000f24 <setPin>
		if (!greenVertical && stayGreen && !SBtnPressed){	// green indefinitely in current state
 80007f2:	e0d1      	b.n	8000998 <HAL_GPIO_EXTI_Callback+0x250>
 80007f4:	e0d0      	b.n	8000998 <HAL_GPIO_EXTI_Callback+0x250>
			}
		}
	}
	else if (GPIO_Pin == S_Btn_Pin && !SBtnPressed){
 80007f6:	88fb      	ldrh	r3, [r7, #6]
 80007f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80007fc:	d14e      	bne.n	800089c <HAL_GPIO_EXTI_Callback+0x154>
 80007fe:	4b6d      	ldr	r3, [pc, #436]	; (80009b4 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	f083 0301 	eor.w	r3, r3, #1
 8000806:	b2db      	uxtb	r3, r3
 8000808:	2b00      	cmp	r3, #0
 800080a:	d047      	beq.n	800089c <HAL_GPIO_EXTI_Callback+0x154>
		if (greenVertical && stayGreen && !NBtnPressed){
 800080c:	4b67      	ldr	r3, [pc, #412]	; (80009ac <HAL_GPIO_EXTI_Callback+0x264>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d011      	beq.n	8000838 <HAL_GPIO_EXTI_Callback+0xf0>
 8000814:	4b66      	ldr	r3, [pc, #408]	; (80009b0 <HAL_GPIO_EXTI_Callback+0x268>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d00d      	beq.n	8000838 <HAL_GPIO_EXTI_Callback+0xf0>
 800081c:	4b62      	ldr	r3, [pc, #392]	; (80009a8 <HAL_GPIO_EXTI_Callback+0x260>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	f083 0301 	eor.w	r3, r3, #1
 8000824:	b2db      	uxtb	r3, r3
 8000826:	2b00      	cmp	r3, #0
 8000828:	d006      	beq.n	8000838 <HAL_GPIO_EXTI_Callback+0xf0>
			SBtnPressed = false;
 800082a:	4b62      	ldr	r3, [pc, #392]	; (80009b4 <HAL_GPIO_EXTI_Callback+0x26c>)
 800082c:	2200      	movs	r2, #0
 800082e:	701a      	strb	r2, [r3, #0]
			specificPin = 0x80;
 8000830:	4b61      	ldr	r3, [pc, #388]	; (80009b8 <HAL_GPIO_EXTI_Callback+0x270>)
 8000832:	2280      	movs	r2, #128	; 0x80
 8000834:	701a      	strb	r2, [r3, #0]
 8000836:	e030      	b.n	800089a <HAL_GPIO_EXTI_Callback+0x152>
		} else {
			specificPin = S_Blue;
 8000838:	4b5f      	ldr	r3, [pc, #380]	; (80009b8 <HAL_GPIO_EXTI_Callback+0x270>)
 800083a:	2215      	movs	r2, #21
 800083c:	701a      	strb	r2, [r3, #0]
			SBtnPressed = true;
 800083e:	4b5d      	ldr	r3, [pc, #372]	; (80009b4 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000840:	2201      	movs	r2, #1
 8000842:	701a      	strb	r2, [r3, #0]
			xSemaphoreGiveFromISR(NbinarySem, NULL);
 8000844:	4b5d      	ldr	r3, [pc, #372]	; (80009bc <HAL_GPIO_EXTI_Callback+0x274>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f004 fcb3 	bl	80051b6 <xQueueGiveFromISR>
			if (!greenVertical && NBtnPressed == false){
 8000850:	4b56      	ldr	r3, [pc, #344]	; (80009ac <HAL_GPIO_EXTI_Callback+0x264>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	f083 0301 	eor.w	r3, r3, #1
 8000858:	b2db      	uxtb	r3, r3
 800085a:	2b00      	cmp	r3, #0
 800085c:	d012      	beq.n	8000884 <HAL_GPIO_EXTI_Callback+0x13c>
 800085e:	4b52      	ldr	r3, [pc, #328]	; (80009a8 <HAL_GPIO_EXTI_Callback+0x260>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	f083 0301 	eor.w	r3, r3, #1
 8000866:	b2db      	uxtb	r3, r3
 8000868:	2b00      	cmp	r3, #0
 800086a:	d00b      	beq.n	8000884 <HAL_GPIO_EXTI_Callback+0x13c>
				if (stayGreen){
 800086c:	4b50      	ldr	r3, [pc, #320]	; (80009b0 <HAL_GPIO_EXTI_Callback+0x268>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d012      	beq.n	800089a <HAL_GPIO_EXTI_Callback+0x152>
					NextState = DefaultState;
 8000874:	4b52      	ldr	r3, [pc, #328]	; (80009c0 <HAL_GPIO_EXTI_Callback+0x278>)
 8000876:	2201      	movs	r2, #1
 8000878:	701a      	strb	r2, [r3, #0]
					waitTime = pedestrianDelay;
 800087a:	4b52      	ldr	r3, [pc, #328]	; (80009c4 <HAL_GPIO_EXTI_Callback+0x27c>)
 800087c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000880:	601a      	str	r2, [r3, #0]
				if (stayGreen){
 8000882:	e00a      	b.n	800089a <HAL_GPIO_EXTI_Callback+0x152>
				}

			} else if (pinState(N_Blue)) {
 8000884:	200d      	movs	r0, #13
 8000886:	f000 fb05 	bl	8000e94 <pinState>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	f000 8085 	beq.w	800099c <HAL_GPIO_EXTI_Callback+0x254>
				setPin(S_Blue);
 8000892:	2015      	movs	r0, #21
 8000894:	f000 fb46 	bl	8000f24 <setPin>
		if (greenVertical && stayGreen && !NBtnPressed){
 8000898:	e080      	b.n	800099c <HAL_GPIO_EXTI_Callback+0x254>
 800089a:	e07f      	b.n	800099c <HAL_GPIO_EXTI_Callback+0x254>
			}
		}
	}
	else {
		carsVertical = HAL_GPIO_ReadPin(N_Car_GPIO_Port, N_Car_Pin)==0 || HAL_GPIO_ReadPin(S_Car_GPIO_Port, S_Car_Pin)==0;
 800089c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a4:	f001 f910 	bl	8001ac8 <HAL_GPIO_ReadPin>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d007      	beq.n	80008be <HAL_GPIO_EXTI_Callback+0x176>
 80008ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008b2:	4845      	ldr	r0, [pc, #276]	; (80009c8 <HAL_GPIO_EXTI_Callback+0x280>)
 80008b4:	f001 f908 	bl	8001ac8 <HAL_GPIO_ReadPin>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d101      	bne.n	80008c2 <HAL_GPIO_EXTI_Callback+0x17a>
 80008be:	2301      	movs	r3, #1
 80008c0:	e000      	b.n	80008c4 <HAL_GPIO_EXTI_Callback+0x17c>
 80008c2:	2300      	movs	r3, #0
 80008c4:	f003 0301 	and.w	r3, r3, #1
 80008c8:	b2da      	uxtb	r2, r3
 80008ca:	4b40      	ldr	r3, [pc, #256]	; (80009cc <HAL_GPIO_EXTI_Callback+0x284>)
 80008cc:	701a      	strb	r2, [r3, #0]
		carsHorizontal = HAL_GPIO_ReadPin(E_Car_GPIO_Port, E_Car_Pin)==0 || HAL_GPIO_ReadPin(W_Car_GPIO_Port, W_Car_Pin)==0;
 80008ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008d2:	483d      	ldr	r0, [pc, #244]	; (80009c8 <HAL_GPIO_EXTI_Callback+0x280>)
 80008d4:	f001 f8f8 	bl	8001ac8 <HAL_GPIO_ReadPin>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d006      	beq.n	80008ec <HAL_GPIO_EXTI_Callback+0x1a4>
 80008de:	2110      	movs	r1, #16
 80008e0:	483b      	ldr	r0, [pc, #236]	; (80009d0 <HAL_GPIO_EXTI_Callback+0x288>)
 80008e2:	f001 f8f1 	bl	8001ac8 <HAL_GPIO_ReadPin>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d101      	bne.n	80008f0 <HAL_GPIO_EXTI_Callback+0x1a8>
 80008ec:	2301      	movs	r3, #1
 80008ee:	e000      	b.n	80008f2 <HAL_GPIO_EXTI_Callback+0x1aa>
 80008f0:	2300      	movs	r3, #0
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	4b36      	ldr	r3, [pc, #216]	; (80009d4 <HAL_GPIO_EXTI_Callback+0x28c>)
 80008fa:	701a      	strb	r2, [r3, #0]
		if (!NBtnPressed && !SBtnPressed && State != YellowState){
 80008fc:	4b2a      	ldr	r3, [pc, #168]	; (80009a8 <HAL_GPIO_EXTI_Callback+0x260>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	f083 0301 	eor.w	r3, r3, #1
 8000904:	b2db      	uxtb	r3, r3
 8000906:	2b00      	cmp	r3, #0
 8000908:	d049      	beq.n	800099e <HAL_GPIO_EXTI_Callback+0x256>
 800090a:	4b2a      	ldr	r3, [pc, #168]	; (80009b4 <HAL_GPIO_EXTI_Callback+0x26c>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	f083 0301 	eor.w	r3, r3, #1
 8000912:	b2db      	uxtb	r3, r3
 8000914:	2b00      	cmp	r3, #0
 8000916:	d042      	beq.n	800099e <HAL_GPIO_EXTI_Callback+0x256>
 8000918:	4b2f      	ldr	r3, [pc, #188]	; (80009d8 <HAL_GPIO_EXTI_Callback+0x290>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2b02      	cmp	r3, #2
 800091e:	d03e      	beq.n	800099e <HAL_GPIO_EXTI_Callback+0x256>
			if (carsVertical){
 8000920:	4b2a      	ldr	r3, [pc, #168]	; (80009cc <HAL_GPIO_EXTI_Callback+0x284>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d018      	beq.n	800095a <HAL_GPIO_EXTI_Callback+0x212>
				if (!carsHorizontal)
 8000928:	4b2a      	ldr	r3, [pc, #168]	; (80009d4 <HAL_GPIO_EXTI_Callback+0x28c>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	f083 0301 	eor.w	r3, r3, #1
 8000930:	b2db      	uxtb	r3, r3
 8000932:	2b00      	cmp	r3, #0
 8000934:	d009      	beq.n	800094a <HAL_GPIO_EXTI_Callback+0x202>
					NextState = greenVertical ? Start : YellowState;
 8000936:	4b1d      	ldr	r3, [pc, #116]	; (80009ac <HAL_GPIO_EXTI_Callback+0x264>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <HAL_GPIO_EXTI_Callback+0x1fa>
 800093e:	2200      	movs	r2, #0
 8000940:	e000      	b.n	8000944 <HAL_GPIO_EXTI_Callback+0x1fc>
 8000942:	2202      	movs	r2, #2
 8000944:	4b1e      	ldr	r3, [pc, #120]	; (80009c0 <HAL_GPIO_EXTI_Callback+0x278>)
 8000946:	701a      	strb	r2, [r3, #0]
 8000948:	e01c      	b.n	8000984 <HAL_GPIO_EXTI_Callback+0x23c>
				else {
					waitTime = redDelayMax;
 800094a:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <HAL_GPIO_EXTI_Callback+0x27c>)
 800094c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000950:	601a      	str	r2, [r3, #0]
					NextState = DefaultState;
 8000952:	4b1b      	ldr	r3, [pc, #108]	; (80009c0 <HAL_GPIO_EXTI_Callback+0x278>)
 8000954:	2201      	movs	r2, #1
 8000956:	701a      	strb	r2, [r3, #0]
 8000958:	e014      	b.n	8000984 <HAL_GPIO_EXTI_Callback+0x23c>
				}
			}
			else if (carsHorizontal)
 800095a:	4b1e      	ldr	r3, [pc, #120]	; (80009d4 <HAL_GPIO_EXTI_Callback+0x28c>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d009      	beq.n	8000976 <HAL_GPIO_EXTI_Callback+0x22e>
				NextState = greenVertical ? YellowState : Start;
 8000962:	4b12      	ldr	r3, [pc, #72]	; (80009ac <HAL_GPIO_EXTI_Callback+0x264>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <HAL_GPIO_EXTI_Callback+0x226>
 800096a:	2202      	movs	r2, #2
 800096c:	e000      	b.n	8000970 <HAL_GPIO_EXTI_Callback+0x228>
 800096e:	2200      	movs	r2, #0
 8000970:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <HAL_GPIO_EXTI_Callback+0x278>)
 8000972:	701a      	strb	r2, [r3, #0]
 8000974:	e006      	b.n	8000984 <HAL_GPIO_EXTI_Callback+0x23c>
			else {
				waitTime = greenDelay;
 8000976:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <HAL_GPIO_EXTI_Callback+0x27c>)
 8000978:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800097c:	601a      	str	r2, [r3, #0]
				NextState = DefaultState;
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <HAL_GPIO_EXTI_Callback+0x278>)
 8000980:	2201      	movs	r2, #1
 8000982:	701a      	strb	r2, [r3, #0]
			}
			stayGreen = NextState == DefaultState ? false : true;
 8000984:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <HAL_GPIO_EXTI_Callback+0x278>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	2b01      	cmp	r3, #1
 800098a:	bf14      	ite	ne
 800098c:	2301      	movne	r3, #1
 800098e:	2300      	moveq	r3, #0
 8000990:	b2da      	uxtb	r2, r3
 8000992:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <HAL_GPIO_EXTI_Callback+0x268>)
 8000994:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000996:	e002      	b.n	800099e <HAL_GPIO_EXTI_Callback+0x256>
		if (!greenVertical && stayGreen && !SBtnPressed){	// green indefinitely in current state
 8000998:	bf00      	nop
 800099a:	e000      	b.n	800099e <HAL_GPIO_EXTI_Callback+0x256>
		if (greenVertical && stayGreen && !NBtnPressed){
 800099c:	bf00      	nop
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	2000009d 	.word	0x2000009d
 80009ac:	2000009c 	.word	0x2000009c
 80009b0:	2000009f 	.word	0x2000009f
 80009b4:	2000009e 	.word	0x2000009e
 80009b8:	20000004 	.word	0x20000004
 80009bc:	200000a0 	.word	0x200000a0
 80009c0:	20000099 	.word	0x20000099
 80009c4:	20000000 	.word	0x20000000
 80009c8:	48000400 	.word	0x48000400
 80009cc:	2000009a 	.word	0x2000009a
 80009d0:	48000800 	.word	0x48000800
 80009d4:	2000009b 	.word	0x2000009b
 80009d8:	20000098 	.word	0x20000098

080009dc <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/**
  * @brief  FreeRTOS initialization
  */
void MX_FREERTOS_Init(void) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* Create the thread(s) */
  /* creation of MainTask */
  MainTaskHandle = osThreadNew(StateMachine, NULL, &MainTask_attributes);
 80009e0:	4a0c      	ldr	r2, [pc, #48]	; (8000a14 <MX_FREERTOS_Init+0x38>)
 80009e2:	2100      	movs	r1, #0
 80009e4:	480c      	ldr	r0, [pc, #48]	; (8000a18 <MX_FREERTOS_Init+0x3c>)
 80009e6:	f003 ff95 	bl	8004914 <osThreadNew>
 80009ea:	4603      	mov	r3, r0
 80009ec:	4a0b      	ldr	r2, [pc, #44]	; (8000a1c <MX_FREERTOS_Init+0x40>)
 80009ee:	6013      	str	r3, [r2, #0]
  /* creation of TransmitTask */
  TransmitTaskHandle = osThreadNew(TransmitData, NULL, &TransmitTask_attributes);
 80009f0:	4a0b      	ldr	r2, [pc, #44]	; (8000a20 <MX_FREERTOS_Init+0x44>)
 80009f2:	2100      	movs	r1, #0
 80009f4:	480b      	ldr	r0, [pc, #44]	; (8000a24 <MX_FREERTOS_Init+0x48>)
 80009f6:	f003 ff8d 	bl	8004914 <osThreadNew>
 80009fa:	4603      	mov	r3, r0
 80009fc:	4a0a      	ldr	r2, [pc, #40]	; (8000a28 <MX_FREERTOS_Init+0x4c>)
 80009fe:	6013      	str	r3, [r2, #0]
  /* creation of BlueLeds */
  BlueLedsHandle = osThreadNew(StartBlueLeds, NULL, &BlueLeds_attributes);
 8000a00:	4a0a      	ldr	r2, [pc, #40]	; (8000a2c <MX_FREERTOS_Init+0x50>)
 8000a02:	2100      	movs	r1, #0
 8000a04:	480a      	ldr	r0, [pc, #40]	; (8000a30 <MX_FREERTOS_Init+0x54>)
 8000a06:	f003 ff85 	bl	8004914 <osThreadNew>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	4a09      	ldr	r2, [pc, #36]	; (8000a34 <MX_FREERTOS_Init+0x58>)
 8000a0e:	6013      	str	r3, [r2, #0]
}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	08007bfc 	.word	0x08007bfc
 8000a18:	08000a39 	.word	0x08000a39
 8000a1c:	200000a8 	.word	0x200000a8
 8000a20:	08007c20 	.word	0x08007c20
 8000a24:	08000b4d 	.word	0x08000b4d
 8000a28:	200000ac 	.word	0x200000ac
 8000a2c:	08007c44 	.word	0x08007c44
 8000a30:	08000bc1 	.word	0x08000bc1
 8000a34:	200000b0 	.word	0x200000b0

08000a38 <StateMachine>:
* @brief Function implementing the MainTask thread.
* 		 State machine for the Traffic Lights Project.
*/
/* USER CODE END Header_MainTask */
void StateMachine(void *argument)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CV_leds */
	NextState = Start;
 8000a40:	4b3b      	ldr	r3, [pc, #236]	; (8000b30 <StateMachine+0xf8>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	701a      	strb	r2, [r3, #0]
	uint32_t localCounter = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]

	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(10);
 8000a4a:	230a      	movs	r3, #10
 8000a4c:	613b      	str	r3, [r7, #16]
	xLastWakeTime = xTaskGetTickCount();
 8000a4e:	f005 fb03 	bl	8006058 <xTaskGetTickCount>
 8000a52:	4603      	mov	r3, r0
 8000a54:	60fb      	str	r3, [r7, #12]

	for(;;){
		State = NextState;
 8000a56:	4b36      	ldr	r3, [pc, #216]	; (8000b30 <StateMachine+0xf8>)
 8000a58:	781a      	ldrb	r2, [r3, #0]
 8000a5a:	4b36      	ldr	r3, [pc, #216]	; (8000b34 <StateMachine+0xfc>)
 8000a5c:	701a      	strb	r2, [r3, #0]
		localCounter++;
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	3301      	adds	r3, #1
 8000a62:	617b      	str	r3, [r7, #20]
		debugCounter = 1;
 8000a64:	4b34      	ldr	r3, [pc, #208]	; (8000b38 <StateMachine+0x100>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	601a      	str	r2, [r3, #0]
		switch (State){
 8000a6a:	4b32      	ldr	r3, [pc, #200]	; (8000b34 <StateMachine+0xfc>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b02      	cmp	r3, #2
 8000a70:	d026      	beq.n	8000ac0 <StateMachine+0x88>
 8000a72:	2b02      	cmp	r3, #2
 8000a74:	dc51      	bgt.n	8000b1a <StateMachine+0xe2>
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d002      	beq.n	8000a80 <StateMachine+0x48>
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d016      	beq.n	8000aac <StateMachine+0x74>
 8000a7e:	e04c      	b.n	8000b1a <StateMachine+0xe2>
		case Start:
			if (!stayGreen){
 8000a80:	4b2e      	ldr	r3, [pc, #184]	; (8000b3c <StateMachine+0x104>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	f083 0301 	eor.w	r3, r3, #1
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d005      	beq.n	8000a9a <StateMachine+0x62>
				nextDirection();
 8000a8e:	f7ff fd21 	bl	80004d4 <nextDirection>
				NextState = DefaultState;
 8000a92:	4b27      	ldr	r3, [pc, #156]	; (8000b30 <StateMachine+0xf8>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	701a      	strb	r2, [r3, #0]
			}
			else if (localCounter >= waitTime-yellowDelay)		// reset timer after maximum wait time
				localCounter = 0;
			break;
 8000a98:	e03a      	b.n	8000b10 <StateMachine+0xd8>
			else if (localCounter >= waitTime-yellowDelay)		// reset timer after maximum wait time
 8000a9a:	4b29      	ldr	r3, [pc, #164]	; (8000b40 <StateMachine+0x108>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	3bfa      	subs	r3, #250	; 0xfa
 8000aa0:	697a      	ldr	r2, [r7, #20]
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	d334      	bcc.n	8000b10 <StateMachine+0xd8>
				localCounter = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
			break;
 8000aaa:	e031      	b.n	8000b10 <StateMachine+0xd8>

		case DefaultState:
			if (localCounter >= waitTime-yellowDelay)
 8000aac:	4b24      	ldr	r3, [pc, #144]	; (8000b40 <StateMachine+0x108>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	3bfa      	subs	r3, #250	; 0xfa
 8000ab2:	697a      	ldr	r2, [r7, #20]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d32d      	bcc.n	8000b14 <StateMachine+0xdc>
				NextState = YellowState;
 8000ab8:	4b1d      	ldr	r3, [pc, #116]	; (8000b30 <StateMachine+0xf8>)
 8000aba:	2202      	movs	r2, #2
 8000abc:	701a      	strb	r2, [r3, #0]
			break;
 8000abe:	e029      	b.n	8000b14 <StateMachine+0xdc>

		case YellowState:
			if (!pinState(S_Ped) || !pinState(N_Ped)){
 8000ac0:	2013      	movs	r0, #19
 8000ac2:	f000 f9e7 	bl	8000e94 <pinState>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	f083 0301 	eor.w	r3, r3, #1
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d108      	bne.n	8000ae4 <StateMachine+0xac>
 8000ad2:	200b      	movs	r0, #11
 8000ad4:	f000 f9de 	bl	8000e94 <pinState>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	f083 0301 	eor.w	r3, r3, #1
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d003      	beq.n	8000aec <StateMachine+0xb4>
				yellowLeds();
 8000ae4:	f7ff fd7e 	bl	80005e4 <yellowLeds>
				localCounter = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
			}
			if (localCounter >= yellowDelay){
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	2bf9      	cmp	r3, #249	; 0xf9
 8000af0:	d912      	bls.n	8000b18 <StateMachine+0xe0>
				localCounter = 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]
				checkNextState();
 8000af6:	f7ff fd0b 	bl	8000510 <checkNextState>
				if (NBtnPressed || SBtnPressed)
 8000afa:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <StateMachine+0x10c>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d103      	bne.n	8000b0a <StateMachine+0xd2>
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <StateMachine+0x110>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d006      	beq.n	8000b18 <StateMachine+0xe0>
					nextBlueLedsAction();
 8000b0a:	f7ff fd8d 	bl	8000628 <nextBlueLedsAction>
			}
			break;
 8000b0e:	e003      	b.n	8000b18 <StateMachine+0xe0>
			break;
 8000b10:	bf00      	nop
 8000b12:	e002      	b.n	8000b1a <StateMachine+0xe2>
			break;
 8000b14:	bf00      	nop
 8000b16:	e000      	b.n	8000b1a <StateMachine+0xe2>
			break;
 8000b18:	bf00      	nop
		}
		debugCounter=0;
 8000b1a:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <StateMachine+0x100>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
		vTaskDelayUntil( &xLastWakeTime, xPeriod );
 8000b20:	f107 030c 	add.w	r3, r7, #12
 8000b24:	6939      	ldr	r1, [r7, #16]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f005 f8fc 	bl	8005d24 <vTaskDelayUntil>
		State = NextState;
 8000b2c:	e793      	b.n	8000a56 <StateMachine+0x1e>
 8000b2e:	bf00      	nop
 8000b30:	20000099 	.word	0x20000099
 8000b34:	20000098 	.word	0x20000098
 8000b38:	200000a4 	.word	0x200000a4
 8000b3c:	2000009f 	.word	0x2000009f
 8000b40:	20000000 	.word	0x20000000
 8000b44:	2000009d 	.word	0x2000009d
 8000b48:	2000009e 	.word	0x2000009e

08000b4c <TransmitData>:
* @brief Function implementing the TransmitTask thread.
* 		 Transmits the data stored in LedRegs every 100ms if the data is updated
*/
/* USER CODE END Header_TransmitData */
void TransmitData(void *argument)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TransmitData */
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(100);
 8000b54:	2364      	movs	r3, #100	; 0x64
 8000b56:	613b      	str	r3, [r7, #16]
	xLastWakeTime = xTaskGetTickCount();
 8000b58:	f005 fa7e 	bl	8006058 <xTaskGetTickCount>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	60fb      	str	r3, [r7, #12]

	uint8_t previousLEDPattern[3];

	for(;;)
	{
		for (uint8_t i=0; i<3; i++){
 8000b60:	2300      	movs	r3, #0
 8000b62:	75fb      	strb	r3, [r7, #23]
 8000b64:	e01f      	b.n	8000ba6 <TransmitData+0x5a>
			if (LedRegister.ledReg[i] != previousLEDPattern[i]){
 8000b66:	7dfb      	ldrb	r3, [r7, #23]
 8000b68:	4a14      	ldr	r2, [pc, #80]	; (8000bbc <TransmitData+0x70>)
 8000b6a:	5cd2      	ldrb	r2, [r2, r3]
 8000b6c:	7dfb      	ldrb	r3, [r7, #23]
 8000b6e:	3318      	adds	r3, #24
 8000b70:	443b      	add	r3, r7
 8000b72:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000b76:	429a      	cmp	r2, r3
 8000b78:	d012      	beq.n	8000ba0 <TransmitData+0x54>
				LED_pattern_transmit();
 8000b7a:	f000 f9f3 	bl	8000f64 <LED_pattern_transmit>
				for (uint8_t i=0; i<3; i++){
 8000b7e:	2300      	movs	r3, #0
 8000b80:	75bb      	strb	r3, [r7, #22]
 8000b82:	e00a      	b.n	8000b9a <TransmitData+0x4e>
					previousLEDPattern[i] = LedRegister.ledReg[i];
 8000b84:	7dba      	ldrb	r2, [r7, #22]
 8000b86:	7dbb      	ldrb	r3, [r7, #22]
 8000b88:	490c      	ldr	r1, [pc, #48]	; (8000bbc <TransmitData+0x70>)
 8000b8a:	5c8a      	ldrb	r2, [r1, r2]
 8000b8c:	3318      	adds	r3, #24
 8000b8e:	443b      	add	r3, r7
 8000b90:	f803 2c10 	strb.w	r2, [r3, #-16]
				for (uint8_t i=0; i<3; i++){
 8000b94:	7dbb      	ldrb	r3, [r7, #22]
 8000b96:	3301      	adds	r3, #1
 8000b98:	75bb      	strb	r3, [r7, #22]
 8000b9a:	7dbb      	ldrb	r3, [r7, #22]
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	d9f1      	bls.n	8000b84 <TransmitData+0x38>
		for (uint8_t i=0; i<3; i++){
 8000ba0:	7dfb      	ldrb	r3, [r7, #23]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	75fb      	strb	r3, [r7, #23]
 8000ba6:	7dfb      	ldrb	r3, [r7, #23]
 8000ba8:	2b02      	cmp	r3, #2
 8000baa:	d9dc      	bls.n	8000b66 <TransmitData+0x1a>
				}
			}
		}
		vTaskDelayUntil( &xLastWakeTime, xPeriod );
 8000bac:	f107 030c 	add.w	r3, r7, #12
 8000bb0:	6939      	ldr	r1, [r7, #16]
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f005 f8b6 	bl	8005d24 <vTaskDelayUntil>
		for (uint8_t i=0; i<3; i++){
 8000bb8:	e7d2      	b.n	8000b60 <TransmitData+0x14>
 8000bba:	bf00      	nop
 8000bbc:	200000b4 	.word	0x200000b4

08000bc0 <StartBlueLeds>:
* @brief Function implementing the BlueLeds thread.
* 		 Starts blinking when the semaphore is given from the ISR
*/
/* USER CODE END Header_BlueLeds */
void StartBlueLeds(void *argument)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BlueLeds */
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(toggleFreq);
 8000bc8:	23fa      	movs	r3, #250	; 0xfa
 8000bca:	60fb      	str	r3, [r7, #12]
	xLastWakeTime = xTaskGetTickCount();
 8000bcc:	f005 fa44 	bl	8006058 <xTaskGetTickCount>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	60bb      	str	r3, [r7, #8]

	NbinarySem = xSemaphoreCreateBinary();
 8000bd4:	2203      	movs	r2, #3
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	2001      	movs	r0, #1
 8000bda:	f004 f8f5 	bl	8004dc8 <xQueueGenericCreate>
 8000bde:	4603      	mov	r3, r0
 8000be0:	4a0d      	ldr	r2, [pc, #52]	; (8000c18 <StartBlueLeds+0x58>)
 8000be2:	6013      	str	r3, [r2, #0]

	for(;;)
	{
		if (xSemaphoreTake(NbinarySem, (TickType_t)0)==pdTRUE){
 8000be4:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <StartBlueLeds+0x58>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f004 fc50 	bl	8005490 <xQueueSemaphoreTake>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d108      	bne.n	8000c08 <StartBlueLeds+0x48>
			blueStateToggle();
 8000bf6:	f7ff fd01 	bl	80005fc <blueStateToggle>
			xSemaphoreGive(NbinarySem);
 8000bfa:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <StartBlueLeds+0x58>)
 8000bfc:	6818      	ldr	r0, [r3, #0]
 8000bfe:	2300      	movs	r3, #0
 8000c00:	2200      	movs	r2, #0
 8000c02:	2100      	movs	r1, #0
 8000c04:	f004 f93e 	bl	8004e84 <xQueueGenericSend>
		}
		vTaskDelayUntil( &xLastWakeTime, xPeriod );
 8000c08:	f107 0308 	add.w	r3, r7, #8
 8000c0c:	68f9      	ldr	r1, [r7, #12]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f005 f888 	bl	8005d24 <vTaskDelayUntil>
		if (xSemaphoreTake(NbinarySem, (TickType_t)0)==pdTRUE){
 8000c14:	e7e6      	b.n	8000be4 <StartBlueLeds+0x24>
 8000c16:	bf00      	nop
 8000c18:	200000a0 	.word	0x200000a0

08000c1c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08a      	sub	sp, #40	; 0x28
 8000c20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]
 8000c30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c32:	4b68      	ldr	r3, [pc, #416]	; (8000dd4 <MX_GPIO_Init+0x1b8>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c36:	4a67      	ldr	r2, [pc, #412]	; (8000dd4 <MX_GPIO_Init+0x1b8>)
 8000c38:	f043 0304 	orr.w	r3, r3, #4
 8000c3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c3e:	4b65      	ldr	r3, [pc, #404]	; (8000dd4 <MX_GPIO_Init+0x1b8>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c42:	f003 0304 	and.w	r3, r3, #4
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c4a:	4b62      	ldr	r3, [pc, #392]	; (8000dd4 <MX_GPIO_Init+0x1b8>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4e:	4a61      	ldr	r2, [pc, #388]	; (8000dd4 <MX_GPIO_Init+0x1b8>)
 8000c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c56:	4b5f      	ldr	r3, [pc, #380]	; (8000dd4 <MX_GPIO_Init+0x1b8>)
 8000c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	4b5c      	ldr	r3, [pc, #368]	; (8000dd4 <MX_GPIO_Init+0x1b8>)
 8000c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c66:	4a5b      	ldr	r2, [pc, #364]	; (8000dd4 <MX_GPIO_Init+0x1b8>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c6e:	4b59      	ldr	r3, [pc, #356]	; (8000dd4 <MX_GPIO_Init+0x1b8>)
 8000c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7a:	4b56      	ldr	r3, [pc, #344]	; (8000dd4 <MX_GPIO_Init+0x1b8>)
 8000c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7e:	4a55      	ldr	r2, [pc, #340]	; (8000dd4 <MX_GPIO_Init+0x1b8>)
 8000c80:	f043 0302 	orr.w	r3, r3, #2
 8000c84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c86:	4b53      	ldr	r3, [pc, #332]	; (8000dd4 <MX_GPIO_Init+0x1b8>)
 8000c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8a:	f003 0302 	and.w	r3, r3, #2
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Reset595_Pin, GPIO_PIN_RESET);
 8000c92:	2200      	movs	r2, #0
 8000c94:	f44f 7108 	mov.w	r1, #544	; 0x220
 8000c98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c9c:	f000 ff2c 	bl	8001af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STCP595_GPIO_Port, STCP595_Pin, GPIO_PIN_RESET);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ca6:	484c      	ldr	r0, [pc, #304]	; (8000dd8 <MX_GPIO_Init+0x1bc>)
 8000ca8:	f000 ff26 	bl	8001af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Enable595_GPIO_Port, Enable595_Pin, GPIO_PIN_RESET);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2180      	movs	r1, #128	; 0x80
 8000cb0:	484a      	ldr	r0, [pc, #296]	; (8000ddc <MX_GPIO_Init+0x1c0>)
 8000cb2:	f000 ff21 	bl	8001af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Reset595_Pin;
 8000cb6:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000cba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	4619      	mov	r1, r3
 8000cce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd2:	f000 fd4f 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = W_Car_Pin;
 8000cd6:	2310      	movs	r3, #16
 8000cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000cda:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000cde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(W_Car_GPIO_Port, &GPIO_InitStruct);
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	4619      	mov	r1, r3
 8000cea:	483c      	ldr	r0, [pc, #240]	; (8000ddc <MX_GPIO_Init+0x1c0>)
 8000cec:	f000 fd42 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STCP595_Pin;
 8000cf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(STCP595_GPIO_Port, &GPIO_InitStruct);
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	4619      	mov	r1, r3
 8000d08:	4833      	ldr	r0, [pc, #204]	; (8000dd8 <MX_GPIO_Init+0x1bc>)
 8000d0a:	f000 fd33 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = S_Car_Pin|E_Car_Pin;
 8000d0e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000d12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000d14:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000d18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1e:	f107 0314 	add.w	r3, r7, #20
 8000d22:	4619      	mov	r1, r3
 8000d24:	482c      	ldr	r0, [pc, #176]	; (8000dd8 <MX_GPIO_Init+0x1bc>)
 8000d26:	f000 fd25 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Enable595_Pin;
 8000d2a:	2380      	movs	r3, #128	; 0x80
 8000d2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	2300      	movs	r3, #0
 8000d38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Enable595_GPIO_Port, &GPIO_InitStruct);
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4826      	ldr	r0, [pc, #152]	; (8000ddc <MX_GPIO_Init+0x1c0>)
 8000d42:	f000 fd17 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = N_Car_Pin;
 8000d46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000d4c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000d50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(N_Car_GPIO_Port, &GPIO_InitStruct);
 8000d56:	f107 0314 	add.w	r3, r7, #20
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d60:	f000 fd08 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = S_Btn_Pin;
 8000d64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d6a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d70:	2301      	movs	r3, #1
 8000d72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(S_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	4619      	mov	r1, r3
 8000d7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d7e:	f000 fcf9 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = N_Btn_Pin;
 8000d82:	2380      	movs	r3, #128	; 0x80
 8000d84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d86:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(N_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	4619      	mov	r1, r3
 8000d96:	4810      	ldr	r0, [pc, #64]	; (8000dd8 <MX_GPIO_Init+0x1bc>)
 8000d98:	f000 fcec 	bl	8001774 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 15, 0);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	210f      	movs	r1, #15
 8000da0:	200a      	movs	r0, #10
 8000da2:	f000 fcbd 	bl	8001720 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000da6:	200a      	movs	r0, #10
 8000da8:	f000 fcd6 	bl	8001758 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 15, 0);
 8000dac:	2200      	movs	r2, #0
 8000dae:	210f      	movs	r1, #15
 8000db0:	2017      	movs	r0, #23
 8000db2:	f000 fcb5 	bl	8001720 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000db6:	2017      	movs	r0, #23
 8000db8:	f000 fcce 	bl	8001758 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	210f      	movs	r1, #15
 8000dc0:	2028      	movs	r0, #40	; 0x28
 8000dc2:	f000 fcad 	bl	8001720 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000dc6:	2028      	movs	r0, #40	; 0x28
 8000dc8:	f000 fcc6 	bl	8001758 <HAL_NVIC_EnableIRQ>

}
 8000dcc:	bf00      	nop
 8000dce:	3728      	adds	r7, #40	; 0x28
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	48000400 	.word	0x48000400
 8000ddc:	48000800 	.word	0x48000800

08000de0 <gpio_setMultipleLights>:

/**
 * @brief sets all LEDs in a specified pattern
 * @param ledPattern: an array that contains the pattern that specifies a green-lights-state or yellow-lights-state
 */
void gpio_setMultipleLights(const uint8_t ledPattern[]){
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
	for (int i=0; i<3; i++){
 8000de8:	2300      	movs	r3, #0
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	e011      	b.n	8000e12 <gpio_setMultipleLights+0x32>
		LedRegister.ledReg[i] |= ledPattern[i];
 8000dee:	4a0e      	ldr	r2, [pc, #56]	; (8000e28 <gpio_setMultipleLights+0x48>)
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	4413      	add	r3, r2
 8000df4:	781a      	ldrb	r2, [r3, #0]
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	6879      	ldr	r1, [r7, #4]
 8000dfa:	440b      	add	r3, r1
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	b2d9      	uxtb	r1, r3
 8000e02:	4a09      	ldr	r2, [pc, #36]	; (8000e28 <gpio_setMultipleLights+0x48>)
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	4413      	add	r3, r2
 8000e08:	460a      	mov	r2, r1
 8000e0a:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<3; i++){
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	ddea      	ble.n	8000dee <gpio_setMultipleLights+0xe>
	}
}
 8000e18:	bf00      	nop
 8000e1a:	bf00      	nop
 8000e1c:	3714      	adds	r7, #20
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	200000b4 	.word	0x200000b4

08000e2c <gpio_clearAllNotBlue>:
}

/**
 * @brief turns off all except the blue LEDs
 */
void gpio_clearAllNotBlue(){
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
	LedRegister.ledReg[0] = 0U;
 8000e30:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <gpio_clearAllNotBlue+0x30>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	701a      	strb	r2, [r3, #0]
	LedRegister.ledReg[1] &= 1U<<S_Blue%8;
 8000e36:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <gpio_clearAllNotBlue+0x30>)
 8000e38:	785b      	ldrb	r3, [r3, #1]
 8000e3a:	f003 0320 	and.w	r3, r3, #32
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <gpio_clearAllNotBlue+0x30>)
 8000e42:	705a      	strb	r2, [r3, #1]
	LedRegister.ledReg[2] &= 1U<<N_Blue%8;
 8000e44:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <gpio_clearAllNotBlue+0x30>)
 8000e46:	789b      	ldrb	r3, [r3, #2]
 8000e48:	f003 0320 	and.w	r3, r3, #32
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <gpio_clearAllNotBlue+0x30>)
 8000e50:	709a      	strb	r2, [r3, #2]
}
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	200000b4 	.word	0x200000b4

08000e60 <gpio_togglePin>:

/**
 * @brief toggles the specified LED
 * @param pinNumber: the pin for the specified LED
 */
void gpio_togglePin(GpioPinPosition pinNumber){
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
	if (pinState(pinNumber))
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f000 f811 	bl	8000e94 <pinState>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d004      	beq.n	8000e82 <gpio_togglePin+0x22>
		clearPin(pinNumber);
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f000 f830 	bl	8000ee0 <clearPin>
	else setPin(pinNumber);

}
 8000e80:	e003      	b.n	8000e8a <gpio_togglePin+0x2a>
	else setPin(pinNumber);
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f000 f84d 	bl	8000f24 <setPin>
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
	...

08000e94 <pinState>:
/**
 * @brief checks if the specified LED is on or off
 * @param pinNumber: the pin for the specified LED
 * @return true if the LED is ON, false otherwise
 */
bool pinState(GpioPinPosition pinNumber){
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]
	return (LedRegister.ledReg[pinNumber/8] & (1U << pinNumber % 8)) >> pinNumber % 8 != 0;
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	08db      	lsrs	r3, r3, #3
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <pinState+0x48>)
 8000ea8:	5c9b      	ldrb	r3, [r3, r2]
 8000eaa:	4619      	mov	r1, r3
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	ea01 0203 	and.w	r2, r1, r3
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	bf14      	ite	ne
 8000eca:	2301      	movne	r3, #1
 8000ecc:	2300      	moveq	r3, #0
 8000ece:	b2db      	uxtb	r3, r3
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	200000b4 	.word	0x200000b4

08000ee0 <clearPin>:

/**
 * @brief turns off the specified LED
 * @param pinNumber: the pin for the specified LED
 */
void clearPin(GpioPinPosition pinNumber){
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	71fb      	strb	r3, [r7, #7]
	LedRegister.ledReg[pinNumber/8] &= ~(1U << pinNumber % 8);
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	08db      	lsrs	r3, r3, #3
 8000eee:	b2d8      	uxtb	r0, r3
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <clearPin+0x40>)
 8000ef4:	5c9a      	ldrb	r2, [r3, r2]
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	f003 0307 	and.w	r3, r3, #7
 8000efc:	2101      	movs	r1, #1
 8000efe:	fa01 f303 	lsl.w	r3, r1, r3
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	4601      	mov	r1, r0
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <clearPin+0x40>)
 8000f10:	545a      	strb	r2, [r3, r1]
}
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	200000b4 	.word	0x200000b4

08000f24 <setPin>:

/**
 * @brief turns on the specified LED
 * @param pinNumber: the pin for the specified LED
 */
void setPin(GpioPinPosition pinNumber){
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
	LedRegister.ledReg[pinNumber/8] |= (1U << pinNumber % 8);
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	08db      	lsrs	r3, r3, #3
 8000f32:	b2d8      	uxtb	r0, r3
 8000f34:	4602      	mov	r2, r0
 8000f36:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <setPin+0x3c>)
 8000f38:	5c9a      	ldrb	r2, [r3, r2]
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	f003 0307 	and.w	r3, r3, #7
 8000f40:	2101      	movs	r1, #1
 8000f42:	fa01 f303 	lsl.w	r3, r1, r3
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	4601      	mov	r1, r0
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <setPin+0x3c>)
 8000f50:	545a      	strb	r2, [r3, r1]
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	200000b4 	.word	0x200000b4

08000f64 <LED_pattern_transmit>:

/**
 * @brief transmits the current state of the LEDs to the shift registers
 */
void LED_pattern_transmit()
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Enable595_GPIO_Port, Enable595_Pin, GPIO_PIN_RESET);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2180      	movs	r1, #128	; 0x80
 8000f6c:	480e      	ldr	r0, [pc, #56]	; (8000fa8 <LED_pattern_transmit+0x44>)
 8000f6e:	f000 fdc3 	bl	8001af8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STCP595_GPIO_Port, STCP595_Pin, GPIO_PIN_RESET);
 8000f72:	2200      	movs	r2, #0
 8000f74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f78:	480c      	ldr	r0, [pc, #48]	; (8000fac <LED_pattern_transmit+0x48>)
 8000f7a:	f000 fdbd 	bl	8001af8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Reset595_GPIO_Port, Reset595_Pin, GPIO_PIN_SET);
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f88:	f000 fdb6 	bl	8001af8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, LedRegister.ledReg, 3, 100);
 8000f8c:	2364      	movs	r3, #100	; 0x64
 8000f8e:	2203      	movs	r2, #3
 8000f90:	4907      	ldr	r1, [pc, #28]	; (8000fb0 <LED_pattern_transmit+0x4c>)
 8000f92:	4808      	ldr	r0, [pc, #32]	; (8000fb4 <LED_pattern_transmit+0x50>)
 8000f94:	f002 f9d5 	bl	8003342 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(STCP595_GPIO_Port, STCP595_Pin, GPIO_PIN_SET);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f9e:	4803      	ldr	r0, [pc, #12]	; (8000fac <LED_pattern_transmit+0x48>)
 8000fa0:	f000 fdaa 	bl	8001af8 <HAL_GPIO_WritePin>
}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	48000800 	.word	0x48000800
 8000fac:	48000400 	.word	0x48000400
 8000fb0:	200000b4 	.word	0x200000b4
 8000fb4:	200000b8 	.word	0x200000b8

08000fb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fbc:	f000 fab8 	bl	8001530 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc0:	f000 f80d 	bl	8000fde <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc4:	f7ff fe2a 	bl	8000c1c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fc8:	f000 f9fc 	bl	80013c4 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000fcc:	f000 f870 	bl	80010b0 <MX_SPI3_Init>
	testing();
#else
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000fd0:	f003 fc56 	bl	8004880 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000fd4:	f7ff fd02 	bl	80009dc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000fd8:	f003 fc76 	bl	80048c8 <osKernelStart>
#endif
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <main+0x24>

08000fde <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b096      	sub	sp, #88	; 0x58
 8000fe2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	2244      	movs	r2, #68	; 0x44
 8000fea:	2100      	movs	r1, #0
 8000fec:	4618      	mov	r0, r3
 8000fee:	f006 fd09 	bl	8007a04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001000:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001004:	f000 fdb6 	bl	8001b74 <HAL_PWREx_ControlVoltageScaling>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800100e:	f000 f849 	bl	80010a4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001012:	2302      	movs	r3, #2
 8001014:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001016:	f44f 7380 	mov.w	r3, #256	; 0x100
 800101a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800101c:	2310      	movs	r3, #16
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001020:	2302      	movs	r3, #2
 8001022:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001024:	2302      	movs	r3, #2
 8001026:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001028:	2301      	movs	r3, #1
 800102a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800102c:	230a      	movs	r3, #10
 800102e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001030:	2307      	movs	r3, #7
 8001032:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001034:	2302      	movs	r3, #2
 8001036:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001038:	2302      	movs	r3, #2
 800103a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	4618      	mov	r0, r3
 8001042:	f000 fded 	bl	8001c20 <HAL_RCC_OscConfig>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800104c:	f000 f82a 	bl	80010a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001050:	230f      	movs	r3, #15
 8001052:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001054:	2303      	movs	r3, #3
 8001056:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001058:	2300      	movs	r3, #0
 800105a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800105c:	2300      	movs	r3, #0
 800105e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001060:	2300      	movs	r3, #0
 8001062:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001064:	463b      	mov	r3, r7
 8001066:	2104      	movs	r1, #4
 8001068:	4618      	mov	r0, r3
 800106a:	f001 f9b5 	bl	80023d8 <HAL_RCC_ClockConfig>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001074:	f000 f816 	bl	80010a4 <Error_Handler>
  }
}
 8001078:	bf00      	nop
 800107a:	3758      	adds	r7, #88	; 0x58
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a04      	ldr	r2, [pc, #16]	; (80010a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d101      	bne.n	8001096 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001092:	f000 fa6d 	bl	8001570 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40012c00 	.word	0x40012c00

080010a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a8:	b672      	cpsid	i
}
 80010aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010ac:	e7fe      	b.n	80010ac <Error_Handler+0x8>
	...

080010b0 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80010b4:	4b1b      	ldr	r3, [pc, #108]	; (8001124 <MX_SPI3_Init+0x74>)
 80010b6:	4a1c      	ldr	r2, [pc, #112]	; (8001128 <MX_SPI3_Init+0x78>)
 80010b8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80010ba:	4b1a      	ldr	r3, [pc, #104]	; (8001124 <MX_SPI3_Init+0x74>)
 80010bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010c0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80010c2:	4b18      	ldr	r3, [pc, #96]	; (8001124 <MX_SPI3_Init+0x74>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80010c8:	4b16      	ldr	r3, [pc, #88]	; (8001124 <MX_SPI3_Init+0x74>)
 80010ca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80010ce:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010d0:	4b14      	ldr	r3, [pc, #80]	; (8001124 <MX_SPI3_Init+0x74>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010d6:	4b13      	ldr	r3, [pc, #76]	; (8001124 <MX_SPI3_Init+0x74>)
 80010d8:	2200      	movs	r2, #0
 80010da:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <MX_SPI3_Init+0x74>)
 80010de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010e2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <MX_SPI3_Init+0x74>)
 80010e6:	2228      	movs	r2, #40	; 0x28
 80010e8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <MX_SPI3_Init+0x74>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80010f0:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <MX_SPI3_Init+0x74>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010f6:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <MX_SPI3_Init+0x74>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80010fc:	4b09      	ldr	r3, [pc, #36]	; (8001124 <MX_SPI3_Init+0x74>)
 80010fe:	2207      	movs	r2, #7
 8001100:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001102:	4b08      	ldr	r3, [pc, #32]	; (8001124 <MX_SPI3_Init+0x74>)
 8001104:	2200      	movs	r2, #0
 8001106:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <MX_SPI3_Init+0x74>)
 800110a:	2208      	movs	r2, #8
 800110c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800110e:	4805      	ldr	r0, [pc, #20]	; (8001124 <MX_SPI3_Init+0x74>)
 8001110:	f002 f874 	bl	80031fc <HAL_SPI_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800111a:	f7ff ffc3 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	200000b8 	.word	0x200000b8
 8001128:	40003c00 	.word	0x40003c00

0800112c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08a      	sub	sp, #40	; 0x28
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a25      	ldr	r2, [pc, #148]	; (80011e0 <HAL_SPI_MspInit+0xb4>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d144      	bne.n	80011d8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800114e:	4b25      	ldr	r3, [pc, #148]	; (80011e4 <HAL_SPI_MspInit+0xb8>)
 8001150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001152:	4a24      	ldr	r2, [pc, #144]	; (80011e4 <HAL_SPI_MspInit+0xb8>)
 8001154:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001158:	6593      	str	r3, [r2, #88]	; 0x58
 800115a:	4b22      	ldr	r3, [pc, #136]	; (80011e4 <HAL_SPI_MspInit+0xb8>)
 800115c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800115e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001166:	4b1f      	ldr	r3, [pc, #124]	; (80011e4 <HAL_SPI_MspInit+0xb8>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116a:	4a1e      	ldr	r2, [pc, #120]	; (80011e4 <HAL_SPI_MspInit+0xb8>)
 800116c:	f043 0304 	orr.w	r3, r3, #4
 8001170:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001172:	4b1c      	ldr	r3, [pc, #112]	; (80011e4 <HAL_SPI_MspInit+0xb8>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001176:	f003 0304 	and.w	r3, r3, #4
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800117e:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <HAL_SPI_MspInit+0xb8>)
 8001180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001182:	4a18      	ldr	r2, [pc, #96]	; (80011e4 <HAL_SPI_MspInit+0xb8>)
 8001184:	f043 0302 	orr.w	r3, r3, #2
 8001188:	64d3      	str	r3, [r2, #76]	; 0x4c
 800118a:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <HAL_SPI_MspInit+0xb8>)
 800118c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = SHCP595_Pin;
 8001196:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800119a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119c:	2302      	movs	r3, #2
 800119e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a4:	2303      	movs	r3, #3
 80011a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011a8:	2306      	movs	r3, #6
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SHCP595_GPIO_Port, &GPIO_InitStruct);
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	4619      	mov	r1, r3
 80011b2:	480d      	ldr	r0, [pc, #52]	; (80011e8 <HAL_SPI_MspInit+0xbc>)
 80011b4:	f000 fade 	bl	8001774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DS595_Pin;
 80011b8:	2320      	movs	r3, #32
 80011ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	2302      	movs	r3, #2
 80011be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c4:	2303      	movs	r3, #3
 80011c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011c8:	2306      	movs	r3, #6
 80011ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DS595_GPIO_Port, &GPIO_InitStruct);
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	4619      	mov	r1, r3
 80011d2:	4806      	ldr	r0, [pc, #24]	; (80011ec <HAL_SPI_MspInit+0xc0>)
 80011d4:	f000 face 	bl	8001774 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80011d8:	bf00      	nop
 80011da:	3728      	adds	r7, #40	; 0x28
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40003c00 	.word	0x40003c00
 80011e4:	40021000 	.word	0x40021000
 80011e8:	48000800 	.word	0x48000800
 80011ec:	48000400 	.word	0x48000400

080011f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <HAL_MspInit+0x4c>)
 80011f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011fa:	4a10      	ldr	r2, [pc, #64]	; (800123c <HAL_MspInit+0x4c>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	6613      	str	r3, [r2, #96]	; 0x60
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <HAL_MspInit+0x4c>)
 8001204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <HAL_MspInit+0x4c>)
 8001210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001212:	4a0a      	ldr	r2, [pc, #40]	; (800123c <HAL_MspInit+0x4c>)
 8001214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001218:	6593      	str	r3, [r2, #88]	; 0x58
 800121a:	4b08      	ldr	r3, [pc, #32]	; (800123c <HAL_MspInit+0x4c>)
 800121c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	210f      	movs	r1, #15
 800122a:	f06f 0001 	mvn.w	r0, #1
 800122e:	f000 fa77 	bl	8001720 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40021000 	.word	0x40021000

08001240 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08c      	sub	sp, #48	; 0x30
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001248:	2300      	movs	r3, #0
 800124a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800124e:	4b2e      	ldr	r3, [pc, #184]	; (8001308 <HAL_InitTick+0xc8>)
 8001250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001252:	4a2d      	ldr	r2, [pc, #180]	; (8001308 <HAL_InitTick+0xc8>)
 8001254:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001258:	6613      	str	r3, [r2, #96]	; 0x60
 800125a:	4b2b      	ldr	r3, [pc, #172]	; (8001308 <HAL_InitTick+0xc8>)
 800125c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800125e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001266:	f107 020c 	add.w	r2, r7, #12
 800126a:	f107 0310 	add.w	r3, r7, #16
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f001 fa75 	bl	8002760 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001276:	f001 fa5d 	bl	8002734 <HAL_RCC_GetPCLK2Freq>
 800127a:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800127c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800127e:	4a23      	ldr	r2, [pc, #140]	; (800130c <HAL_InitTick+0xcc>)
 8001280:	fba2 2303 	umull	r2, r3, r2, r3
 8001284:	0c9b      	lsrs	r3, r3, #18
 8001286:	3b01      	subs	r3, #1
 8001288:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800128a:	4b21      	ldr	r3, [pc, #132]	; (8001310 <HAL_InitTick+0xd0>)
 800128c:	4a21      	ldr	r2, [pc, #132]	; (8001314 <HAL_InitTick+0xd4>)
 800128e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001290:	4b1f      	ldr	r3, [pc, #124]	; (8001310 <HAL_InitTick+0xd0>)
 8001292:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001296:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001298:	4a1d      	ldr	r2, [pc, #116]	; (8001310 <HAL_InitTick+0xd0>)
 800129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800129e:	4b1c      	ldr	r3, [pc, #112]	; (8001310 <HAL_InitTick+0xd0>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a4:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <HAL_InitTick+0xd0>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012aa:	4b19      	ldr	r3, [pc, #100]	; (8001310 <HAL_InitTick+0xd0>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80012b0:	4817      	ldr	r0, [pc, #92]	; (8001310 <HAL_InitTick+0xd0>)
 80012b2:	f002 fb19 	bl	80038e8 <HAL_TIM_Base_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80012bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d11b      	bne.n	80012fc <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80012c4:	4812      	ldr	r0, [pc, #72]	; (8001310 <HAL_InitTick+0xd0>)
 80012c6:	f002 fb71 	bl	80039ac <HAL_TIM_Base_Start_IT>
 80012ca:	4603      	mov	r3, r0
 80012cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80012d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d111      	bne.n	80012fc <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80012d8:	2019      	movs	r0, #25
 80012da:	f000 fa3d 	bl	8001758 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2b0f      	cmp	r3, #15
 80012e2:	d808      	bhi.n	80012f6 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80012e4:	2200      	movs	r2, #0
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	2019      	movs	r0, #25
 80012ea:	f000 fa19 	bl	8001720 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012ee:	4a0a      	ldr	r2, [pc, #40]	; (8001318 <HAL_InitTick+0xd8>)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6013      	str	r3, [r2, #0]
 80012f4:	e002      	b.n	80012fc <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80012fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001300:	4618      	mov	r0, r3
 8001302:	3730      	adds	r7, #48	; 0x30
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40021000 	.word	0x40021000
 800130c:	431bde83 	.word	0x431bde83
 8001310:	2000011c 	.word	0x2000011c
 8001314:	40012c00 	.word	0x40012c00
 8001318:	2000000c 	.word	0x2000000c

0800131c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001320:	e7fe      	b.n	8001320 <NMI_Handler+0x4>

08001322 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001326:	e7fe      	b.n	8001326 <HardFault_Handler+0x4>

08001328 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800132c:	e7fe      	b.n	800132c <MemManage_Handler+0x4>

0800132e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001332:	e7fe      	b.n	8001332 <BusFault_Handler+0x4>

08001334 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001338:	e7fe      	b.n	8001338 <UsageFault_Handler+0x4>

0800133a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(W_Car_Pin);
 800134c:	2010      	movs	r0, #16
 800134e:	f000 fbeb 	bl	8001b28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}

08001356 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(N_Btn_Pin);
 800135a:	2080      	movs	r0, #128	; 0x80
 800135c:	f000 fbe4 	bl	8001b28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}

08001364 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001368:	4802      	ldr	r0, [pc, #8]	; (8001374 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800136a:	f002 fb8f 	bl	8003a8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	2000011c 	.word	0x2000011c

08001378 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(N_Car_Pin);
 800137c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001380:	f000 fbd2 	bl	8001b28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S_Car_Pin);
 8001384:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001388:	f000 fbce 	bl	8001b28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(E_Car_Pin);
 800138c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001390:	f000 fbca 	bl	8001b28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S_Btn_Pin);
 8001394:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001398:	f000 fbc6 	bl	8001b28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}

080013a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <SystemInit+0x20>)
 80013a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013aa:	4a05      	ldr	r2, [pc, #20]	; (80013c0 <SystemInit+0x20>)
 80013ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013c8:	4b14      	ldr	r3, [pc, #80]	; (800141c <MX_USART2_UART_Init+0x58>)
 80013ca:	4a15      	ldr	r2, [pc, #84]	; (8001420 <MX_USART2_UART_Init+0x5c>)
 80013cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013ce:	4b13      	ldr	r3, [pc, #76]	; (800141c <MX_USART2_UART_Init+0x58>)
 80013d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013d6:	4b11      	ldr	r3, [pc, #68]	; (800141c <MX_USART2_UART_Init+0x58>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013dc:	4b0f      	ldr	r3, [pc, #60]	; (800141c <MX_USART2_UART_Init+0x58>)
 80013de:	2200      	movs	r2, #0
 80013e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <MX_USART2_UART_Init+0x58>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013e8:	4b0c      	ldr	r3, [pc, #48]	; (800141c <MX_USART2_UART_Init+0x58>)
 80013ea:	220c      	movs	r2, #12
 80013ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ee:	4b0b      	ldr	r3, [pc, #44]	; (800141c <MX_USART2_UART_Init+0x58>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f4:	4b09      	ldr	r3, [pc, #36]	; (800141c <MX_USART2_UART_Init+0x58>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013fa:	4b08      	ldr	r3, [pc, #32]	; (800141c <MX_USART2_UART_Init+0x58>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001400:	4b06      	ldr	r3, [pc, #24]	; (800141c <MX_USART2_UART_Init+0x58>)
 8001402:	2200      	movs	r2, #0
 8001404:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001406:	4805      	ldr	r0, [pc, #20]	; (800141c <MX_USART2_UART_Init+0x58>)
 8001408:	f002 fd40 	bl	8003e8c <HAL_UART_Init>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001412:	f7ff fe47 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000168 	.word	0x20000168
 8001420:	40004400 	.word	0x40004400

08001424 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b0ac      	sub	sp, #176	; 0xb0
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	2288      	movs	r2, #136	; 0x88
 8001442:	2100      	movs	r1, #0
 8001444:	4618      	mov	r0, r3
 8001446:	f006 fadd 	bl	8007a04 <memset>
  if(uartHandle->Instance==USART2)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a21      	ldr	r2, [pc, #132]	; (80014d4 <HAL_UART_MspInit+0xb0>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d13b      	bne.n	80014cc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001454:	2302      	movs	r3, #2
 8001456:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001458:	2300      	movs	r3, #0
 800145a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	4618      	mov	r0, r3
 8001462:	f001 fa0f 	bl	8002884 <HAL_RCCEx_PeriphCLKConfig>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800146c:	f7ff fe1a 	bl	80010a4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001470:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <HAL_UART_MspInit+0xb4>)
 8001472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001474:	4a18      	ldr	r2, [pc, #96]	; (80014d8 <HAL_UART_MspInit+0xb4>)
 8001476:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800147a:	6593      	str	r3, [r2, #88]	; 0x58
 800147c:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <HAL_UART_MspInit+0xb4>)
 800147e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001488:	4b13      	ldr	r3, [pc, #76]	; (80014d8 <HAL_UART_MspInit+0xb4>)
 800148a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148c:	4a12      	ldr	r2, [pc, #72]	; (80014d8 <HAL_UART_MspInit+0xb4>)
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001494:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <HAL_UART_MspInit+0xb4>)
 8001496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014a0:	230c      	movs	r3, #12
 80014a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a6:	2302      	movs	r3, #2
 80014a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b2:	2303      	movs	r3, #3
 80014b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014b8:	2307      	movs	r3, #7
 80014ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014be:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014c2:	4619      	mov	r1, r3
 80014c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c8:	f000 f954 	bl	8001774 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80014cc:	bf00      	nop
 80014ce:	37b0      	adds	r7, #176	; 0xb0
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40004400 	.word	0x40004400
 80014d8:	40021000 	.word	0x40021000

080014dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001514 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014e0:	f7ff ff5e 	bl	80013a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014e4:	480c      	ldr	r0, [pc, #48]	; (8001518 <LoopForever+0x6>)
  ldr r1, =_edata
 80014e6:	490d      	ldr	r1, [pc, #52]	; (800151c <LoopForever+0xa>)
  ldr r2, =_sidata
 80014e8:	4a0d      	ldr	r2, [pc, #52]	; (8001520 <LoopForever+0xe>)
  movs r3, #0
 80014ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014ec:	e002      	b.n	80014f4 <LoopCopyDataInit>

080014ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014f2:	3304      	adds	r3, #4

080014f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f8:	d3f9      	bcc.n	80014ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014fa:	4a0a      	ldr	r2, [pc, #40]	; (8001524 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014fc:	4c0a      	ldr	r4, [pc, #40]	; (8001528 <LoopForever+0x16>)
  movs r3, #0
 80014fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001500:	e001      	b.n	8001506 <LoopFillZerobss>

08001502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001504:	3204      	adds	r2, #4

08001506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001508:	d3fb      	bcc.n	8001502 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800150a:	f006 fa47 	bl	800799c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800150e:	f7ff fd53 	bl	8000fb8 <main>

08001512 <LoopForever>:

LoopForever:
    b LoopForever
 8001512:	e7fe      	b.n	8001512 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001514:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800151c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001520:	08007d20 	.word	0x08007d20
  ldr r2, =_sbss
 8001524:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001528:	20001bc0 	.word	0x20001bc0

0800152c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800152c:	e7fe      	b.n	800152c <ADC1_2_IRQHandler>
	...

08001530 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001536:	2300      	movs	r3, #0
 8001538:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800153a:	4b0c      	ldr	r3, [pc, #48]	; (800156c <HAL_Init+0x3c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a0b      	ldr	r2, [pc, #44]	; (800156c <HAL_Init+0x3c>)
 8001540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001544:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001546:	2003      	movs	r0, #3
 8001548:	f000 f8df 	bl	800170a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800154c:	200f      	movs	r0, #15
 800154e:	f7ff fe77 	bl	8001240 <HAL_InitTick>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d002      	beq.n	800155e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	71fb      	strb	r3, [r7, #7]
 800155c:	e001      	b.n	8001562 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800155e:	f7ff fe47 	bl	80011f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001562:	79fb      	ldrb	r3, [r7, #7]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40022000 	.word	0x40022000

08001570 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001574:	4b06      	ldr	r3, [pc, #24]	; (8001590 <HAL_IncTick+0x20>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	461a      	mov	r2, r3
 800157a:	4b06      	ldr	r3, [pc, #24]	; (8001594 <HAL_IncTick+0x24>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4413      	add	r3, r2
 8001580:	4a04      	ldr	r2, [pc, #16]	; (8001594 <HAL_IncTick+0x24>)
 8001582:	6013      	str	r3, [r2, #0]
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	20000010 	.word	0x20000010
 8001594:	200001ec 	.word	0x200001ec

08001598 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  return uwTick;
 800159c:	4b03      	ldr	r3, [pc, #12]	; (80015ac <HAL_GetTick+0x14>)
 800159e:	681b      	ldr	r3, [r3, #0]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	200001ec 	.word	0x200001ec

080015b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <__NVIC_SetPriorityGrouping+0x44>)
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015c6:	68ba      	ldr	r2, [r7, #8]
 80015c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015cc:	4013      	ands	r3, r2
 80015ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015e2:	4a04      	ldr	r2, [pc, #16]	; (80015f4 <__NVIC_SetPriorityGrouping+0x44>)
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	60d3      	str	r3, [r2, #12]
}
 80015e8:	bf00      	nop
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015fc:	4b04      	ldr	r3, [pc, #16]	; (8001610 <__NVIC_GetPriorityGrouping+0x18>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	0a1b      	lsrs	r3, r3, #8
 8001602:	f003 0307 	and.w	r3, r3, #7
}
 8001606:	4618      	mov	r0, r3
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800161e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001622:	2b00      	cmp	r3, #0
 8001624:	db0b      	blt.n	800163e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	f003 021f 	and.w	r2, r3, #31
 800162c:	4907      	ldr	r1, [pc, #28]	; (800164c <__NVIC_EnableIRQ+0x38>)
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	095b      	lsrs	r3, r3, #5
 8001634:	2001      	movs	r0, #1
 8001636:	fa00 f202 	lsl.w	r2, r0, r2
 800163a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	e000e100 	.word	0xe000e100

08001650 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	6039      	str	r1, [r7, #0]
 800165a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800165c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001660:	2b00      	cmp	r3, #0
 8001662:	db0a      	blt.n	800167a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	b2da      	uxtb	r2, r3
 8001668:	490c      	ldr	r1, [pc, #48]	; (800169c <__NVIC_SetPriority+0x4c>)
 800166a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166e:	0112      	lsls	r2, r2, #4
 8001670:	b2d2      	uxtb	r2, r2
 8001672:	440b      	add	r3, r1
 8001674:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001678:	e00a      	b.n	8001690 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	b2da      	uxtb	r2, r3
 800167e:	4908      	ldr	r1, [pc, #32]	; (80016a0 <__NVIC_SetPriority+0x50>)
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	f003 030f 	and.w	r3, r3, #15
 8001686:	3b04      	subs	r3, #4
 8001688:	0112      	lsls	r2, r2, #4
 800168a:	b2d2      	uxtb	r2, r2
 800168c:	440b      	add	r3, r1
 800168e:	761a      	strb	r2, [r3, #24]
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	e000e100 	.word	0xe000e100
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b089      	sub	sp, #36	; 0x24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	f1c3 0307 	rsb	r3, r3, #7
 80016be:	2b04      	cmp	r3, #4
 80016c0:	bf28      	it	cs
 80016c2:	2304      	movcs	r3, #4
 80016c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	3304      	adds	r3, #4
 80016ca:	2b06      	cmp	r3, #6
 80016cc:	d902      	bls.n	80016d4 <NVIC_EncodePriority+0x30>
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	3b03      	subs	r3, #3
 80016d2:	e000      	b.n	80016d6 <NVIC_EncodePriority+0x32>
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43da      	mvns	r2, r3
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	401a      	ands	r2, r3
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	fa01 f303 	lsl.w	r3, r1, r3
 80016f6:	43d9      	mvns	r1, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016fc:	4313      	orrs	r3, r2
         );
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3724      	adds	r7, #36	; 0x24
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7ff ff4c 	bl	80015b0 <__NVIC_SetPriorityGrouping>
}
 8001718:	bf00      	nop
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
 800172c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001732:	f7ff ff61 	bl	80015f8 <__NVIC_GetPriorityGrouping>
 8001736:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	68b9      	ldr	r1, [r7, #8]
 800173c:	6978      	ldr	r0, [r7, #20]
 800173e:	f7ff ffb1 	bl	80016a4 <NVIC_EncodePriority>
 8001742:	4602      	mov	r2, r0
 8001744:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001748:	4611      	mov	r1, r2
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff ff80 	bl	8001650 <__NVIC_SetPriority>
}
 8001750:	bf00      	nop
 8001752:	3718      	adds	r7, #24
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff ff54 	bl	8001614 <__NVIC_EnableIRQ>
}
 800176c:	bf00      	nop
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001774:	b480      	push	{r7}
 8001776:	b087      	sub	sp, #28
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001782:	e17f      	b.n	8001a84 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	2101      	movs	r1, #1
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	fa01 f303 	lsl.w	r3, r1, r3
 8001790:	4013      	ands	r3, r2
 8001792:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2b00      	cmp	r3, #0
 8001798:	f000 8171 	beq.w	8001a7e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f003 0303 	and.w	r3, r3, #3
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d005      	beq.n	80017b4 <HAL_GPIO_Init+0x40>
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f003 0303 	and.w	r3, r3, #3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d130      	bne.n	8001816 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	2203      	movs	r2, #3
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	43db      	mvns	r3, r3
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4013      	ands	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	68da      	ldr	r2, [r3, #12]
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	4313      	orrs	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017ea:	2201      	movs	r2, #1
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43db      	mvns	r3, r3
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	4013      	ands	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	091b      	lsrs	r3, r3, #4
 8001800:	f003 0201 	and.w	r2, r3, #1
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	4313      	orrs	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	2b03      	cmp	r3, #3
 8001820:	d118      	bne.n	8001854 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001826:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001828:	2201      	movs	r2, #1
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	4013      	ands	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	08db      	lsrs	r3, r3, #3
 800183e:	f003 0201 	and.w	r2, r3, #1
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	4313      	orrs	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	2b03      	cmp	r3, #3
 800185e:	d017      	beq.n	8001890 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	2203      	movs	r2, #3
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4013      	ands	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	689a      	ldr	r2, [r3, #8]
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	4313      	orrs	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 0303 	and.w	r3, r3, #3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d123      	bne.n	80018e4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	08da      	lsrs	r2, r3, #3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3208      	adds	r2, #8
 80018a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	f003 0307 	and.w	r3, r3, #7
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	220f      	movs	r2, #15
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4013      	ands	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	691a      	ldr	r2, [r3, #16]
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	08da      	lsrs	r2, r3, #3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	3208      	adds	r2, #8
 80018de:	6939      	ldr	r1, [r7, #16]
 80018e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	2203      	movs	r2, #3
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	4013      	ands	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 0203 	and.w	r2, r3, #3
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	4313      	orrs	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001920:	2b00      	cmp	r3, #0
 8001922:	f000 80ac 	beq.w	8001a7e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001926:	4b5f      	ldr	r3, [pc, #380]	; (8001aa4 <HAL_GPIO_Init+0x330>)
 8001928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800192a:	4a5e      	ldr	r2, [pc, #376]	; (8001aa4 <HAL_GPIO_Init+0x330>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6613      	str	r3, [r2, #96]	; 0x60
 8001932:	4b5c      	ldr	r3, [pc, #368]	; (8001aa4 <HAL_GPIO_Init+0x330>)
 8001934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800193e:	4a5a      	ldr	r2, [pc, #360]	; (8001aa8 <HAL_GPIO_Init+0x334>)
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	089b      	lsrs	r3, r3, #2
 8001944:	3302      	adds	r3, #2
 8001946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800194a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	f003 0303 	and.w	r3, r3, #3
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	220f      	movs	r2, #15
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	43db      	mvns	r3, r3
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	4013      	ands	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001968:	d025      	beq.n	80019b6 <HAL_GPIO_Init+0x242>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a4f      	ldr	r2, [pc, #316]	; (8001aac <HAL_GPIO_Init+0x338>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d01f      	beq.n	80019b2 <HAL_GPIO_Init+0x23e>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a4e      	ldr	r2, [pc, #312]	; (8001ab0 <HAL_GPIO_Init+0x33c>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d019      	beq.n	80019ae <HAL_GPIO_Init+0x23a>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a4d      	ldr	r2, [pc, #308]	; (8001ab4 <HAL_GPIO_Init+0x340>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d013      	beq.n	80019aa <HAL_GPIO_Init+0x236>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a4c      	ldr	r2, [pc, #304]	; (8001ab8 <HAL_GPIO_Init+0x344>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d00d      	beq.n	80019a6 <HAL_GPIO_Init+0x232>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a4b      	ldr	r2, [pc, #300]	; (8001abc <HAL_GPIO_Init+0x348>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d007      	beq.n	80019a2 <HAL_GPIO_Init+0x22e>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a4a      	ldr	r2, [pc, #296]	; (8001ac0 <HAL_GPIO_Init+0x34c>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d101      	bne.n	800199e <HAL_GPIO_Init+0x22a>
 800199a:	2306      	movs	r3, #6
 800199c:	e00c      	b.n	80019b8 <HAL_GPIO_Init+0x244>
 800199e:	2307      	movs	r3, #7
 80019a0:	e00a      	b.n	80019b8 <HAL_GPIO_Init+0x244>
 80019a2:	2305      	movs	r3, #5
 80019a4:	e008      	b.n	80019b8 <HAL_GPIO_Init+0x244>
 80019a6:	2304      	movs	r3, #4
 80019a8:	e006      	b.n	80019b8 <HAL_GPIO_Init+0x244>
 80019aa:	2303      	movs	r3, #3
 80019ac:	e004      	b.n	80019b8 <HAL_GPIO_Init+0x244>
 80019ae:	2302      	movs	r3, #2
 80019b0:	e002      	b.n	80019b8 <HAL_GPIO_Init+0x244>
 80019b2:	2301      	movs	r3, #1
 80019b4:	e000      	b.n	80019b8 <HAL_GPIO_Init+0x244>
 80019b6:	2300      	movs	r3, #0
 80019b8:	697a      	ldr	r2, [r7, #20]
 80019ba:	f002 0203 	and.w	r2, r2, #3
 80019be:	0092      	lsls	r2, r2, #2
 80019c0:	4093      	lsls	r3, r2
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019c8:	4937      	ldr	r1, [pc, #220]	; (8001aa8 <HAL_GPIO_Init+0x334>)
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	089b      	lsrs	r3, r3, #2
 80019ce:	3302      	adds	r3, #2
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019d6:	4b3b      	ldr	r3, [pc, #236]	; (8001ac4 <HAL_GPIO_Init+0x350>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	43db      	mvns	r3, r3
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	4013      	ands	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d003      	beq.n	80019fa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019fa:	4a32      	ldr	r2, [pc, #200]	; (8001ac4 <HAL_GPIO_Init+0x350>)
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a00:	4b30      	ldr	r3, [pc, #192]	; (8001ac4 <HAL_GPIO_Init+0x350>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d003      	beq.n	8001a24 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a24:	4a27      	ldr	r2, [pc, #156]	; (8001ac4 <HAL_GPIO_Init+0x350>)
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a2a:	4b26      	ldr	r3, [pc, #152]	; (8001ac4 <HAL_GPIO_Init+0x350>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	43db      	mvns	r3, r3
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	4013      	ands	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a4e:	4a1d      	ldr	r2, [pc, #116]	; (8001ac4 <HAL_GPIO_Init+0x350>)
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001a54:	4b1b      	ldr	r3, [pc, #108]	; (8001ac4 <HAL_GPIO_Init+0x350>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	4013      	ands	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a78:	4a12      	ldr	r2, [pc, #72]	; (8001ac4 <HAL_GPIO_Init+0x350>)
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	3301      	adds	r3, #1
 8001a82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f47f ae78 	bne.w	8001784 <HAL_GPIO_Init+0x10>
  }
}
 8001a94:	bf00      	nop
 8001a96:	bf00      	nop
 8001a98:	371c      	adds	r7, #28
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40010000 	.word	0x40010000
 8001aac:	48000400 	.word	0x48000400
 8001ab0:	48000800 	.word	0x48000800
 8001ab4:	48000c00 	.word	0x48000c00
 8001ab8:	48001000 	.word	0x48001000
 8001abc:	48001400 	.word	0x48001400
 8001ac0:	48001800 	.word	0x48001800
 8001ac4:	40010400 	.word	0x40010400

08001ac8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	691a      	ldr	r2, [r3, #16]
 8001ad8:	887b      	ldrh	r3, [r7, #2]
 8001ada:	4013      	ands	r3, r2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d002      	beq.n	8001ae6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	73fb      	strb	r3, [r7, #15]
 8001ae4:	e001      	b.n	8001aea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3714      	adds	r7, #20
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	460b      	mov	r3, r1
 8001b02:	807b      	strh	r3, [r7, #2]
 8001b04:	4613      	mov	r3, r2
 8001b06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b08:	787b      	ldrb	r3, [r7, #1]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b0e:	887a      	ldrh	r2, [r7, #2]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b14:	e002      	b.n	8001b1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b16:	887a      	ldrh	r2, [r7, #2]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b32:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b34:	695a      	ldr	r2, [r3, #20]
 8001b36:	88fb      	ldrh	r3, [r7, #6]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d006      	beq.n	8001b4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b3e:	4a05      	ldr	r2, [pc, #20]	; (8001b54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b40:	88fb      	ldrh	r3, [r7, #6]
 8001b42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b44:	88fb      	ldrh	r3, [r7, #6]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7fe fdfe 	bl	8000748 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b4c:	bf00      	nop
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40010400 	.word	0x40010400

08001b58 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b5c:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <HAL_PWREx_GetVoltageRange+0x18>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40007000 	.word	0x40007000

08001b74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b82:	d130      	bne.n	8001be6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b84:	4b23      	ldr	r3, [pc, #140]	; (8001c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b90:	d038      	beq.n	8001c04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b92:	4b20      	ldr	r3, [pc, #128]	; (8001c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b9a:	4a1e      	ldr	r2, [pc, #120]	; (8001c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ba0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ba2:	4b1d      	ldr	r3, [pc, #116]	; (8001c18 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2232      	movs	r2, #50	; 0x32
 8001ba8:	fb02 f303 	mul.w	r3, r2, r3
 8001bac:	4a1b      	ldr	r2, [pc, #108]	; (8001c1c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001bae:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb2:	0c9b      	lsrs	r3, r3, #18
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bb8:	e002      	b.n	8001bc0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bc0:	4b14      	ldr	r3, [pc, #80]	; (8001c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bcc:	d102      	bne.n	8001bd4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1f2      	bne.n	8001bba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bd4:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bd6:	695b      	ldr	r3, [r3, #20]
 8001bd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001be0:	d110      	bne.n	8001c04 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e00f      	b.n	8001c06 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001be6:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bf2:	d007      	beq.n	8001c04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bf4:	4b07      	ldr	r3, [pc, #28]	; (8001c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bfc:	4a05      	ldr	r2, [pc, #20]	; (8001c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c02:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	40007000 	.word	0x40007000
 8001c18:	20000008 	.word	0x20000008
 8001c1c:	431bde83 	.word	0x431bde83

08001c20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b088      	sub	sp, #32
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e3ca      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c32:	4b97      	ldr	r3, [pc, #604]	; (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 030c 	and.w	r3, r3, #12
 8001c3a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c3c:	4b94      	ldr	r3, [pc, #592]	; (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	f003 0303 	and.w	r3, r3, #3
 8001c44:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0310 	and.w	r3, r3, #16
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 80e4 	beq.w	8001e1c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d007      	beq.n	8001c6a <HAL_RCC_OscConfig+0x4a>
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	2b0c      	cmp	r3, #12
 8001c5e:	f040 808b 	bne.w	8001d78 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	f040 8087 	bne.w	8001d78 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c6a:	4b89      	ldr	r3, [pc, #548]	; (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d005      	beq.n	8001c82 <HAL_RCC_OscConfig+0x62>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e3a2      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a1a      	ldr	r2, [r3, #32]
 8001c86:	4b82      	ldr	r3, [pc, #520]	; (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d004      	beq.n	8001c9c <HAL_RCC_OscConfig+0x7c>
 8001c92:	4b7f      	ldr	r3, [pc, #508]	; (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c9a:	e005      	b.n	8001ca8 <HAL_RCC_OscConfig+0x88>
 8001c9c:	4b7c      	ldr	r3, [pc, #496]	; (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ca2:	091b      	lsrs	r3, r3, #4
 8001ca4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d223      	bcs.n	8001cf4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f000 fd87 	bl	80027c4 <RCC_SetFlashLatencyFromMSIRange>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e383      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cc0:	4b73      	ldr	r3, [pc, #460]	; (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a72      	ldr	r2, [pc, #456]	; (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001cc6:	f043 0308 	orr.w	r3, r3, #8
 8001cca:	6013      	str	r3, [r2, #0]
 8001ccc:	4b70      	ldr	r3, [pc, #448]	; (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	496d      	ldr	r1, [pc, #436]	; (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cde:	4b6c      	ldr	r3, [pc, #432]	; (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	021b      	lsls	r3, r3, #8
 8001cec:	4968      	ldr	r1, [pc, #416]	; (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	604b      	str	r3, [r1, #4]
 8001cf2:	e025      	b.n	8001d40 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cf4:	4b66      	ldr	r3, [pc, #408]	; (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a65      	ldr	r2, [pc, #404]	; (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001cfa:	f043 0308 	orr.w	r3, r3, #8
 8001cfe:	6013      	str	r3, [r2, #0]
 8001d00:	4b63      	ldr	r3, [pc, #396]	; (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	4960      	ldr	r1, [pc, #384]	; (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d12:	4b5f      	ldr	r3, [pc, #380]	; (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	495b      	ldr	r1, [pc, #364]	; (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d109      	bne.n	8001d40 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f000 fd47 	bl	80027c4 <RCC_SetFlashLatencyFromMSIRange>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e343      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d40:	f000 fc4a 	bl	80025d8 <HAL_RCC_GetSysClockFreq>
 8001d44:	4602      	mov	r2, r0
 8001d46:	4b52      	ldr	r3, [pc, #328]	; (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	091b      	lsrs	r3, r3, #4
 8001d4c:	f003 030f 	and.w	r3, r3, #15
 8001d50:	4950      	ldr	r1, [pc, #320]	; (8001e94 <HAL_RCC_OscConfig+0x274>)
 8001d52:	5ccb      	ldrb	r3, [r1, r3]
 8001d54:	f003 031f 	and.w	r3, r3, #31
 8001d58:	fa22 f303 	lsr.w	r3, r2, r3
 8001d5c:	4a4e      	ldr	r2, [pc, #312]	; (8001e98 <HAL_RCC_OscConfig+0x278>)
 8001d5e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d60:	4b4e      	ldr	r3, [pc, #312]	; (8001e9c <HAL_RCC_OscConfig+0x27c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff fa6b 	bl	8001240 <HAL_InitTick>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d6e:	7bfb      	ldrb	r3, [r7, #15]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d052      	beq.n	8001e1a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001d74:	7bfb      	ldrb	r3, [r7, #15]
 8001d76:	e327      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d032      	beq.n	8001de6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d80:	4b43      	ldr	r3, [pc, #268]	; (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a42      	ldr	r2, [pc, #264]	; (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001d86:	f043 0301 	orr.w	r3, r3, #1
 8001d8a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d8c:	f7ff fc04 	bl	8001598 <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d94:	f7ff fc00 	bl	8001598 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e310      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001da6:	4b3a      	ldr	r3, [pc, #232]	; (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d0f0      	beq.n	8001d94 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001db2:	4b37      	ldr	r3, [pc, #220]	; (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a36      	ldr	r2, [pc, #216]	; (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001db8:	f043 0308 	orr.w	r3, r3, #8
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	4b34      	ldr	r3, [pc, #208]	; (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
 8001dca:	4931      	ldr	r1, [pc, #196]	; (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dd0:	4b2f      	ldr	r3, [pc, #188]	; (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	69db      	ldr	r3, [r3, #28]
 8001ddc:	021b      	lsls	r3, r3, #8
 8001dde:	492c      	ldr	r1, [pc, #176]	; (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	604b      	str	r3, [r1, #4]
 8001de4:	e01a      	b.n	8001e1c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001de6:	4b2a      	ldr	r3, [pc, #168]	; (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a29      	ldr	r2, [pc, #164]	; (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001dec:	f023 0301 	bic.w	r3, r3, #1
 8001df0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001df2:	f7ff fbd1 	bl	8001598 <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dfa:	f7ff fbcd 	bl	8001598 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e2dd      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e0c:	4b20      	ldr	r3, [pc, #128]	; (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1f0      	bne.n	8001dfa <HAL_RCC_OscConfig+0x1da>
 8001e18:	e000      	b.n	8001e1c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e1a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d074      	beq.n	8001f12 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	2b08      	cmp	r3, #8
 8001e2c:	d005      	beq.n	8001e3a <HAL_RCC_OscConfig+0x21a>
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	2b0c      	cmp	r3, #12
 8001e32:	d10e      	bne.n	8001e52 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	2b03      	cmp	r3, #3
 8001e38:	d10b      	bne.n	8001e52 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e3a:	4b15      	ldr	r3, [pc, #84]	; (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d064      	beq.n	8001f10 <HAL_RCC_OscConfig+0x2f0>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d160      	bne.n	8001f10 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e2ba      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e5a:	d106      	bne.n	8001e6a <HAL_RCC_OscConfig+0x24a>
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a0b      	ldr	r2, [pc, #44]	; (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001e62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e66:	6013      	str	r3, [r2, #0]
 8001e68:	e026      	b.n	8001eb8 <HAL_RCC_OscConfig+0x298>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e72:	d115      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x280>
 8001e74:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a05      	ldr	r2, [pc, #20]	; (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001e7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e7e:	6013      	str	r3, [r2, #0]
 8001e80:	4b03      	ldr	r3, [pc, #12]	; (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a02      	ldr	r2, [pc, #8]	; (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e8a:	6013      	str	r3, [r2, #0]
 8001e8c:	e014      	b.n	8001eb8 <HAL_RCC_OscConfig+0x298>
 8001e8e:	bf00      	nop
 8001e90:	40021000 	.word	0x40021000
 8001e94:	08007c68 	.word	0x08007c68
 8001e98:	20000008 	.word	0x20000008
 8001e9c:	2000000c 	.word	0x2000000c
 8001ea0:	4ba0      	ldr	r3, [pc, #640]	; (8002124 <HAL_RCC_OscConfig+0x504>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a9f      	ldr	r2, [pc, #636]	; (8002124 <HAL_RCC_OscConfig+0x504>)
 8001ea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eaa:	6013      	str	r3, [r2, #0]
 8001eac:	4b9d      	ldr	r3, [pc, #628]	; (8002124 <HAL_RCC_OscConfig+0x504>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a9c      	ldr	r2, [pc, #624]	; (8002124 <HAL_RCC_OscConfig+0x504>)
 8001eb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d013      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec0:	f7ff fb6a 	bl	8001598 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ec8:	f7ff fb66 	bl	8001598 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b64      	cmp	r3, #100	; 0x64
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e276      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eda:	4b92      	ldr	r3, [pc, #584]	; (8002124 <HAL_RCC_OscConfig+0x504>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d0f0      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x2a8>
 8001ee6:	e014      	b.n	8001f12 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee8:	f7ff fb56 	bl	8001598 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef0:	f7ff fb52 	bl	8001598 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b64      	cmp	r3, #100	; 0x64
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e262      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f02:	4b88      	ldr	r3, [pc, #544]	; (8002124 <HAL_RCC_OscConfig+0x504>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1f0      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x2d0>
 8001f0e:	e000      	b.n	8001f12 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d060      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	2b04      	cmp	r3, #4
 8001f22:	d005      	beq.n	8001f30 <HAL_RCC_OscConfig+0x310>
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	2b0c      	cmp	r3, #12
 8001f28:	d119      	bne.n	8001f5e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d116      	bne.n	8001f5e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f30:	4b7c      	ldr	r3, [pc, #496]	; (8002124 <HAL_RCC_OscConfig+0x504>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d005      	beq.n	8001f48 <HAL_RCC_OscConfig+0x328>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e23f      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f48:	4b76      	ldr	r3, [pc, #472]	; (8002124 <HAL_RCC_OscConfig+0x504>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	061b      	lsls	r3, r3, #24
 8001f56:	4973      	ldr	r1, [pc, #460]	; (8002124 <HAL_RCC_OscConfig+0x504>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f5c:	e040      	b.n	8001fe0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d023      	beq.n	8001fae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f66:	4b6f      	ldr	r3, [pc, #444]	; (8002124 <HAL_RCC_OscConfig+0x504>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a6e      	ldr	r2, [pc, #440]	; (8002124 <HAL_RCC_OscConfig+0x504>)
 8001f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f72:	f7ff fb11 	bl	8001598 <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f78:	e008      	b.n	8001f8c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f7a:	f7ff fb0d 	bl	8001598 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e21d      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f8c:	4b65      	ldr	r3, [pc, #404]	; (8002124 <HAL_RCC_OscConfig+0x504>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d0f0      	beq.n	8001f7a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f98:	4b62      	ldr	r3, [pc, #392]	; (8002124 <HAL_RCC_OscConfig+0x504>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	061b      	lsls	r3, r3, #24
 8001fa6:	495f      	ldr	r1, [pc, #380]	; (8002124 <HAL_RCC_OscConfig+0x504>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	604b      	str	r3, [r1, #4]
 8001fac:	e018      	b.n	8001fe0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fae:	4b5d      	ldr	r3, [pc, #372]	; (8002124 <HAL_RCC_OscConfig+0x504>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a5c      	ldr	r2, [pc, #368]	; (8002124 <HAL_RCC_OscConfig+0x504>)
 8001fb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fba:	f7ff faed 	bl	8001598 <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fc2:	f7ff fae9 	bl	8001598 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e1f9      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fd4:	4b53      	ldr	r3, [pc, #332]	; (8002124 <HAL_RCC_OscConfig+0x504>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1f0      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0308 	and.w	r3, r3, #8
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d03c      	beq.n	8002066 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d01c      	beq.n	800202e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ff4:	4b4b      	ldr	r3, [pc, #300]	; (8002124 <HAL_RCC_OscConfig+0x504>)
 8001ff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ffa:	4a4a      	ldr	r2, [pc, #296]	; (8002124 <HAL_RCC_OscConfig+0x504>)
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002004:	f7ff fac8 	bl	8001598 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800200c:	f7ff fac4 	bl	8001598 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e1d4      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800201e:	4b41      	ldr	r3, [pc, #260]	; (8002124 <HAL_RCC_OscConfig+0x504>)
 8002020:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0ef      	beq.n	800200c <HAL_RCC_OscConfig+0x3ec>
 800202c:	e01b      	b.n	8002066 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800202e:	4b3d      	ldr	r3, [pc, #244]	; (8002124 <HAL_RCC_OscConfig+0x504>)
 8002030:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002034:	4a3b      	ldr	r2, [pc, #236]	; (8002124 <HAL_RCC_OscConfig+0x504>)
 8002036:	f023 0301 	bic.w	r3, r3, #1
 800203a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800203e:	f7ff faab 	bl	8001598 <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002044:	e008      	b.n	8002058 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002046:	f7ff faa7 	bl	8001598 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e1b7      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002058:	4b32      	ldr	r3, [pc, #200]	; (8002124 <HAL_RCC_OscConfig+0x504>)
 800205a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1ef      	bne.n	8002046 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0304 	and.w	r3, r3, #4
 800206e:	2b00      	cmp	r3, #0
 8002070:	f000 80a6 	beq.w	80021c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002074:	2300      	movs	r3, #0
 8002076:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002078:	4b2a      	ldr	r3, [pc, #168]	; (8002124 <HAL_RCC_OscConfig+0x504>)
 800207a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d10d      	bne.n	80020a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002084:	4b27      	ldr	r3, [pc, #156]	; (8002124 <HAL_RCC_OscConfig+0x504>)
 8002086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002088:	4a26      	ldr	r2, [pc, #152]	; (8002124 <HAL_RCC_OscConfig+0x504>)
 800208a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800208e:	6593      	str	r3, [r2, #88]	; 0x58
 8002090:	4b24      	ldr	r3, [pc, #144]	; (8002124 <HAL_RCC_OscConfig+0x504>)
 8002092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800209c:	2301      	movs	r3, #1
 800209e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020a0:	4b21      	ldr	r3, [pc, #132]	; (8002128 <HAL_RCC_OscConfig+0x508>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d118      	bne.n	80020de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020ac:	4b1e      	ldr	r3, [pc, #120]	; (8002128 <HAL_RCC_OscConfig+0x508>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a1d      	ldr	r2, [pc, #116]	; (8002128 <HAL_RCC_OscConfig+0x508>)
 80020b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020b8:	f7ff fa6e 	bl	8001598 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c0:	f7ff fa6a 	bl	8001598 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e17a      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020d2:	4b15      	ldr	r3, [pc, #84]	; (8002128 <HAL_RCC_OscConfig+0x508>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0f0      	beq.n	80020c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d108      	bne.n	80020f8 <HAL_RCC_OscConfig+0x4d8>
 80020e6:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <HAL_RCC_OscConfig+0x504>)
 80020e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ec:	4a0d      	ldr	r2, [pc, #52]	; (8002124 <HAL_RCC_OscConfig+0x504>)
 80020ee:	f043 0301 	orr.w	r3, r3, #1
 80020f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020f6:	e029      	b.n	800214c <HAL_RCC_OscConfig+0x52c>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	2b05      	cmp	r3, #5
 80020fe:	d115      	bne.n	800212c <HAL_RCC_OscConfig+0x50c>
 8002100:	4b08      	ldr	r3, [pc, #32]	; (8002124 <HAL_RCC_OscConfig+0x504>)
 8002102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002106:	4a07      	ldr	r2, [pc, #28]	; (8002124 <HAL_RCC_OscConfig+0x504>)
 8002108:	f043 0304 	orr.w	r3, r3, #4
 800210c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002110:	4b04      	ldr	r3, [pc, #16]	; (8002124 <HAL_RCC_OscConfig+0x504>)
 8002112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002116:	4a03      	ldr	r2, [pc, #12]	; (8002124 <HAL_RCC_OscConfig+0x504>)
 8002118:	f043 0301 	orr.w	r3, r3, #1
 800211c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002120:	e014      	b.n	800214c <HAL_RCC_OscConfig+0x52c>
 8002122:	bf00      	nop
 8002124:	40021000 	.word	0x40021000
 8002128:	40007000 	.word	0x40007000
 800212c:	4b9c      	ldr	r3, [pc, #624]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 800212e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002132:	4a9b      	ldr	r2, [pc, #620]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 8002134:	f023 0301 	bic.w	r3, r3, #1
 8002138:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800213c:	4b98      	ldr	r3, [pc, #608]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 800213e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002142:	4a97      	ldr	r2, [pc, #604]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 8002144:	f023 0304 	bic.w	r3, r3, #4
 8002148:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d016      	beq.n	8002182 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002154:	f7ff fa20 	bl	8001598 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800215a:	e00a      	b.n	8002172 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800215c:	f7ff fa1c 	bl	8001598 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	f241 3288 	movw	r2, #5000	; 0x1388
 800216a:	4293      	cmp	r3, r2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e12a      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002172:	4b8b      	ldr	r3, [pc, #556]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 8002174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0ed      	beq.n	800215c <HAL_RCC_OscConfig+0x53c>
 8002180:	e015      	b.n	80021ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002182:	f7ff fa09 	bl	8001598 <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002188:	e00a      	b.n	80021a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800218a:	f7ff fa05 	bl	8001598 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	f241 3288 	movw	r2, #5000	; 0x1388
 8002198:	4293      	cmp	r3, r2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e113      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021a0:	4b7f      	ldr	r3, [pc, #508]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 80021a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1ed      	bne.n	800218a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021ae:	7ffb      	ldrb	r3, [r7, #31]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d105      	bne.n	80021c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021b4:	4b7a      	ldr	r3, [pc, #488]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 80021b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b8:	4a79      	ldr	r2, [pc, #484]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 80021ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021be:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 80fe 	beq.w	80023c6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	f040 80d0 	bne.w	8002374 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80021d4:	4b72      	ldr	r3, [pc, #456]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f003 0203 	and.w	r2, r3, #3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d130      	bne.n	800224a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	3b01      	subs	r3, #1
 80021f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d127      	bne.n	800224a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002204:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002206:	429a      	cmp	r2, r3
 8002208:	d11f      	bne.n	800224a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002214:	2a07      	cmp	r2, #7
 8002216:	bf14      	ite	ne
 8002218:	2201      	movne	r2, #1
 800221a:	2200      	moveq	r2, #0
 800221c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800221e:	4293      	cmp	r3, r2
 8002220:	d113      	bne.n	800224a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800222c:	085b      	lsrs	r3, r3, #1
 800222e:	3b01      	subs	r3, #1
 8002230:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002232:	429a      	cmp	r2, r3
 8002234:	d109      	bne.n	800224a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	085b      	lsrs	r3, r3, #1
 8002242:	3b01      	subs	r3, #1
 8002244:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002246:	429a      	cmp	r2, r3
 8002248:	d06e      	beq.n	8002328 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	2b0c      	cmp	r3, #12
 800224e:	d069      	beq.n	8002324 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002250:	4b53      	ldr	r3, [pc, #332]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d105      	bne.n	8002268 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800225c:	4b50      	ldr	r3, [pc, #320]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e0ad      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800226c:	4b4c      	ldr	r3, [pc, #304]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a4b      	ldr	r2, [pc, #300]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 8002272:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002276:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002278:	f7ff f98e 	bl	8001598 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002280:	f7ff f98a 	bl	8001598 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e09a      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002292:	4b43      	ldr	r3, [pc, #268]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1f0      	bne.n	8002280 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800229e:	4b40      	ldr	r3, [pc, #256]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 80022a0:	68da      	ldr	r2, [r3, #12]
 80022a2:	4b40      	ldr	r3, [pc, #256]	; (80023a4 <HAL_RCC_OscConfig+0x784>)
 80022a4:	4013      	ands	r3, r2
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80022ae:	3a01      	subs	r2, #1
 80022b0:	0112      	lsls	r2, r2, #4
 80022b2:	4311      	orrs	r1, r2
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022b8:	0212      	lsls	r2, r2, #8
 80022ba:	4311      	orrs	r1, r2
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80022c0:	0852      	lsrs	r2, r2, #1
 80022c2:	3a01      	subs	r2, #1
 80022c4:	0552      	lsls	r2, r2, #21
 80022c6:	4311      	orrs	r1, r2
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80022cc:	0852      	lsrs	r2, r2, #1
 80022ce:	3a01      	subs	r2, #1
 80022d0:	0652      	lsls	r2, r2, #25
 80022d2:	4311      	orrs	r1, r2
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022d8:	0912      	lsrs	r2, r2, #4
 80022da:	0452      	lsls	r2, r2, #17
 80022dc:	430a      	orrs	r2, r1
 80022de:	4930      	ldr	r1, [pc, #192]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80022e4:	4b2e      	ldr	r3, [pc, #184]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a2d      	ldr	r2, [pc, #180]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 80022ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022f0:	4b2b      	ldr	r3, [pc, #172]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	4a2a      	ldr	r2, [pc, #168]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 80022f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022fc:	f7ff f94c 	bl	8001598 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002304:	f7ff f948 	bl	8001598 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e058      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002316:	4b22      	ldr	r3, [pc, #136]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0f0      	beq.n	8002304 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002322:	e050      	b.n	80023c6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e04f      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002328:	4b1d      	ldr	r3, [pc, #116]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d148      	bne.n	80023c6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002334:	4b1a      	ldr	r3, [pc, #104]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a19      	ldr	r2, [pc, #100]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 800233a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800233e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002340:	4b17      	ldr	r3, [pc, #92]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	4a16      	ldr	r2, [pc, #88]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 8002346:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800234a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800234c:	f7ff f924 	bl	8001598 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002354:	f7ff f920 	bl	8001598 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e030      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002366:	4b0e      	ldr	r3, [pc, #56]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0f0      	beq.n	8002354 <HAL_RCC_OscConfig+0x734>
 8002372:	e028      	b.n	80023c6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	2b0c      	cmp	r3, #12
 8002378:	d023      	beq.n	80023c2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800237a:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a08      	ldr	r2, [pc, #32]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 8002380:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002384:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002386:	f7ff f907 	bl	8001598 <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800238c:	e00c      	b.n	80023a8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800238e:	f7ff f903 	bl	8001598 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d905      	bls.n	80023a8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e013      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
 80023a0:	40021000 	.word	0x40021000
 80023a4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023a8:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <HAL_RCC_OscConfig+0x7b0>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1ec      	bne.n	800238e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80023b4:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <HAL_RCC_OscConfig+0x7b0>)
 80023b6:	68da      	ldr	r2, [r3, #12]
 80023b8:	4905      	ldr	r1, [pc, #20]	; (80023d0 <HAL_RCC_OscConfig+0x7b0>)
 80023ba:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <HAL_RCC_OscConfig+0x7b4>)
 80023bc:	4013      	ands	r3, r2
 80023be:	60cb      	str	r3, [r1, #12]
 80023c0:	e001      	b.n	80023c6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e000      	b.n	80023c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3720      	adds	r7, #32
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40021000 	.word	0x40021000
 80023d4:	feeefffc 	.word	0xfeeefffc

080023d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e0e7      	b.n	80025bc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023ec:	4b75      	ldr	r3, [pc, #468]	; (80025c4 <HAL_RCC_ClockConfig+0x1ec>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d910      	bls.n	800241c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fa:	4b72      	ldr	r3, [pc, #456]	; (80025c4 <HAL_RCC_ClockConfig+0x1ec>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f023 0207 	bic.w	r2, r3, #7
 8002402:	4970      	ldr	r1, [pc, #448]	; (80025c4 <HAL_RCC_ClockConfig+0x1ec>)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	4313      	orrs	r3, r2
 8002408:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800240a:	4b6e      	ldr	r3, [pc, #440]	; (80025c4 <HAL_RCC_ClockConfig+0x1ec>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	429a      	cmp	r2, r3
 8002416:	d001      	beq.n	800241c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e0cf      	b.n	80025bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d010      	beq.n	800244a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	4b66      	ldr	r3, [pc, #408]	; (80025c8 <HAL_RCC_ClockConfig+0x1f0>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002434:	429a      	cmp	r2, r3
 8002436:	d908      	bls.n	800244a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002438:	4b63      	ldr	r3, [pc, #396]	; (80025c8 <HAL_RCC_ClockConfig+0x1f0>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	4960      	ldr	r1, [pc, #384]	; (80025c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002446:	4313      	orrs	r3, r2
 8002448:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d04c      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b03      	cmp	r3, #3
 800245c:	d107      	bne.n	800246e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800245e:	4b5a      	ldr	r3, [pc, #360]	; (80025c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d121      	bne.n	80024ae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e0a6      	b.n	80025bc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b02      	cmp	r3, #2
 8002474:	d107      	bne.n	8002486 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002476:	4b54      	ldr	r3, [pc, #336]	; (80025c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d115      	bne.n	80024ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e09a      	b.n	80025bc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d107      	bne.n	800249e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800248e:	4b4e      	ldr	r3, [pc, #312]	; (80025c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d109      	bne.n	80024ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e08e      	b.n	80025bc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800249e:	4b4a      	ldr	r3, [pc, #296]	; (80025c8 <HAL_RCC_ClockConfig+0x1f0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e086      	b.n	80025bc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024ae:	4b46      	ldr	r3, [pc, #280]	; (80025c8 <HAL_RCC_ClockConfig+0x1f0>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f023 0203 	bic.w	r2, r3, #3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	4943      	ldr	r1, [pc, #268]	; (80025c8 <HAL_RCC_ClockConfig+0x1f0>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024c0:	f7ff f86a 	bl	8001598 <HAL_GetTick>
 80024c4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024c6:	e00a      	b.n	80024de <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024c8:	f7ff f866 	bl	8001598 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e06e      	b.n	80025bc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024de:	4b3a      	ldr	r3, [pc, #232]	; (80025c8 <HAL_RCC_ClockConfig+0x1f0>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 020c 	and.w	r2, r3, #12
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d1eb      	bne.n	80024c8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d010      	beq.n	800251e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	4b31      	ldr	r3, [pc, #196]	; (80025c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002508:	429a      	cmp	r2, r3
 800250a:	d208      	bcs.n	800251e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800250c:	4b2e      	ldr	r3, [pc, #184]	; (80025c8 <HAL_RCC_ClockConfig+0x1f0>)
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	492b      	ldr	r1, [pc, #172]	; (80025c8 <HAL_RCC_ClockConfig+0x1f0>)
 800251a:	4313      	orrs	r3, r2
 800251c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800251e:	4b29      	ldr	r3, [pc, #164]	; (80025c4 <HAL_RCC_ClockConfig+0x1ec>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	429a      	cmp	r2, r3
 800252a:	d210      	bcs.n	800254e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252c:	4b25      	ldr	r3, [pc, #148]	; (80025c4 <HAL_RCC_ClockConfig+0x1ec>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f023 0207 	bic.w	r2, r3, #7
 8002534:	4923      	ldr	r1, [pc, #140]	; (80025c4 <HAL_RCC_ClockConfig+0x1ec>)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	4313      	orrs	r3, r2
 800253a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800253c:	4b21      	ldr	r3, [pc, #132]	; (80025c4 <HAL_RCC_ClockConfig+0x1ec>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	429a      	cmp	r2, r3
 8002548:	d001      	beq.n	800254e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e036      	b.n	80025bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0304 	and.w	r3, r3, #4
 8002556:	2b00      	cmp	r3, #0
 8002558:	d008      	beq.n	800256c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800255a:	4b1b      	ldr	r3, [pc, #108]	; (80025c8 <HAL_RCC_ClockConfig+0x1f0>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	4918      	ldr	r1, [pc, #96]	; (80025c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002568:	4313      	orrs	r3, r2
 800256a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0308 	and.w	r3, r3, #8
 8002574:	2b00      	cmp	r3, #0
 8002576:	d009      	beq.n	800258c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002578:	4b13      	ldr	r3, [pc, #76]	; (80025c8 <HAL_RCC_ClockConfig+0x1f0>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	4910      	ldr	r1, [pc, #64]	; (80025c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002588:	4313      	orrs	r3, r2
 800258a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800258c:	f000 f824 	bl	80025d8 <HAL_RCC_GetSysClockFreq>
 8002590:	4602      	mov	r2, r0
 8002592:	4b0d      	ldr	r3, [pc, #52]	; (80025c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	091b      	lsrs	r3, r3, #4
 8002598:	f003 030f 	and.w	r3, r3, #15
 800259c:	490b      	ldr	r1, [pc, #44]	; (80025cc <HAL_RCC_ClockConfig+0x1f4>)
 800259e:	5ccb      	ldrb	r3, [r1, r3]
 80025a0:	f003 031f 	and.w	r3, r3, #31
 80025a4:	fa22 f303 	lsr.w	r3, r2, r3
 80025a8:	4a09      	ldr	r2, [pc, #36]	; (80025d0 <HAL_RCC_ClockConfig+0x1f8>)
 80025aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025ac:	4b09      	ldr	r3, [pc, #36]	; (80025d4 <HAL_RCC_ClockConfig+0x1fc>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7fe fe45 	bl	8001240 <HAL_InitTick>
 80025b6:	4603      	mov	r3, r0
 80025b8:	72fb      	strb	r3, [r7, #11]

  return status;
 80025ba:	7afb      	ldrb	r3, [r7, #11]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40022000 	.word	0x40022000
 80025c8:	40021000 	.word	0x40021000
 80025cc:	08007c68 	.word	0x08007c68
 80025d0:	20000008 	.word	0x20000008
 80025d4:	2000000c 	.word	0x2000000c

080025d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	b089      	sub	sp, #36	; 0x24
 80025dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80025de:	2300      	movs	r3, #0
 80025e0:	61fb      	str	r3, [r7, #28]
 80025e2:	2300      	movs	r3, #0
 80025e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025e6:	4b3e      	ldr	r3, [pc, #248]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 030c 	and.w	r3, r3, #12
 80025ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025f0:	4b3b      	ldr	r3, [pc, #236]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	f003 0303 	and.w	r3, r3, #3
 80025f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d005      	beq.n	800260c <HAL_RCC_GetSysClockFreq+0x34>
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	2b0c      	cmp	r3, #12
 8002604:	d121      	bne.n	800264a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d11e      	bne.n	800264a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800260c:	4b34      	ldr	r3, [pc, #208]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0308 	and.w	r3, r3, #8
 8002614:	2b00      	cmp	r3, #0
 8002616:	d107      	bne.n	8002628 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002618:	4b31      	ldr	r3, [pc, #196]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800261a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800261e:	0a1b      	lsrs	r3, r3, #8
 8002620:	f003 030f 	and.w	r3, r3, #15
 8002624:	61fb      	str	r3, [r7, #28]
 8002626:	e005      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002628:	4b2d      	ldr	r3, [pc, #180]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	091b      	lsrs	r3, r3, #4
 800262e:	f003 030f 	and.w	r3, r3, #15
 8002632:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002634:	4a2b      	ldr	r2, [pc, #172]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800263c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10d      	bne.n	8002660 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002648:	e00a      	b.n	8002660 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	2b04      	cmp	r3, #4
 800264e:	d102      	bne.n	8002656 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002650:	4b25      	ldr	r3, [pc, #148]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002652:	61bb      	str	r3, [r7, #24]
 8002654:	e004      	b.n	8002660 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	2b08      	cmp	r3, #8
 800265a:	d101      	bne.n	8002660 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800265c:	4b23      	ldr	r3, [pc, #140]	; (80026ec <HAL_RCC_GetSysClockFreq+0x114>)
 800265e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	2b0c      	cmp	r3, #12
 8002664:	d134      	bne.n	80026d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002666:	4b1e      	ldr	r3, [pc, #120]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	f003 0303 	and.w	r3, r3, #3
 800266e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	2b02      	cmp	r3, #2
 8002674:	d003      	beq.n	800267e <HAL_RCC_GetSysClockFreq+0xa6>
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	2b03      	cmp	r3, #3
 800267a:	d003      	beq.n	8002684 <HAL_RCC_GetSysClockFreq+0xac>
 800267c:	e005      	b.n	800268a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800267e:	4b1a      	ldr	r3, [pc, #104]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002680:	617b      	str	r3, [r7, #20]
      break;
 8002682:	e005      	b.n	8002690 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002684:	4b19      	ldr	r3, [pc, #100]	; (80026ec <HAL_RCC_GetSysClockFreq+0x114>)
 8002686:	617b      	str	r3, [r7, #20]
      break;
 8002688:	e002      	b.n	8002690 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	617b      	str	r3, [r7, #20]
      break;
 800268e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002690:	4b13      	ldr	r3, [pc, #76]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	091b      	lsrs	r3, r3, #4
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	3301      	adds	r3, #1
 800269c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800269e:	4b10      	ldr	r3, [pc, #64]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	0a1b      	lsrs	r3, r3, #8
 80026a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	fb03 f202 	mul.w	r2, r3, r2
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026b6:	4b0a      	ldr	r3, [pc, #40]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	0e5b      	lsrs	r3, r3, #25
 80026bc:	f003 0303 	and.w	r3, r3, #3
 80026c0:	3301      	adds	r3, #1
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80026d0:	69bb      	ldr	r3, [r7, #24]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3724      	adds	r7, #36	; 0x24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	40021000 	.word	0x40021000
 80026e4:	08007c80 	.word	0x08007c80
 80026e8:	00f42400 	.word	0x00f42400
 80026ec:	007a1200 	.word	0x007a1200

080026f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026f4:	4b03      	ldr	r3, [pc, #12]	; (8002704 <HAL_RCC_GetHCLKFreq+0x14>)
 80026f6:	681b      	ldr	r3, [r3, #0]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	20000008 	.word	0x20000008

08002708 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800270c:	f7ff fff0 	bl	80026f0 <HAL_RCC_GetHCLKFreq>
 8002710:	4602      	mov	r2, r0
 8002712:	4b06      	ldr	r3, [pc, #24]	; (800272c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	0a1b      	lsrs	r3, r3, #8
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	4904      	ldr	r1, [pc, #16]	; (8002730 <HAL_RCC_GetPCLK1Freq+0x28>)
 800271e:	5ccb      	ldrb	r3, [r1, r3]
 8002720:	f003 031f 	and.w	r3, r3, #31
 8002724:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002728:	4618      	mov	r0, r3
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40021000 	.word	0x40021000
 8002730:	08007c78 	.word	0x08007c78

08002734 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002738:	f7ff ffda 	bl	80026f0 <HAL_RCC_GetHCLKFreq>
 800273c:	4602      	mov	r2, r0
 800273e:	4b06      	ldr	r3, [pc, #24]	; (8002758 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	0adb      	lsrs	r3, r3, #11
 8002744:	f003 0307 	and.w	r3, r3, #7
 8002748:	4904      	ldr	r1, [pc, #16]	; (800275c <HAL_RCC_GetPCLK2Freq+0x28>)
 800274a:	5ccb      	ldrb	r3, [r1, r3]
 800274c:	f003 031f 	and.w	r3, r3, #31
 8002750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002754:	4618      	mov	r0, r3
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40021000 	.word	0x40021000
 800275c:	08007c78 	.word	0x08007c78

08002760 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	220f      	movs	r2, #15
 800276e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002770:	4b12      	ldr	r3, [pc, #72]	; (80027bc <HAL_RCC_GetClockConfig+0x5c>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f003 0203 	and.w	r2, r3, #3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800277c:	4b0f      	ldr	r3, [pc, #60]	; (80027bc <HAL_RCC_GetClockConfig+0x5c>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002788:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <HAL_RCC_GetClockConfig+0x5c>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002794:	4b09      	ldr	r3, [pc, #36]	; (80027bc <HAL_RCC_GetClockConfig+0x5c>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	08db      	lsrs	r3, r3, #3
 800279a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80027a2:	4b07      	ldr	r3, [pc, #28]	; (80027c0 <HAL_RCC_GetClockConfig+0x60>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0207 	and.w	r2, r3, #7
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	601a      	str	r2, [r3, #0]
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	40021000 	.word	0x40021000
 80027c0:	40022000 	.word	0x40022000

080027c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027cc:	2300      	movs	r3, #0
 80027ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027d0:	4b2a      	ldr	r3, [pc, #168]	; (800287c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d003      	beq.n	80027e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80027dc:	f7ff f9bc 	bl	8001b58 <HAL_PWREx_GetVoltageRange>
 80027e0:	6178      	str	r0, [r7, #20]
 80027e2:	e014      	b.n	800280e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80027e4:	4b25      	ldr	r3, [pc, #148]	; (800287c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e8:	4a24      	ldr	r2, [pc, #144]	; (800287c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ee:	6593      	str	r3, [r2, #88]	; 0x58
 80027f0:	4b22      	ldr	r3, [pc, #136]	; (800287c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f8:	60fb      	str	r3, [r7, #12]
 80027fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80027fc:	f7ff f9ac 	bl	8001b58 <HAL_PWREx_GetVoltageRange>
 8002800:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002802:	4b1e      	ldr	r3, [pc, #120]	; (800287c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002806:	4a1d      	ldr	r2, [pc, #116]	; (800287c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002808:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800280c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002814:	d10b      	bne.n	800282e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b80      	cmp	r3, #128	; 0x80
 800281a:	d919      	bls.n	8002850 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2ba0      	cmp	r3, #160	; 0xa0
 8002820:	d902      	bls.n	8002828 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002822:	2302      	movs	r3, #2
 8002824:	613b      	str	r3, [r7, #16]
 8002826:	e013      	b.n	8002850 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002828:	2301      	movs	r3, #1
 800282a:	613b      	str	r3, [r7, #16]
 800282c:	e010      	b.n	8002850 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2b80      	cmp	r3, #128	; 0x80
 8002832:	d902      	bls.n	800283a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002834:	2303      	movs	r3, #3
 8002836:	613b      	str	r3, [r7, #16]
 8002838:	e00a      	b.n	8002850 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2b80      	cmp	r3, #128	; 0x80
 800283e:	d102      	bne.n	8002846 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002840:	2302      	movs	r3, #2
 8002842:	613b      	str	r3, [r7, #16]
 8002844:	e004      	b.n	8002850 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b70      	cmp	r3, #112	; 0x70
 800284a:	d101      	bne.n	8002850 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800284c:	2301      	movs	r3, #1
 800284e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002850:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f023 0207 	bic.w	r2, r3, #7
 8002858:	4909      	ldr	r1, [pc, #36]	; (8002880 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	4313      	orrs	r3, r2
 800285e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002860:	4b07      	ldr	r3, [pc, #28]	; (8002880 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	429a      	cmp	r2, r3
 800286c:	d001      	beq.n	8002872 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e000      	b.n	8002874 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40021000 	.word	0x40021000
 8002880:	40022000 	.word	0x40022000

08002884 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800288c:	2300      	movs	r3, #0
 800288e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002890:	2300      	movs	r3, #0
 8002892:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800289c:	2b00      	cmp	r3, #0
 800289e:	d041      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028a8:	d02a      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80028aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028ae:	d824      	bhi.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80028b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028b4:	d008      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80028b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028ba:	d81e      	bhi.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00a      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80028c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028c4:	d010      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80028c6:	e018      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028c8:	4b86      	ldr	r3, [pc, #536]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	4a85      	ldr	r2, [pc, #532]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028d4:	e015      	b.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	3304      	adds	r3, #4
 80028da:	2100      	movs	r1, #0
 80028dc:	4618      	mov	r0, r3
 80028de:	f000 fabb 	bl	8002e58 <RCCEx_PLLSAI1_Config>
 80028e2:	4603      	mov	r3, r0
 80028e4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028e6:	e00c      	b.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3320      	adds	r3, #32
 80028ec:	2100      	movs	r1, #0
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 fba6 	bl	8003040 <RCCEx_PLLSAI2_Config>
 80028f4:	4603      	mov	r3, r0
 80028f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028f8:	e003      	b.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	74fb      	strb	r3, [r7, #19]
      break;
 80028fe:	e000      	b.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002900:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002902:	7cfb      	ldrb	r3, [r7, #19]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10b      	bne.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002908:	4b76      	ldr	r3, [pc, #472]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800290a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002916:	4973      	ldr	r1, [pc, #460]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002918:	4313      	orrs	r3, r2
 800291a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800291e:	e001      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002920:	7cfb      	ldrb	r3, [r7, #19]
 8002922:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d041      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002934:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002938:	d02a      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800293a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800293e:	d824      	bhi.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002940:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002944:	d008      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002946:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800294a:	d81e      	bhi.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800294c:	2b00      	cmp	r3, #0
 800294e:	d00a      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002950:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002954:	d010      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002956:	e018      	b.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002958:	4b62      	ldr	r3, [pc, #392]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	4a61      	ldr	r2, [pc, #388]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800295e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002962:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002964:	e015      	b.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	3304      	adds	r3, #4
 800296a:	2100      	movs	r1, #0
 800296c:	4618      	mov	r0, r3
 800296e:	f000 fa73 	bl	8002e58 <RCCEx_PLLSAI1_Config>
 8002972:	4603      	mov	r3, r0
 8002974:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002976:	e00c      	b.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3320      	adds	r3, #32
 800297c:	2100      	movs	r1, #0
 800297e:	4618      	mov	r0, r3
 8002980:	f000 fb5e 	bl	8003040 <RCCEx_PLLSAI2_Config>
 8002984:	4603      	mov	r3, r0
 8002986:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002988:	e003      	b.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	74fb      	strb	r3, [r7, #19]
      break;
 800298e:	e000      	b.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002990:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002992:	7cfb      	ldrb	r3, [r7, #19]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d10b      	bne.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002998:	4b52      	ldr	r3, [pc, #328]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800299a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029a6:	494f      	ldr	r1, [pc, #316]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80029ae:	e001      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029b0:	7cfb      	ldrb	r3, [r7, #19]
 80029b2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 80a0 	beq.w	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029c2:	2300      	movs	r3, #0
 80029c4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029c6:	4b47      	ldr	r3, [pc, #284]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80029d2:	2301      	movs	r3, #1
 80029d4:	e000      	b.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80029d6:	2300      	movs	r3, #0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00d      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029dc:	4b41      	ldr	r3, [pc, #260]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e0:	4a40      	ldr	r2, [pc, #256]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e6:	6593      	str	r3, [r2, #88]	; 0x58
 80029e8:	4b3e      	ldr	r3, [pc, #248]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f0:	60bb      	str	r3, [r7, #8]
 80029f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029f4:	2301      	movs	r3, #1
 80029f6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029f8:	4b3b      	ldr	r3, [pc, #236]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a3a      	ldr	r2, [pc, #232]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a04:	f7fe fdc8 	bl	8001598 <HAL_GetTick>
 8002a08:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a0a:	e009      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a0c:	f7fe fdc4 	bl	8001598 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d902      	bls.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	74fb      	strb	r3, [r7, #19]
        break;
 8002a1e:	e005      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a20:	4b31      	ldr	r3, [pc, #196]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d0ef      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002a2c:	7cfb      	ldrb	r3, [r7, #19]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d15c      	bne.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a32:	4b2c      	ldr	r3, [pc, #176]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a3c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d01f      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d019      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a50:	4b24      	ldr	r3, [pc, #144]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a5a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a5c:	4b21      	ldr	r3, [pc, #132]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a62:	4a20      	ldr	r2, [pc, #128]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a6c:	4b1d      	ldr	r3, [pc, #116]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a72:	4a1c      	ldr	r2, [pc, #112]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a7c:	4a19      	ldr	r2, [pc, #100]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d016      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8e:	f7fe fd83 	bl	8001598 <HAL_GetTick>
 8002a92:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a94:	e00b      	b.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a96:	f7fe fd7f 	bl	8001598 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d902      	bls.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	74fb      	strb	r3, [r7, #19]
            break;
 8002aac:	e006      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aae:	4b0d      	ldr	r3, [pc, #52]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d0ec      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002abc:	7cfb      	ldrb	r3, [r7, #19]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10c      	bne.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ac2:	4b08      	ldr	r3, [pc, #32]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ad2:	4904      	ldr	r1, [pc, #16]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ada:	e009      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002adc:	7cfb      	ldrb	r3, [r7, #19]
 8002ade:	74bb      	strb	r3, [r7, #18]
 8002ae0:	e006      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002ae2:	bf00      	nop
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aec:	7cfb      	ldrb	r3, [r7, #19]
 8002aee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002af0:	7c7b      	ldrb	r3, [r7, #17]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d105      	bne.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002af6:	4b9e      	ldr	r3, [pc, #632]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afa:	4a9d      	ldr	r2, [pc, #628]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b00:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00a      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b0e:	4b98      	ldr	r3, [pc, #608]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b14:	f023 0203 	bic.w	r2, r3, #3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1c:	4994      	ldr	r1, [pc, #592]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00a      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b30:	4b8f      	ldr	r3, [pc, #572]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b36:	f023 020c 	bic.w	r2, r3, #12
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3e:	498c      	ldr	r1, [pc, #560]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0304 	and.w	r3, r3, #4
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00a      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b52:	4b87      	ldr	r3, [pc, #540]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b58:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b60:	4983      	ldr	r1, [pc, #524]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0308 	and.w	r3, r3, #8
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00a      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b74:	4b7e      	ldr	r3, [pc, #504]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b82:	497b      	ldr	r1, [pc, #492]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0310 	and.w	r3, r3, #16
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00a      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b96:	4b76      	ldr	r3, [pc, #472]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ba4:	4972      	ldr	r1, [pc, #456]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0320 	and.w	r3, r3, #32
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00a      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002bb8:	4b6d      	ldr	r3, [pc, #436]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bbe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc6:	496a      	ldr	r1, [pc, #424]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00a      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002bda:	4b65      	ldr	r3, [pc, #404]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be8:	4961      	ldr	r1, [pc, #388]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00a      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002bfc:	4b5c      	ldr	r3, [pc, #368]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c0a:	4959      	ldr	r1, [pc, #356]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00a      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c1e:	4b54      	ldr	r3, [pc, #336]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c24:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c2c:	4950      	ldr	r1, [pc, #320]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00a      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c40:	4b4b      	ldr	r3, [pc, #300]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c46:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4e:	4948      	ldr	r1, [pc, #288]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00a      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c62:	4b43      	ldr	r3, [pc, #268]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c70:	493f      	ldr	r1, [pc, #252]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d028      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c84:	4b3a      	ldr	r3, [pc, #232]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c92:	4937      	ldr	r1, [pc, #220]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ca2:	d106      	bne.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ca4:	4b32      	ldr	r3, [pc, #200]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	4a31      	ldr	r2, [pc, #196]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002caa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cae:	60d3      	str	r3, [r2, #12]
 8002cb0:	e011      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cb6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cba:	d10c      	bne.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3304      	adds	r3, #4
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f000 f8c8 	bl	8002e58 <RCCEx_PLLSAI1_Config>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ccc:	7cfb      	ldrb	r3, [r7, #19]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002cd2:	7cfb      	ldrb	r3, [r7, #19]
 8002cd4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d028      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ce2:	4b23      	ldr	r3, [pc, #140]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf0:	491f      	ldr	r1, [pc, #124]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d00:	d106      	bne.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d02:	4b1b      	ldr	r3, [pc, #108]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	4a1a      	ldr	r2, [pc, #104]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d0c:	60d3      	str	r3, [r2, #12]
 8002d0e:	e011      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d18:	d10c      	bne.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	2101      	movs	r1, #1
 8002d20:	4618      	mov	r0, r3
 8002d22:	f000 f899 	bl	8002e58 <RCCEx_PLLSAI1_Config>
 8002d26:	4603      	mov	r3, r0
 8002d28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d2a:	7cfb      	ldrb	r3, [r7, #19]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002d30:	7cfb      	ldrb	r3, [r7, #19]
 8002d32:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d02b      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d40:	4b0b      	ldr	r3, [pc, #44]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d4e:	4908      	ldr	r1, [pc, #32]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d5e:	d109      	bne.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d60:	4b03      	ldr	r3, [pc, #12]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	4a02      	ldr	r2, [pc, #8]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d6a:	60d3      	str	r3, [r2, #12]
 8002d6c:	e014      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002d6e:	bf00      	nop
 8002d70:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d7c:	d10c      	bne.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	3304      	adds	r3, #4
 8002d82:	2101      	movs	r1, #1
 8002d84:	4618      	mov	r0, r3
 8002d86:	f000 f867 	bl	8002e58 <RCCEx_PLLSAI1_Config>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d8e:	7cfb      	ldrb	r3, [r7, #19]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002d94:	7cfb      	ldrb	r3, [r7, #19]
 8002d96:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d02f      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002da4:	4b2b      	ldr	r3, [pc, #172]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002daa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002db2:	4928      	ldr	r1, [pc, #160]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dc2:	d10d      	bne.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	3304      	adds	r3, #4
 8002dc8:	2102      	movs	r1, #2
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f000 f844 	bl	8002e58 <RCCEx_PLLSAI1_Config>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dd4:	7cfb      	ldrb	r3, [r7, #19]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d014      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002dda:	7cfb      	ldrb	r3, [r7, #19]
 8002ddc:	74bb      	strb	r3, [r7, #18]
 8002dde:	e011      	b.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002de4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002de8:	d10c      	bne.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	3320      	adds	r3, #32
 8002dee:	2102      	movs	r1, #2
 8002df0:	4618      	mov	r0, r3
 8002df2:	f000 f925 	bl	8003040 <RCCEx_PLLSAI2_Config>
 8002df6:	4603      	mov	r3, r0
 8002df8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dfa:	7cfb      	ldrb	r3, [r7, #19]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002e00:	7cfb      	ldrb	r3, [r7, #19]
 8002e02:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00a      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e10:	4b10      	ldr	r3, [pc, #64]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e16:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e1e:	490d      	ldr	r1, [pc, #52]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00b      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e32:	4b08      	ldr	r3, [pc, #32]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e42:	4904      	ldr	r1, [pc, #16]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e4a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3718      	adds	r7, #24
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40021000 	.word	0x40021000

08002e58 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e62:	2300      	movs	r3, #0
 8002e64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e66:	4b75      	ldr	r3, [pc, #468]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	f003 0303 	and.w	r3, r3, #3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d018      	beq.n	8002ea4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e72:	4b72      	ldr	r3, [pc, #456]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	f003 0203 	and.w	r2, r3, #3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d10d      	bne.n	8002e9e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
       ||
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d009      	beq.n	8002e9e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002e8a:	4b6c      	ldr	r3, [pc, #432]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	091b      	lsrs	r3, r3, #4
 8002e90:	f003 0307 	and.w	r3, r3, #7
 8002e94:	1c5a      	adds	r2, r3, #1
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
       ||
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d047      	beq.n	8002f2e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	73fb      	strb	r3, [r7, #15]
 8002ea2:	e044      	b.n	8002f2e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2b03      	cmp	r3, #3
 8002eaa:	d018      	beq.n	8002ede <RCCEx_PLLSAI1_Config+0x86>
 8002eac:	2b03      	cmp	r3, #3
 8002eae:	d825      	bhi.n	8002efc <RCCEx_PLLSAI1_Config+0xa4>
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d002      	beq.n	8002eba <RCCEx_PLLSAI1_Config+0x62>
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d009      	beq.n	8002ecc <RCCEx_PLLSAI1_Config+0x74>
 8002eb8:	e020      	b.n	8002efc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002eba:	4b60      	ldr	r3, [pc, #384]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d11d      	bne.n	8002f02 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eca:	e01a      	b.n	8002f02 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ecc:	4b5b      	ldr	r3, [pc, #364]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d116      	bne.n	8002f06 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002edc:	e013      	b.n	8002f06 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ede:	4b57      	ldr	r3, [pc, #348]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10f      	bne.n	8002f0a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002eea:	4b54      	ldr	r3, [pc, #336]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d109      	bne.n	8002f0a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002efa:	e006      	b.n	8002f0a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	73fb      	strb	r3, [r7, #15]
      break;
 8002f00:	e004      	b.n	8002f0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f02:	bf00      	nop
 8002f04:	e002      	b.n	8002f0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f06:	bf00      	nop
 8002f08:	e000      	b.n	8002f0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f0a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10d      	bne.n	8002f2e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f12:	4b4a      	ldr	r3, [pc, #296]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6819      	ldr	r1, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	3b01      	subs	r3, #1
 8002f24:	011b      	lsls	r3, r3, #4
 8002f26:	430b      	orrs	r3, r1
 8002f28:	4944      	ldr	r1, [pc, #272]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d17d      	bne.n	8003030 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f34:	4b41      	ldr	r3, [pc, #260]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a40      	ldr	r2, [pc, #256]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f40:	f7fe fb2a 	bl	8001598 <HAL_GetTick>
 8002f44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f46:	e009      	b.n	8002f5c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f48:	f7fe fb26 	bl	8001598 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d902      	bls.n	8002f5c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	73fb      	strb	r3, [r7, #15]
        break;
 8002f5a:	e005      	b.n	8002f68 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f5c:	4b37      	ldr	r3, [pc, #220]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1ef      	bne.n	8002f48 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d160      	bne.n	8003030 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d111      	bne.n	8002f98 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f74:	4b31      	ldr	r3, [pc, #196]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	6892      	ldr	r2, [r2, #8]
 8002f84:	0211      	lsls	r1, r2, #8
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	68d2      	ldr	r2, [r2, #12]
 8002f8a:	0912      	lsrs	r2, r2, #4
 8002f8c:	0452      	lsls	r2, r2, #17
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	492a      	ldr	r1, [pc, #168]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	610b      	str	r3, [r1, #16]
 8002f96:	e027      	b.n	8002fe8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d112      	bne.n	8002fc4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f9e:	4b27      	ldr	r3, [pc, #156]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002fa6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6892      	ldr	r2, [r2, #8]
 8002fae:	0211      	lsls	r1, r2, #8
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	6912      	ldr	r2, [r2, #16]
 8002fb4:	0852      	lsrs	r2, r2, #1
 8002fb6:	3a01      	subs	r2, #1
 8002fb8:	0552      	lsls	r2, r2, #21
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	491f      	ldr	r1, [pc, #124]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	610b      	str	r3, [r1, #16]
 8002fc2:	e011      	b.n	8002fe8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fc4:	4b1d      	ldr	r3, [pc, #116]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002fcc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6892      	ldr	r2, [r2, #8]
 8002fd4:	0211      	lsls	r1, r2, #8
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	6952      	ldr	r2, [r2, #20]
 8002fda:	0852      	lsrs	r2, r2, #1
 8002fdc:	3a01      	subs	r2, #1
 8002fde:	0652      	lsls	r2, r2, #25
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	4916      	ldr	r1, [pc, #88]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002fe8:	4b14      	ldr	r3, [pc, #80]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a13      	ldr	r2, [pc, #76]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ff2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff4:	f7fe fad0 	bl	8001598 <HAL_GetTick>
 8002ff8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ffa:	e009      	b.n	8003010 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ffc:	f7fe facc 	bl	8001598 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d902      	bls.n	8003010 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	73fb      	strb	r3, [r7, #15]
          break;
 800300e:	e005      	b.n	800301c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003010:	4b0a      	ldr	r3, [pc, #40]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0ef      	beq.n	8002ffc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800301c:	7bfb      	ldrb	r3, [r7, #15]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d106      	bne.n	8003030 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003022:	4b06      	ldr	r3, [pc, #24]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003024:	691a      	ldr	r2, [r3, #16]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	4904      	ldr	r1, [pc, #16]	; (800303c <RCCEx_PLLSAI1_Config+0x1e4>)
 800302c:	4313      	orrs	r3, r2
 800302e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003030:	7bfb      	ldrb	r3, [r7, #15]
}
 8003032:	4618      	mov	r0, r3
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	40021000 	.word	0x40021000

08003040 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800304a:	2300      	movs	r3, #0
 800304c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800304e:	4b6a      	ldr	r3, [pc, #424]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d018      	beq.n	800308c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800305a:	4b67      	ldr	r3, [pc, #412]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	f003 0203 	and.w	r2, r3, #3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	429a      	cmp	r2, r3
 8003068:	d10d      	bne.n	8003086 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
       ||
 800306e:	2b00      	cmp	r3, #0
 8003070:	d009      	beq.n	8003086 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003072:	4b61      	ldr	r3, [pc, #388]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	091b      	lsrs	r3, r3, #4
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	1c5a      	adds	r2, r3, #1
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
       ||
 8003082:	429a      	cmp	r2, r3
 8003084:	d047      	beq.n	8003116 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	73fb      	strb	r3, [r7, #15]
 800308a:	e044      	b.n	8003116 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2b03      	cmp	r3, #3
 8003092:	d018      	beq.n	80030c6 <RCCEx_PLLSAI2_Config+0x86>
 8003094:	2b03      	cmp	r3, #3
 8003096:	d825      	bhi.n	80030e4 <RCCEx_PLLSAI2_Config+0xa4>
 8003098:	2b01      	cmp	r3, #1
 800309a:	d002      	beq.n	80030a2 <RCCEx_PLLSAI2_Config+0x62>
 800309c:	2b02      	cmp	r3, #2
 800309e:	d009      	beq.n	80030b4 <RCCEx_PLLSAI2_Config+0x74>
 80030a0:	e020      	b.n	80030e4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030a2:	4b55      	ldr	r3, [pc, #340]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d11d      	bne.n	80030ea <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030b2:	e01a      	b.n	80030ea <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030b4:	4b50      	ldr	r3, [pc, #320]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d116      	bne.n	80030ee <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030c4:	e013      	b.n	80030ee <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030c6:	4b4c      	ldr	r3, [pc, #304]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10f      	bne.n	80030f2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030d2:	4b49      	ldr	r3, [pc, #292]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d109      	bne.n	80030f2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030e2:	e006      	b.n	80030f2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	73fb      	strb	r3, [r7, #15]
      break;
 80030e8:	e004      	b.n	80030f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030ea:	bf00      	nop
 80030ec:	e002      	b.n	80030f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030ee:	bf00      	nop
 80030f0:	e000      	b.n	80030f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80030f4:	7bfb      	ldrb	r3, [r7, #15]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10d      	bne.n	8003116 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80030fa:	4b3f      	ldr	r3, [pc, #252]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6819      	ldr	r1, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	3b01      	subs	r3, #1
 800310c:	011b      	lsls	r3, r3, #4
 800310e:	430b      	orrs	r3, r1
 8003110:	4939      	ldr	r1, [pc, #228]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003112:	4313      	orrs	r3, r2
 8003114:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003116:	7bfb      	ldrb	r3, [r7, #15]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d167      	bne.n	80031ec <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800311c:	4b36      	ldr	r3, [pc, #216]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a35      	ldr	r2, [pc, #212]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003122:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003126:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003128:	f7fe fa36 	bl	8001598 <HAL_GetTick>
 800312c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800312e:	e009      	b.n	8003144 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003130:	f7fe fa32 	bl	8001598 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d902      	bls.n	8003144 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	73fb      	strb	r3, [r7, #15]
        break;
 8003142:	e005      	b.n	8003150 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003144:	4b2c      	ldr	r3, [pc, #176]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1ef      	bne.n	8003130 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003150:	7bfb      	ldrb	r3, [r7, #15]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d14a      	bne.n	80031ec <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d111      	bne.n	8003180 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800315c:	4b26      	ldr	r3, [pc, #152]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003164:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	6892      	ldr	r2, [r2, #8]
 800316c:	0211      	lsls	r1, r2, #8
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	68d2      	ldr	r2, [r2, #12]
 8003172:	0912      	lsrs	r2, r2, #4
 8003174:	0452      	lsls	r2, r2, #17
 8003176:	430a      	orrs	r2, r1
 8003178:	491f      	ldr	r1, [pc, #124]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800317a:	4313      	orrs	r3, r2
 800317c:	614b      	str	r3, [r1, #20]
 800317e:	e011      	b.n	80031a4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003180:	4b1d      	ldr	r3, [pc, #116]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003188:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	6892      	ldr	r2, [r2, #8]
 8003190:	0211      	lsls	r1, r2, #8
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	6912      	ldr	r2, [r2, #16]
 8003196:	0852      	lsrs	r2, r2, #1
 8003198:	3a01      	subs	r2, #1
 800319a:	0652      	lsls	r2, r2, #25
 800319c:	430a      	orrs	r2, r1
 800319e:	4916      	ldr	r1, [pc, #88]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80031a4:	4b14      	ldr	r3, [pc, #80]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a13      	ldr	r2, [pc, #76]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b0:	f7fe f9f2 	bl	8001598 <HAL_GetTick>
 80031b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031b6:	e009      	b.n	80031cc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80031b8:	f7fe f9ee 	bl	8001598 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d902      	bls.n	80031cc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	73fb      	strb	r3, [r7, #15]
          break;
 80031ca:	e005      	b.n	80031d8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031cc:	4b0a      	ldr	r3, [pc, #40]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d0ef      	beq.n	80031b8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80031d8:	7bfb      	ldrb	r3, [r7, #15]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d106      	bne.n	80031ec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80031de:	4b06      	ldr	r3, [pc, #24]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031e0:	695a      	ldr	r2, [r3, #20]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	4904      	ldr	r1, [pc, #16]	; (80031f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80031ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	40021000 	.word	0x40021000

080031fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e095      	b.n	800333a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003212:	2b00      	cmp	r3, #0
 8003214:	d108      	bne.n	8003228 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800321e:	d009      	beq.n	8003234 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	61da      	str	r2, [r3, #28]
 8003226:	e005      	b.n	8003234 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d106      	bne.n	8003254 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7fd ff6c 	bl	800112c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2202      	movs	r2, #2
 8003258:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800326a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003274:	d902      	bls.n	800327c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003276:	2300      	movs	r3, #0
 8003278:	60fb      	str	r3, [r7, #12]
 800327a:	e002      	b.n	8003282 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800327c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003280:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800328a:	d007      	beq.n	800329c <HAL_SPI_Init+0xa0>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003294:	d002      	beq.n	800329c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80032ac:	431a      	orrs	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	431a      	orrs	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	69db      	ldr	r3, [r3, #28]
 80032d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032d4:	431a      	orrs	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032de:	ea42 0103 	orr.w	r1, r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	0c1b      	lsrs	r3, r3, #16
 80032f8:	f003 0204 	and.w	r2, r3, #4
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	f003 0310 	and.w	r3, r3, #16
 8003304:	431a      	orrs	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800330a:	f003 0308 	and.w	r3, r3, #8
 800330e:	431a      	orrs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003318:	ea42 0103 	orr.w	r1, r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	430a      	orrs	r2, r1
 8003328:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b088      	sub	sp, #32
 8003346:	af00      	add	r7, sp, #0
 8003348:	60f8      	str	r0, [r7, #12]
 800334a:	60b9      	str	r1, [r7, #8]
 800334c:	603b      	str	r3, [r7, #0]
 800334e:	4613      	mov	r3, r2
 8003350:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003352:	2300      	movs	r3, #0
 8003354:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800335c:	2b01      	cmp	r3, #1
 800335e:	d101      	bne.n	8003364 <HAL_SPI_Transmit+0x22>
 8003360:	2302      	movs	r3, #2
 8003362:	e158      	b.n	8003616 <HAL_SPI_Transmit+0x2d4>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800336c:	f7fe f914 	bl	8001598 <HAL_GetTick>
 8003370:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003372:	88fb      	ldrh	r3, [r7, #6]
 8003374:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b01      	cmp	r3, #1
 8003380:	d002      	beq.n	8003388 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003382:	2302      	movs	r3, #2
 8003384:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003386:	e13d      	b.n	8003604 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d002      	beq.n	8003394 <HAL_SPI_Transmit+0x52>
 800338e:	88fb      	ldrh	r3, [r7, #6]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d102      	bne.n	800339a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003398:	e134      	b.n	8003604 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2203      	movs	r2, #3
 800339e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	88fa      	ldrh	r2, [r7, #6]
 80033b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	88fa      	ldrh	r2, [r7, #6]
 80033b8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033e4:	d10f      	bne.n	8003406 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003404:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003410:	2b40      	cmp	r3, #64	; 0x40
 8003412:	d007      	beq.n	8003424 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003422:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800342c:	d94b      	bls.n	80034c6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d002      	beq.n	800343c <HAL_SPI_Transmit+0xfa>
 8003436:	8afb      	ldrh	r3, [r7, #22]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d13e      	bne.n	80034ba <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003440:	881a      	ldrh	r2, [r3, #0]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344c:	1c9a      	adds	r2, r3, #2
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003456:	b29b      	uxth	r3, r3
 8003458:	3b01      	subs	r3, #1
 800345a:	b29a      	uxth	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003460:	e02b      	b.n	80034ba <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b02      	cmp	r3, #2
 800346e:	d112      	bne.n	8003496 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003474:	881a      	ldrh	r2, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003480:	1c9a      	adds	r2, r3, #2
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800348a:	b29b      	uxth	r3, r3
 800348c:	3b01      	subs	r3, #1
 800348e:	b29a      	uxth	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003494:	e011      	b.n	80034ba <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003496:	f7fe f87f 	bl	8001598 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d803      	bhi.n	80034ae <HAL_SPI_Transmit+0x16c>
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034ac:	d102      	bne.n	80034b4 <HAL_SPI_Transmit+0x172>
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d102      	bne.n	80034ba <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80034b8:	e0a4      	b.n	8003604 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034be:	b29b      	uxth	r3, r3
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1ce      	bne.n	8003462 <HAL_SPI_Transmit+0x120>
 80034c4:	e07c      	b.n	80035c0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d002      	beq.n	80034d4 <HAL_SPI_Transmit+0x192>
 80034ce:	8afb      	ldrh	r3, [r7, #22]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d170      	bne.n	80035b6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034d8:	b29b      	uxth	r3, r3
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d912      	bls.n	8003504 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e2:	881a      	ldrh	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ee:	1c9a      	adds	r2, r3, #2
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	3b02      	subs	r3, #2
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003502:	e058      	b.n	80035b6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	330c      	adds	r3, #12
 800350e:	7812      	ldrb	r2, [r2, #0]
 8003510:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003516:	1c5a      	adds	r2, r3, #1
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003520:	b29b      	uxth	r3, r3
 8003522:	3b01      	subs	r3, #1
 8003524:	b29a      	uxth	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800352a:	e044      	b.n	80035b6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b02      	cmp	r3, #2
 8003538:	d12b      	bne.n	8003592 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800353e:	b29b      	uxth	r3, r3
 8003540:	2b01      	cmp	r3, #1
 8003542:	d912      	bls.n	800356a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003548:	881a      	ldrh	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003554:	1c9a      	adds	r2, r3, #2
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800355e:	b29b      	uxth	r3, r3
 8003560:	3b02      	subs	r3, #2
 8003562:	b29a      	uxth	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003568:	e025      	b.n	80035b6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	330c      	adds	r3, #12
 8003574:	7812      	ldrb	r2, [r2, #0]
 8003576:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357c:	1c5a      	adds	r2, r3, #1
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003586:	b29b      	uxth	r3, r3
 8003588:	3b01      	subs	r3, #1
 800358a:	b29a      	uxth	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003590:	e011      	b.n	80035b6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003592:	f7fe f801 	bl	8001598 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d803      	bhi.n	80035aa <HAL_SPI_Transmit+0x268>
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035a8:	d102      	bne.n	80035b0 <HAL_SPI_Transmit+0x26e>
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d102      	bne.n	80035b6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80035b4:	e026      	b.n	8003604 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1b5      	bne.n	800352c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	6839      	ldr	r1, [r7, #0]
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f000 f949 	bl	800385c <SPI_EndRxTxTransaction>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d002      	beq.n	80035d6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2220      	movs	r2, #32
 80035d4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10a      	bne.n	80035f4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035de:	2300      	movs	r3, #0
 80035e0:	613b      	str	r3, [r7, #16]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	613b      	str	r3, [r7, #16]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	613b      	str	r3, [r7, #16]
 80035f2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d002      	beq.n	8003602 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	77fb      	strb	r3, [r7, #31]
 8003600:	e000      	b.n	8003604 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003602:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003614:	7ffb      	ldrb	r3, [r7, #31]
}
 8003616:	4618      	mov	r0, r3
 8003618:	3720      	adds	r7, #32
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
	...

08003620 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b088      	sub	sp, #32
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	603b      	str	r3, [r7, #0]
 800362c:	4613      	mov	r3, r2
 800362e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003630:	f7fd ffb2 	bl	8001598 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003638:	1a9b      	subs	r3, r3, r2
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	4413      	add	r3, r2
 800363e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003640:	f7fd ffaa 	bl	8001598 <HAL_GetTick>
 8003644:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003646:	4b39      	ldr	r3, [pc, #228]	; (800372c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	015b      	lsls	r3, r3, #5
 800364c:	0d1b      	lsrs	r3, r3, #20
 800364e:	69fa      	ldr	r2, [r7, #28]
 8003650:	fb02 f303 	mul.w	r3, r2, r3
 8003654:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003656:	e054      	b.n	8003702 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800365e:	d050      	beq.n	8003702 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003660:	f7fd ff9a 	bl	8001598 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	69fa      	ldr	r2, [r7, #28]
 800366c:	429a      	cmp	r2, r3
 800366e:	d902      	bls.n	8003676 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d13d      	bne.n	80036f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003684:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800368e:	d111      	bne.n	80036b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003698:	d004      	beq.n	80036a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036a2:	d107      	bne.n	80036b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036bc:	d10f      	bne.n	80036de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036cc:	601a      	str	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e017      	b.n	8003722 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d101      	bne.n	80036fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	3b01      	subs	r3, #1
 8003700:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	689a      	ldr	r2, [r3, #8]
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	4013      	ands	r3, r2
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	429a      	cmp	r2, r3
 8003710:	bf0c      	ite	eq
 8003712:	2301      	moveq	r3, #1
 8003714:	2300      	movne	r3, #0
 8003716:	b2db      	uxtb	r3, r3
 8003718:	461a      	mov	r2, r3
 800371a:	79fb      	ldrb	r3, [r7, #7]
 800371c:	429a      	cmp	r2, r3
 800371e:	d19b      	bne.n	8003658 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3720      	adds	r7, #32
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	20000008 	.word	0x20000008

08003730 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b08a      	sub	sp, #40	; 0x28
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
 800373c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800373e:	2300      	movs	r3, #0
 8003740:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003742:	f7fd ff29 	bl	8001598 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374a:	1a9b      	subs	r3, r3, r2
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	4413      	add	r3, r2
 8003750:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003752:	f7fd ff21 	bl	8001598 <HAL_GetTick>
 8003756:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	330c      	adds	r3, #12
 800375e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003760:	4b3d      	ldr	r3, [pc, #244]	; (8003858 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	4613      	mov	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4413      	add	r3, r2
 800376a:	00da      	lsls	r2, r3, #3
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	0d1b      	lsrs	r3, r3, #20
 8003770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003772:	fb02 f303 	mul.w	r3, r2, r3
 8003776:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003778:	e060      	b.n	800383c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003780:	d107      	bne.n	8003792 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d104      	bne.n	8003792 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	b2db      	uxtb	r3, r3
 800378e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003790:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003798:	d050      	beq.n	800383c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800379a:	f7fd fefd 	bl	8001598 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	6a3b      	ldr	r3, [r7, #32]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d902      	bls.n	80037b0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80037aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d13d      	bne.n	800382c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80037be:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037c8:	d111      	bne.n	80037ee <SPI_WaitFifoStateUntilTimeout+0xbe>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037d2:	d004      	beq.n	80037de <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037dc:	d107      	bne.n	80037ee <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037ec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037f6:	d10f      	bne.n	8003818 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003816:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e010      	b.n	800384e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003832:	2300      	movs	r3, #0
 8003834:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	3b01      	subs	r3, #1
 800383a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	689a      	ldr	r2, [r3, #8]
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	4013      	ands	r3, r2
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	429a      	cmp	r2, r3
 800384a:	d196      	bne.n	800377a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3728      	adds	r7, #40	; 0x28
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	20000008 	.word	0x20000008

0800385c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af02      	add	r7, sp, #8
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	9300      	str	r3, [sp, #0]
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	2200      	movs	r2, #0
 8003870:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f7ff ff5b 	bl	8003730 <SPI_WaitFifoStateUntilTimeout>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d007      	beq.n	8003890 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003884:	f043 0220 	orr.w	r2, r3, #32
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e027      	b.n	80038e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	9300      	str	r3, [sp, #0]
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	2200      	movs	r2, #0
 8003898:	2180      	movs	r1, #128	; 0x80
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f7ff fec0 	bl	8003620 <SPI_WaitFlagStateUntilTimeout>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d007      	beq.n	80038b6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038aa:	f043 0220 	orr.w	r2, r3, #32
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e014      	b.n	80038e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	9300      	str	r3, [sp, #0]
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	2200      	movs	r2, #0
 80038be:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	f7ff ff34 	bl	8003730 <SPI_WaitFifoStateUntilTimeout>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d007      	beq.n	80038de <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d2:	f043 0220 	orr.w	r2, r3, #32
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e000      	b.n	80038e0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e049      	b.n	800398e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d106      	bne.n	8003914 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f841 	bl	8003996 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2202      	movs	r2, #2
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	3304      	adds	r3, #4
 8003924:	4619      	mov	r1, r3
 8003926:	4610      	mov	r0, r2
 8003928:	f000 f9f8 	bl	8003d1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003996:	b480      	push	{r7}
 8003998:	b083      	sub	sp, #12
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800399e:	bf00      	nop
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
	...

080039ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d001      	beq.n	80039c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e04f      	b.n	8003a64 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2202      	movs	r2, #2
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68da      	ldr	r2, [r3, #12]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f042 0201 	orr.w	r2, r2, #1
 80039da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a23      	ldr	r2, [pc, #140]	; (8003a70 <HAL_TIM_Base_Start_IT+0xc4>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d01d      	beq.n	8003a22 <HAL_TIM_Base_Start_IT+0x76>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ee:	d018      	beq.n	8003a22 <HAL_TIM_Base_Start_IT+0x76>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a1f      	ldr	r2, [pc, #124]	; (8003a74 <HAL_TIM_Base_Start_IT+0xc8>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d013      	beq.n	8003a22 <HAL_TIM_Base_Start_IT+0x76>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a1e      	ldr	r2, [pc, #120]	; (8003a78 <HAL_TIM_Base_Start_IT+0xcc>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d00e      	beq.n	8003a22 <HAL_TIM_Base_Start_IT+0x76>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a1c      	ldr	r2, [pc, #112]	; (8003a7c <HAL_TIM_Base_Start_IT+0xd0>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d009      	beq.n	8003a22 <HAL_TIM_Base_Start_IT+0x76>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a1b      	ldr	r2, [pc, #108]	; (8003a80 <HAL_TIM_Base_Start_IT+0xd4>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d004      	beq.n	8003a22 <HAL_TIM_Base_Start_IT+0x76>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a19      	ldr	r2, [pc, #100]	; (8003a84 <HAL_TIM_Base_Start_IT+0xd8>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d115      	bne.n	8003a4e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	4b17      	ldr	r3, [pc, #92]	; (8003a88 <HAL_TIM_Base_Start_IT+0xdc>)
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2b06      	cmp	r3, #6
 8003a32:	d015      	beq.n	8003a60 <HAL_TIM_Base_Start_IT+0xb4>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a3a:	d011      	beq.n	8003a60 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f042 0201 	orr.w	r2, r2, #1
 8003a4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a4c:	e008      	b.n	8003a60 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f042 0201 	orr.w	r2, r2, #1
 8003a5c:	601a      	str	r2, [r3, #0]
 8003a5e:	e000      	b.n	8003a62 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a60:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3714      	adds	r7, #20
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr
 8003a70:	40012c00 	.word	0x40012c00
 8003a74:	40000400 	.word	0x40000400
 8003a78:	40000800 	.word	0x40000800
 8003a7c:	40000c00 	.word	0x40000c00
 8003a80:	40013400 	.word	0x40013400
 8003a84:	40014000 	.word	0x40014000
 8003a88:	00010007 	.word	0x00010007

08003a8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d122      	bne.n	8003ae8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d11b      	bne.n	8003ae8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f06f 0202 	mvn.w	r2, #2
 8003ab8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	f003 0303 	and.w	r3, r3, #3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d003      	beq.n	8003ad6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f905 	bl	8003cde <HAL_TIM_IC_CaptureCallback>
 8003ad4:	e005      	b.n	8003ae2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f8f7 	bl	8003cca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 f908 	bl	8003cf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	f003 0304 	and.w	r3, r3, #4
 8003af2:	2b04      	cmp	r3, #4
 8003af4:	d122      	bne.n	8003b3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b04      	cmp	r3, #4
 8003b02:	d11b      	bne.n	8003b3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f06f 0204 	mvn.w	r2, #4
 8003b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2202      	movs	r2, #2
 8003b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f8db 	bl	8003cde <HAL_TIM_IC_CaptureCallback>
 8003b28:	e005      	b.n	8003b36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f8cd 	bl	8003cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 f8de 	bl	8003cf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	f003 0308 	and.w	r3, r3, #8
 8003b46:	2b08      	cmp	r3, #8
 8003b48:	d122      	bne.n	8003b90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	f003 0308 	and.w	r3, r3, #8
 8003b54:	2b08      	cmp	r3, #8
 8003b56:	d11b      	bne.n	8003b90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f06f 0208 	mvn.w	r2, #8
 8003b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2204      	movs	r2, #4
 8003b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	f003 0303 	and.w	r3, r3, #3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f8b1 	bl	8003cde <HAL_TIM_IC_CaptureCallback>
 8003b7c:	e005      	b.n	8003b8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f8a3 	bl	8003cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 f8b4 	bl	8003cf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	f003 0310 	and.w	r3, r3, #16
 8003b9a:	2b10      	cmp	r3, #16
 8003b9c:	d122      	bne.n	8003be4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	f003 0310 	and.w	r3, r3, #16
 8003ba8:	2b10      	cmp	r3, #16
 8003baa:	d11b      	bne.n	8003be4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f06f 0210 	mvn.w	r2, #16
 8003bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2208      	movs	r2, #8
 8003bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f887 	bl	8003cde <HAL_TIM_IC_CaptureCallback>
 8003bd0:	e005      	b.n	8003bde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f879 	bl	8003cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 f88a 	bl	8003cf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d10e      	bne.n	8003c10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d107      	bne.n	8003c10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f06f 0201 	mvn.w	r2, #1
 8003c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7fd fa38 	bl	8001080 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c1a:	2b80      	cmp	r3, #128	; 0x80
 8003c1c:	d10e      	bne.n	8003c3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c28:	2b80      	cmp	r3, #128	; 0x80
 8003c2a:	d107      	bne.n	8003c3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f914 	bl	8003e64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c4a:	d10e      	bne.n	8003c6a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c56:	2b80      	cmp	r3, #128	; 0x80
 8003c58:	d107      	bne.n	8003c6a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f907 	bl	8003e78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c74:	2b40      	cmp	r3, #64	; 0x40
 8003c76:	d10e      	bne.n	8003c96 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c82:	2b40      	cmp	r3, #64	; 0x40
 8003c84:	d107      	bne.n	8003c96 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 f838 	bl	8003d06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	f003 0320 	and.w	r3, r3, #32
 8003ca0:	2b20      	cmp	r3, #32
 8003ca2:	d10e      	bne.n	8003cc2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f003 0320 	and.w	r3, r3, #32
 8003cae:	2b20      	cmp	r3, #32
 8003cb0:	d107      	bne.n	8003cc2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f06f 0220 	mvn.w	r2, #32
 8003cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 f8c7 	bl	8003e50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cc2:	bf00      	nop
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b083      	sub	sp, #12
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cd2:	bf00      	nop
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b083      	sub	sp, #12
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ce6:	bf00      	nop
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cfa:	bf00      	nop
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d0e:	bf00      	nop
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
	...

08003d1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a40      	ldr	r2, [pc, #256]	; (8003e30 <TIM_Base_SetConfig+0x114>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d013      	beq.n	8003d5c <TIM_Base_SetConfig+0x40>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d3a:	d00f      	beq.n	8003d5c <TIM_Base_SetConfig+0x40>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a3d      	ldr	r2, [pc, #244]	; (8003e34 <TIM_Base_SetConfig+0x118>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d00b      	beq.n	8003d5c <TIM_Base_SetConfig+0x40>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a3c      	ldr	r2, [pc, #240]	; (8003e38 <TIM_Base_SetConfig+0x11c>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d007      	beq.n	8003d5c <TIM_Base_SetConfig+0x40>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a3b      	ldr	r2, [pc, #236]	; (8003e3c <TIM_Base_SetConfig+0x120>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d003      	beq.n	8003d5c <TIM_Base_SetConfig+0x40>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a3a      	ldr	r2, [pc, #232]	; (8003e40 <TIM_Base_SetConfig+0x124>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d108      	bne.n	8003d6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a2f      	ldr	r2, [pc, #188]	; (8003e30 <TIM_Base_SetConfig+0x114>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d01f      	beq.n	8003db6 <TIM_Base_SetConfig+0x9a>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d7c:	d01b      	beq.n	8003db6 <TIM_Base_SetConfig+0x9a>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a2c      	ldr	r2, [pc, #176]	; (8003e34 <TIM_Base_SetConfig+0x118>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d017      	beq.n	8003db6 <TIM_Base_SetConfig+0x9a>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a2b      	ldr	r2, [pc, #172]	; (8003e38 <TIM_Base_SetConfig+0x11c>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d013      	beq.n	8003db6 <TIM_Base_SetConfig+0x9a>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a2a      	ldr	r2, [pc, #168]	; (8003e3c <TIM_Base_SetConfig+0x120>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d00f      	beq.n	8003db6 <TIM_Base_SetConfig+0x9a>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a29      	ldr	r2, [pc, #164]	; (8003e40 <TIM_Base_SetConfig+0x124>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d00b      	beq.n	8003db6 <TIM_Base_SetConfig+0x9a>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a28      	ldr	r2, [pc, #160]	; (8003e44 <TIM_Base_SetConfig+0x128>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d007      	beq.n	8003db6 <TIM_Base_SetConfig+0x9a>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a27      	ldr	r2, [pc, #156]	; (8003e48 <TIM_Base_SetConfig+0x12c>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d003      	beq.n	8003db6 <TIM_Base_SetConfig+0x9a>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a26      	ldr	r2, [pc, #152]	; (8003e4c <TIM_Base_SetConfig+0x130>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d108      	bne.n	8003dc8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	689a      	ldr	r2, [r3, #8]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a10      	ldr	r2, [pc, #64]	; (8003e30 <TIM_Base_SetConfig+0x114>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d00f      	beq.n	8003e14 <TIM_Base_SetConfig+0xf8>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a12      	ldr	r2, [pc, #72]	; (8003e40 <TIM_Base_SetConfig+0x124>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d00b      	beq.n	8003e14 <TIM_Base_SetConfig+0xf8>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a11      	ldr	r2, [pc, #68]	; (8003e44 <TIM_Base_SetConfig+0x128>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d007      	beq.n	8003e14 <TIM_Base_SetConfig+0xf8>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a10      	ldr	r2, [pc, #64]	; (8003e48 <TIM_Base_SetConfig+0x12c>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d003      	beq.n	8003e14 <TIM_Base_SetConfig+0xf8>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a0f      	ldr	r2, [pc, #60]	; (8003e4c <TIM_Base_SetConfig+0x130>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d103      	bne.n	8003e1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	691a      	ldr	r2, [r3, #16]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	615a      	str	r2, [r3, #20]
}
 8003e22:	bf00      	nop
 8003e24:	3714      	adds	r7, #20
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	40012c00 	.word	0x40012c00
 8003e34:	40000400 	.word	0x40000400
 8003e38:	40000800 	.word	0x40000800
 8003e3c:	40000c00 	.word	0x40000c00
 8003e40:	40013400 	.word	0x40013400
 8003e44:	40014000 	.word	0x40014000
 8003e48:	40014400 	.word	0x40014400
 8003e4c:	40014800 	.word	0x40014800

08003e50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e040      	b.n	8003f20 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d106      	bne.n	8003eb4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7fd fab8 	bl	8001424 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2224      	movs	r2, #36	; 0x24
 8003eb8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 0201 	bic.w	r2, r2, #1
 8003ec8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f82c 	bl	8003f28 <UART_SetConfig>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d101      	bne.n	8003eda <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e022      	b.n	8003f20 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d002      	beq.n	8003ee8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 fad8 	bl	8004498 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	685a      	ldr	r2, [r3, #4]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ef6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689a      	ldr	r2, [r3, #8]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 0201 	orr.w	r2, r2, #1
 8003f16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 fb5f 	bl	80045dc <UART_CheckIdleState>
 8003f1e:	4603      	mov	r3, r0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3708      	adds	r7, #8
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f2c:	b08a      	sub	sp, #40	; 0x28
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f32:	2300      	movs	r3, #0
 8003f34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	431a      	orrs	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	431a      	orrs	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	69db      	ldr	r3, [r3, #28]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	4ba4      	ldr	r3, [pc, #656]	; (80041e8 <UART_SetConfig+0x2c0>)
 8003f58:	4013      	ands	r3, r2
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	6812      	ldr	r2, [r2, #0]
 8003f5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f60:	430b      	orrs	r3, r1
 8003f62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	68da      	ldr	r2, [r3, #12]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a99      	ldr	r2, [pc, #612]	; (80041ec <UART_SetConfig+0x2c4>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d004      	beq.n	8003f94 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f90:	4313      	orrs	r3, r2
 8003f92:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a90      	ldr	r2, [pc, #576]	; (80041f0 <UART_SetConfig+0x2c8>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d126      	bne.n	8004000 <UART_SetConfig+0xd8>
 8003fb2:	4b90      	ldr	r3, [pc, #576]	; (80041f4 <UART_SetConfig+0x2cc>)
 8003fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb8:	f003 0303 	and.w	r3, r3, #3
 8003fbc:	2b03      	cmp	r3, #3
 8003fbe:	d81b      	bhi.n	8003ff8 <UART_SetConfig+0xd0>
 8003fc0:	a201      	add	r2, pc, #4	; (adr r2, 8003fc8 <UART_SetConfig+0xa0>)
 8003fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc6:	bf00      	nop
 8003fc8:	08003fd9 	.word	0x08003fd9
 8003fcc:	08003fe9 	.word	0x08003fe9
 8003fd0:	08003fe1 	.word	0x08003fe1
 8003fd4:	08003ff1 	.word	0x08003ff1
 8003fd8:	2301      	movs	r3, #1
 8003fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fde:	e116      	b.n	800420e <UART_SetConfig+0x2e6>
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fe6:	e112      	b.n	800420e <UART_SetConfig+0x2e6>
 8003fe8:	2304      	movs	r3, #4
 8003fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fee:	e10e      	b.n	800420e <UART_SetConfig+0x2e6>
 8003ff0:	2308      	movs	r3, #8
 8003ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ff6:	e10a      	b.n	800420e <UART_SetConfig+0x2e6>
 8003ff8:	2310      	movs	r3, #16
 8003ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ffe:	e106      	b.n	800420e <UART_SetConfig+0x2e6>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a7c      	ldr	r2, [pc, #496]	; (80041f8 <UART_SetConfig+0x2d0>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d138      	bne.n	800407c <UART_SetConfig+0x154>
 800400a:	4b7a      	ldr	r3, [pc, #488]	; (80041f4 <UART_SetConfig+0x2cc>)
 800400c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004010:	f003 030c 	and.w	r3, r3, #12
 8004014:	2b0c      	cmp	r3, #12
 8004016:	d82d      	bhi.n	8004074 <UART_SetConfig+0x14c>
 8004018:	a201      	add	r2, pc, #4	; (adr r2, 8004020 <UART_SetConfig+0xf8>)
 800401a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401e:	bf00      	nop
 8004020:	08004055 	.word	0x08004055
 8004024:	08004075 	.word	0x08004075
 8004028:	08004075 	.word	0x08004075
 800402c:	08004075 	.word	0x08004075
 8004030:	08004065 	.word	0x08004065
 8004034:	08004075 	.word	0x08004075
 8004038:	08004075 	.word	0x08004075
 800403c:	08004075 	.word	0x08004075
 8004040:	0800405d 	.word	0x0800405d
 8004044:	08004075 	.word	0x08004075
 8004048:	08004075 	.word	0x08004075
 800404c:	08004075 	.word	0x08004075
 8004050:	0800406d 	.word	0x0800406d
 8004054:	2300      	movs	r3, #0
 8004056:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800405a:	e0d8      	b.n	800420e <UART_SetConfig+0x2e6>
 800405c:	2302      	movs	r3, #2
 800405e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004062:	e0d4      	b.n	800420e <UART_SetConfig+0x2e6>
 8004064:	2304      	movs	r3, #4
 8004066:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800406a:	e0d0      	b.n	800420e <UART_SetConfig+0x2e6>
 800406c:	2308      	movs	r3, #8
 800406e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004072:	e0cc      	b.n	800420e <UART_SetConfig+0x2e6>
 8004074:	2310      	movs	r3, #16
 8004076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800407a:	e0c8      	b.n	800420e <UART_SetConfig+0x2e6>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a5e      	ldr	r2, [pc, #376]	; (80041fc <UART_SetConfig+0x2d4>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d125      	bne.n	80040d2 <UART_SetConfig+0x1aa>
 8004086:	4b5b      	ldr	r3, [pc, #364]	; (80041f4 <UART_SetConfig+0x2cc>)
 8004088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800408c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004090:	2b30      	cmp	r3, #48	; 0x30
 8004092:	d016      	beq.n	80040c2 <UART_SetConfig+0x19a>
 8004094:	2b30      	cmp	r3, #48	; 0x30
 8004096:	d818      	bhi.n	80040ca <UART_SetConfig+0x1a2>
 8004098:	2b20      	cmp	r3, #32
 800409a:	d00a      	beq.n	80040b2 <UART_SetConfig+0x18a>
 800409c:	2b20      	cmp	r3, #32
 800409e:	d814      	bhi.n	80040ca <UART_SetConfig+0x1a2>
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d002      	beq.n	80040aa <UART_SetConfig+0x182>
 80040a4:	2b10      	cmp	r3, #16
 80040a6:	d008      	beq.n	80040ba <UART_SetConfig+0x192>
 80040a8:	e00f      	b.n	80040ca <UART_SetConfig+0x1a2>
 80040aa:	2300      	movs	r3, #0
 80040ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040b0:	e0ad      	b.n	800420e <UART_SetConfig+0x2e6>
 80040b2:	2302      	movs	r3, #2
 80040b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040b8:	e0a9      	b.n	800420e <UART_SetConfig+0x2e6>
 80040ba:	2304      	movs	r3, #4
 80040bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040c0:	e0a5      	b.n	800420e <UART_SetConfig+0x2e6>
 80040c2:	2308      	movs	r3, #8
 80040c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040c8:	e0a1      	b.n	800420e <UART_SetConfig+0x2e6>
 80040ca:	2310      	movs	r3, #16
 80040cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040d0:	e09d      	b.n	800420e <UART_SetConfig+0x2e6>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a4a      	ldr	r2, [pc, #296]	; (8004200 <UART_SetConfig+0x2d8>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d125      	bne.n	8004128 <UART_SetConfig+0x200>
 80040dc:	4b45      	ldr	r3, [pc, #276]	; (80041f4 <UART_SetConfig+0x2cc>)
 80040de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80040e6:	2bc0      	cmp	r3, #192	; 0xc0
 80040e8:	d016      	beq.n	8004118 <UART_SetConfig+0x1f0>
 80040ea:	2bc0      	cmp	r3, #192	; 0xc0
 80040ec:	d818      	bhi.n	8004120 <UART_SetConfig+0x1f8>
 80040ee:	2b80      	cmp	r3, #128	; 0x80
 80040f0:	d00a      	beq.n	8004108 <UART_SetConfig+0x1e0>
 80040f2:	2b80      	cmp	r3, #128	; 0x80
 80040f4:	d814      	bhi.n	8004120 <UART_SetConfig+0x1f8>
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d002      	beq.n	8004100 <UART_SetConfig+0x1d8>
 80040fa:	2b40      	cmp	r3, #64	; 0x40
 80040fc:	d008      	beq.n	8004110 <UART_SetConfig+0x1e8>
 80040fe:	e00f      	b.n	8004120 <UART_SetConfig+0x1f8>
 8004100:	2300      	movs	r3, #0
 8004102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004106:	e082      	b.n	800420e <UART_SetConfig+0x2e6>
 8004108:	2302      	movs	r3, #2
 800410a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800410e:	e07e      	b.n	800420e <UART_SetConfig+0x2e6>
 8004110:	2304      	movs	r3, #4
 8004112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004116:	e07a      	b.n	800420e <UART_SetConfig+0x2e6>
 8004118:	2308      	movs	r3, #8
 800411a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800411e:	e076      	b.n	800420e <UART_SetConfig+0x2e6>
 8004120:	2310      	movs	r3, #16
 8004122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004126:	e072      	b.n	800420e <UART_SetConfig+0x2e6>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a35      	ldr	r2, [pc, #212]	; (8004204 <UART_SetConfig+0x2dc>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d12a      	bne.n	8004188 <UART_SetConfig+0x260>
 8004132:	4b30      	ldr	r3, [pc, #192]	; (80041f4 <UART_SetConfig+0x2cc>)
 8004134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004138:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800413c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004140:	d01a      	beq.n	8004178 <UART_SetConfig+0x250>
 8004142:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004146:	d81b      	bhi.n	8004180 <UART_SetConfig+0x258>
 8004148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800414c:	d00c      	beq.n	8004168 <UART_SetConfig+0x240>
 800414e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004152:	d815      	bhi.n	8004180 <UART_SetConfig+0x258>
 8004154:	2b00      	cmp	r3, #0
 8004156:	d003      	beq.n	8004160 <UART_SetConfig+0x238>
 8004158:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800415c:	d008      	beq.n	8004170 <UART_SetConfig+0x248>
 800415e:	e00f      	b.n	8004180 <UART_SetConfig+0x258>
 8004160:	2300      	movs	r3, #0
 8004162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004166:	e052      	b.n	800420e <UART_SetConfig+0x2e6>
 8004168:	2302      	movs	r3, #2
 800416a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800416e:	e04e      	b.n	800420e <UART_SetConfig+0x2e6>
 8004170:	2304      	movs	r3, #4
 8004172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004176:	e04a      	b.n	800420e <UART_SetConfig+0x2e6>
 8004178:	2308      	movs	r3, #8
 800417a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800417e:	e046      	b.n	800420e <UART_SetConfig+0x2e6>
 8004180:	2310      	movs	r3, #16
 8004182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004186:	e042      	b.n	800420e <UART_SetConfig+0x2e6>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a17      	ldr	r2, [pc, #92]	; (80041ec <UART_SetConfig+0x2c4>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d13a      	bne.n	8004208 <UART_SetConfig+0x2e0>
 8004192:	4b18      	ldr	r3, [pc, #96]	; (80041f4 <UART_SetConfig+0x2cc>)
 8004194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004198:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800419c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041a0:	d01a      	beq.n	80041d8 <UART_SetConfig+0x2b0>
 80041a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041a6:	d81b      	bhi.n	80041e0 <UART_SetConfig+0x2b8>
 80041a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041ac:	d00c      	beq.n	80041c8 <UART_SetConfig+0x2a0>
 80041ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041b2:	d815      	bhi.n	80041e0 <UART_SetConfig+0x2b8>
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d003      	beq.n	80041c0 <UART_SetConfig+0x298>
 80041b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041bc:	d008      	beq.n	80041d0 <UART_SetConfig+0x2a8>
 80041be:	e00f      	b.n	80041e0 <UART_SetConfig+0x2b8>
 80041c0:	2300      	movs	r3, #0
 80041c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041c6:	e022      	b.n	800420e <UART_SetConfig+0x2e6>
 80041c8:	2302      	movs	r3, #2
 80041ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ce:	e01e      	b.n	800420e <UART_SetConfig+0x2e6>
 80041d0:	2304      	movs	r3, #4
 80041d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041d6:	e01a      	b.n	800420e <UART_SetConfig+0x2e6>
 80041d8:	2308      	movs	r3, #8
 80041da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041de:	e016      	b.n	800420e <UART_SetConfig+0x2e6>
 80041e0:	2310      	movs	r3, #16
 80041e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041e6:	e012      	b.n	800420e <UART_SetConfig+0x2e6>
 80041e8:	efff69f3 	.word	0xefff69f3
 80041ec:	40008000 	.word	0x40008000
 80041f0:	40013800 	.word	0x40013800
 80041f4:	40021000 	.word	0x40021000
 80041f8:	40004400 	.word	0x40004400
 80041fc:	40004800 	.word	0x40004800
 8004200:	40004c00 	.word	0x40004c00
 8004204:	40005000 	.word	0x40005000
 8004208:	2310      	movs	r3, #16
 800420a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a9f      	ldr	r2, [pc, #636]	; (8004490 <UART_SetConfig+0x568>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d17a      	bne.n	800430e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004218:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800421c:	2b08      	cmp	r3, #8
 800421e:	d824      	bhi.n	800426a <UART_SetConfig+0x342>
 8004220:	a201      	add	r2, pc, #4	; (adr r2, 8004228 <UART_SetConfig+0x300>)
 8004222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004226:	bf00      	nop
 8004228:	0800424d 	.word	0x0800424d
 800422c:	0800426b 	.word	0x0800426b
 8004230:	08004255 	.word	0x08004255
 8004234:	0800426b 	.word	0x0800426b
 8004238:	0800425b 	.word	0x0800425b
 800423c:	0800426b 	.word	0x0800426b
 8004240:	0800426b 	.word	0x0800426b
 8004244:	0800426b 	.word	0x0800426b
 8004248:	08004263 	.word	0x08004263
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800424c:	f7fe fa5c 	bl	8002708 <HAL_RCC_GetPCLK1Freq>
 8004250:	61f8      	str	r0, [r7, #28]
        break;
 8004252:	e010      	b.n	8004276 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004254:	4b8f      	ldr	r3, [pc, #572]	; (8004494 <UART_SetConfig+0x56c>)
 8004256:	61fb      	str	r3, [r7, #28]
        break;
 8004258:	e00d      	b.n	8004276 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800425a:	f7fe f9bd 	bl	80025d8 <HAL_RCC_GetSysClockFreq>
 800425e:	61f8      	str	r0, [r7, #28]
        break;
 8004260:	e009      	b.n	8004276 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004266:	61fb      	str	r3, [r7, #28]
        break;
 8004268:	e005      	b.n	8004276 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800426a:	2300      	movs	r3, #0
 800426c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004274:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 80fb 	beq.w	8004474 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	685a      	ldr	r2, [r3, #4]
 8004282:	4613      	mov	r3, r2
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	4413      	add	r3, r2
 8004288:	69fa      	ldr	r2, [r7, #28]
 800428a:	429a      	cmp	r2, r3
 800428c:	d305      	bcc.n	800429a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004294:	69fa      	ldr	r2, [r7, #28]
 8004296:	429a      	cmp	r2, r3
 8004298:	d903      	bls.n	80042a2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80042a0:	e0e8      	b.n	8004474 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	2200      	movs	r2, #0
 80042a6:	461c      	mov	r4, r3
 80042a8:	4615      	mov	r5, r2
 80042aa:	f04f 0200 	mov.w	r2, #0
 80042ae:	f04f 0300 	mov.w	r3, #0
 80042b2:	022b      	lsls	r3, r5, #8
 80042b4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80042b8:	0222      	lsls	r2, r4, #8
 80042ba:	68f9      	ldr	r1, [r7, #12]
 80042bc:	6849      	ldr	r1, [r1, #4]
 80042be:	0849      	lsrs	r1, r1, #1
 80042c0:	2000      	movs	r0, #0
 80042c2:	4688      	mov	r8, r1
 80042c4:	4681      	mov	r9, r0
 80042c6:	eb12 0a08 	adds.w	sl, r2, r8
 80042ca:	eb43 0b09 	adc.w	fp, r3, r9
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	603b      	str	r3, [r7, #0]
 80042d6:	607a      	str	r2, [r7, #4]
 80042d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042dc:	4650      	mov	r0, sl
 80042de:	4659      	mov	r1, fp
 80042e0:	f7fb ff76 	bl	80001d0 <__aeabi_uldivmod>
 80042e4:	4602      	mov	r2, r0
 80042e6:	460b      	mov	r3, r1
 80042e8:	4613      	mov	r3, r2
 80042ea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042f2:	d308      	bcc.n	8004306 <UART_SetConfig+0x3de>
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042fa:	d204      	bcs.n	8004306 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	60da      	str	r2, [r3, #12]
 8004304:	e0b6      	b.n	8004474 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800430c:	e0b2      	b.n	8004474 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	69db      	ldr	r3, [r3, #28]
 8004312:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004316:	d15e      	bne.n	80043d6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004318:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800431c:	2b08      	cmp	r3, #8
 800431e:	d828      	bhi.n	8004372 <UART_SetConfig+0x44a>
 8004320:	a201      	add	r2, pc, #4	; (adr r2, 8004328 <UART_SetConfig+0x400>)
 8004322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004326:	bf00      	nop
 8004328:	0800434d 	.word	0x0800434d
 800432c:	08004355 	.word	0x08004355
 8004330:	0800435d 	.word	0x0800435d
 8004334:	08004373 	.word	0x08004373
 8004338:	08004363 	.word	0x08004363
 800433c:	08004373 	.word	0x08004373
 8004340:	08004373 	.word	0x08004373
 8004344:	08004373 	.word	0x08004373
 8004348:	0800436b 	.word	0x0800436b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800434c:	f7fe f9dc 	bl	8002708 <HAL_RCC_GetPCLK1Freq>
 8004350:	61f8      	str	r0, [r7, #28]
        break;
 8004352:	e014      	b.n	800437e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004354:	f7fe f9ee 	bl	8002734 <HAL_RCC_GetPCLK2Freq>
 8004358:	61f8      	str	r0, [r7, #28]
        break;
 800435a:	e010      	b.n	800437e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800435c:	4b4d      	ldr	r3, [pc, #308]	; (8004494 <UART_SetConfig+0x56c>)
 800435e:	61fb      	str	r3, [r7, #28]
        break;
 8004360:	e00d      	b.n	800437e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004362:	f7fe f939 	bl	80025d8 <HAL_RCC_GetSysClockFreq>
 8004366:	61f8      	str	r0, [r7, #28]
        break;
 8004368:	e009      	b.n	800437e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800436a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800436e:	61fb      	str	r3, [r7, #28]
        break;
 8004370:	e005      	b.n	800437e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004372:	2300      	movs	r3, #0
 8004374:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800437c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d077      	beq.n	8004474 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	005a      	lsls	r2, r3, #1
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	085b      	lsrs	r3, r3, #1
 800438e:	441a      	add	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	fbb2 f3f3 	udiv	r3, r2, r3
 8004398:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	2b0f      	cmp	r3, #15
 800439e:	d916      	bls.n	80043ce <UART_SetConfig+0x4a6>
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043a6:	d212      	bcs.n	80043ce <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	f023 030f 	bic.w	r3, r3, #15
 80043b0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	085b      	lsrs	r3, r3, #1
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	f003 0307 	and.w	r3, r3, #7
 80043bc:	b29a      	uxth	r2, r3
 80043be:	8afb      	ldrh	r3, [r7, #22]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	8afa      	ldrh	r2, [r7, #22]
 80043ca:	60da      	str	r2, [r3, #12]
 80043cc:	e052      	b.n	8004474 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80043d4:	e04e      	b.n	8004474 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043da:	2b08      	cmp	r3, #8
 80043dc:	d827      	bhi.n	800442e <UART_SetConfig+0x506>
 80043de:	a201      	add	r2, pc, #4	; (adr r2, 80043e4 <UART_SetConfig+0x4bc>)
 80043e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e4:	08004409 	.word	0x08004409
 80043e8:	08004411 	.word	0x08004411
 80043ec:	08004419 	.word	0x08004419
 80043f0:	0800442f 	.word	0x0800442f
 80043f4:	0800441f 	.word	0x0800441f
 80043f8:	0800442f 	.word	0x0800442f
 80043fc:	0800442f 	.word	0x0800442f
 8004400:	0800442f 	.word	0x0800442f
 8004404:	08004427 	.word	0x08004427
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004408:	f7fe f97e 	bl	8002708 <HAL_RCC_GetPCLK1Freq>
 800440c:	61f8      	str	r0, [r7, #28]
        break;
 800440e:	e014      	b.n	800443a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004410:	f7fe f990 	bl	8002734 <HAL_RCC_GetPCLK2Freq>
 8004414:	61f8      	str	r0, [r7, #28]
        break;
 8004416:	e010      	b.n	800443a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004418:	4b1e      	ldr	r3, [pc, #120]	; (8004494 <UART_SetConfig+0x56c>)
 800441a:	61fb      	str	r3, [r7, #28]
        break;
 800441c:	e00d      	b.n	800443a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800441e:	f7fe f8db 	bl	80025d8 <HAL_RCC_GetSysClockFreq>
 8004422:	61f8      	str	r0, [r7, #28]
        break;
 8004424:	e009      	b.n	800443a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004426:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800442a:	61fb      	str	r3, [r7, #28]
        break;
 800442c:	e005      	b.n	800443a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800442e:	2300      	movs	r3, #0
 8004430:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004438:	bf00      	nop
    }

    if (pclk != 0U)
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d019      	beq.n	8004474 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	085a      	lsrs	r2, r3, #1
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	441a      	add	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004452:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	2b0f      	cmp	r3, #15
 8004458:	d909      	bls.n	800446e <UART_SetConfig+0x546>
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004460:	d205      	bcs.n	800446e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	b29a      	uxth	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	60da      	str	r2, [r3, #12]
 800446c:	e002      	b.n	8004474 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004480:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004484:	4618      	mov	r0, r3
 8004486:	3728      	adds	r7, #40	; 0x28
 8004488:	46bd      	mov	sp, r7
 800448a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800448e:	bf00      	nop
 8004490:	40008000 	.word	0x40008000
 8004494:	00f42400 	.word	0x00f42400

08004498 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00a      	beq.n	80044c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00a      	beq.n	80044e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	430a      	orrs	r2, r1
 80044e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00a      	beq.n	8004506 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	f003 0308 	and.w	r3, r3, #8
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00a      	beq.n	8004528 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	430a      	orrs	r2, r1
 8004526:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452c:	f003 0310 	and.w	r3, r3, #16
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00a      	beq.n	800454a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454e:	f003 0320 	and.w	r3, r3, #32
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00a      	beq.n	800456c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	430a      	orrs	r2, r1
 800456a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004574:	2b00      	cmp	r3, #0
 8004576:	d01a      	beq.n	80045ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	430a      	orrs	r2, r1
 800458c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004596:	d10a      	bne.n	80045ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00a      	beq.n	80045d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	430a      	orrs	r2, r1
 80045ce:	605a      	str	r2, [r3, #4]
  }
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b086      	sub	sp, #24
 80045e0:	af02      	add	r7, sp, #8
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045ec:	f7fc ffd4 	bl	8001598 <HAL_GetTick>
 80045f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0308 	and.w	r3, r3, #8
 80045fc:	2b08      	cmp	r3, #8
 80045fe:	d10e      	bne.n	800461e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004600:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f82d 	bl	800466e <UART_WaitOnFlagUntilTimeout>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e023      	b.n	8004666 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0304 	and.w	r3, r3, #4
 8004628:	2b04      	cmp	r3, #4
 800462a:	d10e      	bne.n	800464a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800462c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f817 	bl	800466e <UART_WaitOnFlagUntilTimeout>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e00d      	b.n	8004666 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2220      	movs	r2, #32
 800464e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2220      	movs	r2, #32
 8004654:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b09c      	sub	sp, #112	; 0x70
 8004672:	af00      	add	r7, sp, #0
 8004674:	60f8      	str	r0, [r7, #12]
 8004676:	60b9      	str	r1, [r7, #8]
 8004678:	603b      	str	r3, [r7, #0]
 800467a:	4613      	mov	r3, r2
 800467c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800467e:	e0a5      	b.n	80047cc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004680:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004682:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004686:	f000 80a1 	beq.w	80047cc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800468a:	f7fc ff85 	bl	8001598 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004696:	429a      	cmp	r2, r3
 8004698:	d302      	bcc.n	80046a0 <UART_WaitOnFlagUntilTimeout+0x32>
 800469a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800469c:	2b00      	cmp	r3, #0
 800469e:	d13e      	bne.n	800471e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046a8:	e853 3f00 	ldrex	r3, [r3]
 80046ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80046ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046b4:	667b      	str	r3, [r7, #100]	; 0x64
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	461a      	mov	r2, r3
 80046bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046c0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80046c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80046c6:	e841 2300 	strex	r3, r2, [r1]
 80046ca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80046cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1e6      	bne.n	80046a0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	3308      	adds	r3, #8
 80046d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046dc:	e853 3f00 	ldrex	r3, [r3]
 80046e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e4:	f023 0301 	bic.w	r3, r3, #1
 80046e8:	663b      	str	r3, [r7, #96]	; 0x60
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	3308      	adds	r3, #8
 80046f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80046f2:	64ba      	str	r2, [r7, #72]	; 0x48
 80046f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80046f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046fa:	e841 2300 	strex	r3, r2, [r1]
 80046fe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1e5      	bne.n	80046d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2220      	movs	r2, #32
 800470a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2220      	movs	r2, #32
 8004710:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e067      	b.n	80047ee <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0304 	and.w	r3, r3, #4
 8004728:	2b00      	cmp	r3, #0
 800472a:	d04f      	beq.n	80047cc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	69db      	ldr	r3, [r3, #28]
 8004732:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004736:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800473a:	d147      	bne.n	80047cc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004744:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474e:	e853 3f00 	ldrex	r3, [r3]
 8004752:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004756:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800475a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	461a      	mov	r2, r3
 8004762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004764:	637b      	str	r3, [r7, #52]	; 0x34
 8004766:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004768:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800476a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800476c:	e841 2300 	strex	r3, r2, [r1]
 8004770:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1e6      	bne.n	8004746 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	3308      	adds	r3, #8
 800477e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	e853 3f00 	ldrex	r3, [r3]
 8004786:	613b      	str	r3, [r7, #16]
   return(result);
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	f023 0301 	bic.w	r3, r3, #1
 800478e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	3308      	adds	r3, #8
 8004796:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004798:	623a      	str	r2, [r7, #32]
 800479a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479c:	69f9      	ldr	r1, [r7, #28]
 800479e:	6a3a      	ldr	r2, [r7, #32]
 80047a0:	e841 2300 	strex	r3, r2, [r1]
 80047a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1e5      	bne.n	8004778 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2220      	movs	r2, #32
 80047b0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2220      	movs	r2, #32
 80047b6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2220      	movs	r2, #32
 80047bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e010      	b.n	80047ee <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	69da      	ldr	r2, [r3, #28]
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	4013      	ands	r3, r2
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	429a      	cmp	r2, r3
 80047da:	bf0c      	ite	eq
 80047dc:	2301      	moveq	r3, #1
 80047de:	2300      	movne	r3, #0
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	461a      	mov	r2, r3
 80047e4:	79fb      	ldrb	r3, [r7, #7]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	f43f af4a 	beq.w	8004680 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3770      	adds	r7, #112	; 0x70
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
	...

080047f8 <__NVIC_SetPriority>:
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	4603      	mov	r3, r0
 8004800:	6039      	str	r1, [r7, #0]
 8004802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004808:	2b00      	cmp	r3, #0
 800480a:	db0a      	blt.n	8004822 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	b2da      	uxtb	r2, r3
 8004810:	490c      	ldr	r1, [pc, #48]	; (8004844 <__NVIC_SetPriority+0x4c>)
 8004812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004816:	0112      	lsls	r2, r2, #4
 8004818:	b2d2      	uxtb	r2, r2
 800481a:	440b      	add	r3, r1
 800481c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004820:	e00a      	b.n	8004838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	b2da      	uxtb	r2, r3
 8004826:	4908      	ldr	r1, [pc, #32]	; (8004848 <__NVIC_SetPriority+0x50>)
 8004828:	79fb      	ldrb	r3, [r7, #7]
 800482a:	f003 030f 	and.w	r3, r3, #15
 800482e:	3b04      	subs	r3, #4
 8004830:	0112      	lsls	r2, r2, #4
 8004832:	b2d2      	uxtb	r2, r2
 8004834:	440b      	add	r3, r1
 8004836:	761a      	strb	r2, [r3, #24]
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr
 8004844:	e000e100 	.word	0xe000e100
 8004848:	e000ed00 	.word	0xe000ed00

0800484c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800484c:	b580      	push	{r7, lr}
 800484e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004850:	4b05      	ldr	r3, [pc, #20]	; (8004868 <SysTick_Handler+0x1c>)
 8004852:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004854:	f001 ff40 	bl	80066d8 <xTaskGetSchedulerState>
 8004858:	4603      	mov	r3, r0
 800485a:	2b01      	cmp	r3, #1
 800485c:	d001      	beq.n	8004862 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800485e:	f002 fe23 	bl	80074a8 <xPortSysTickHandler>
  }
}
 8004862:	bf00      	nop
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	e000e010 	.word	0xe000e010

0800486c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800486c:	b580      	push	{r7, lr}
 800486e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004870:	2100      	movs	r1, #0
 8004872:	f06f 0004 	mvn.w	r0, #4
 8004876:	f7ff ffbf 	bl	80047f8 <__NVIC_SetPriority>
#endif
}
 800487a:	bf00      	nop
 800487c:	bd80      	pop	{r7, pc}
	...

08004880 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004886:	f3ef 8305 	mrs	r3, IPSR
 800488a:	603b      	str	r3, [r7, #0]
  return(result);
 800488c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800488e:	2b00      	cmp	r3, #0
 8004890:	d003      	beq.n	800489a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004892:	f06f 0305 	mvn.w	r3, #5
 8004896:	607b      	str	r3, [r7, #4]
 8004898:	e00c      	b.n	80048b4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800489a:	4b0a      	ldr	r3, [pc, #40]	; (80048c4 <osKernelInitialize+0x44>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d105      	bne.n	80048ae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80048a2:	4b08      	ldr	r3, [pc, #32]	; (80048c4 <osKernelInitialize+0x44>)
 80048a4:	2201      	movs	r2, #1
 80048a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80048a8:	2300      	movs	r3, #0
 80048aa:	607b      	str	r3, [r7, #4]
 80048ac:	e002      	b.n	80048b4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80048ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80048b4:	687b      	ldr	r3, [r7, #4]
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	200001f0 	.word	0x200001f0

080048c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048ce:	f3ef 8305 	mrs	r3, IPSR
 80048d2:	603b      	str	r3, [r7, #0]
  return(result);
 80048d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80048da:	f06f 0305 	mvn.w	r3, #5
 80048de:	607b      	str	r3, [r7, #4]
 80048e0:	e010      	b.n	8004904 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80048e2:	4b0b      	ldr	r3, [pc, #44]	; (8004910 <osKernelStart+0x48>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d109      	bne.n	80048fe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80048ea:	f7ff ffbf 	bl	800486c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80048ee:	4b08      	ldr	r3, [pc, #32]	; (8004910 <osKernelStart+0x48>)
 80048f0:	2202      	movs	r2, #2
 80048f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80048f4:	f001 fa94 	bl	8005e20 <vTaskStartScheduler>
      stat = osOK;
 80048f8:	2300      	movs	r3, #0
 80048fa:	607b      	str	r3, [r7, #4]
 80048fc:	e002      	b.n	8004904 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80048fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004902:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004904:	687b      	ldr	r3, [r7, #4]
}
 8004906:	4618      	mov	r0, r3
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	200001f0 	.word	0x200001f0

08004914 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004914:	b580      	push	{r7, lr}
 8004916:	b08e      	sub	sp, #56	; 0x38
 8004918:	af04      	add	r7, sp, #16
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004920:	2300      	movs	r3, #0
 8004922:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004924:	f3ef 8305 	mrs	r3, IPSR
 8004928:	617b      	str	r3, [r7, #20]
  return(result);
 800492a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800492c:	2b00      	cmp	r3, #0
 800492e:	d17e      	bne.n	8004a2e <osThreadNew+0x11a>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d07b      	beq.n	8004a2e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004936:	2380      	movs	r3, #128	; 0x80
 8004938:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800493a:	2318      	movs	r3, #24
 800493c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800493e:	2300      	movs	r3, #0
 8004940:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004942:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004946:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d045      	beq.n	80049da <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d002      	beq.n	800495c <osThreadNew+0x48>
        name = attr->name;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d002      	beq.n	800496a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d008      	beq.n	8004982 <osThreadNew+0x6e>
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	2b38      	cmp	r3, #56	; 0x38
 8004974:	d805      	bhi.n	8004982 <osThreadNew+0x6e>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <osThreadNew+0x72>
        return (NULL);
 8004982:	2300      	movs	r3, #0
 8004984:	e054      	b.n	8004a30 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	089b      	lsrs	r3, r3, #2
 8004994:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00e      	beq.n	80049bc <osThreadNew+0xa8>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	2bbb      	cmp	r3, #187	; 0xbb
 80049a4:	d90a      	bls.n	80049bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d006      	beq.n	80049bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d002      	beq.n	80049bc <osThreadNew+0xa8>
        mem = 1;
 80049b6:	2301      	movs	r3, #1
 80049b8:	61bb      	str	r3, [r7, #24]
 80049ba:	e010      	b.n	80049de <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d10c      	bne.n	80049de <osThreadNew+0xca>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d108      	bne.n	80049de <osThreadNew+0xca>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d104      	bne.n	80049de <osThreadNew+0xca>
          mem = 0;
 80049d4:	2300      	movs	r3, #0
 80049d6:	61bb      	str	r3, [r7, #24]
 80049d8:	e001      	b.n	80049de <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80049da:	2300      	movs	r3, #0
 80049dc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d110      	bne.n	8004a06 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80049ec:	9202      	str	r2, [sp, #8]
 80049ee:	9301      	str	r3, [sp, #4]
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	9300      	str	r3, [sp, #0]
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	6a3a      	ldr	r2, [r7, #32]
 80049f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f000 ffda 	bl	80059b4 <xTaskCreateStatic>
 8004a00:	4603      	mov	r3, r0
 8004a02:	613b      	str	r3, [r7, #16]
 8004a04:	e013      	b.n	8004a2e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d110      	bne.n	8004a2e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004a0c:	6a3b      	ldr	r3, [r7, #32]
 8004a0e:	b29a      	uxth	r2, r3
 8004a10:	f107 0310 	add.w	r3, r7, #16
 8004a14:	9301      	str	r3, [sp, #4]
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	9300      	str	r3, [sp, #0]
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a1e:	68f8      	ldr	r0, [r7, #12]
 8004a20:	f001 f825 	bl	8005a6e <xTaskCreate>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d001      	beq.n	8004a2e <osThreadNew+0x11a>
            hTask = NULL;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004a2e:	693b      	ldr	r3, [r7, #16]
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3728      	adds	r7, #40	; 0x28
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4a07      	ldr	r2, [pc, #28]	; (8004a64 <vApplicationGetIdleTaskMemory+0x2c>)
 8004a48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	4a06      	ldr	r2, [pc, #24]	; (8004a68 <vApplicationGetIdleTaskMemory+0x30>)
 8004a4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2280      	movs	r2, #128	; 0x80
 8004a54:	601a      	str	r2, [r3, #0]
}
 8004a56:	bf00      	nop
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	200001f4 	.word	0x200001f4
 8004a68:	200002b0 	.word	0x200002b0

08004a6c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	4a07      	ldr	r2, [pc, #28]	; (8004a98 <vApplicationGetTimerTaskMemory+0x2c>)
 8004a7c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	4a06      	ldr	r2, [pc, #24]	; (8004a9c <vApplicationGetTimerTaskMemory+0x30>)
 8004a82:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a8a:	601a      	str	r2, [r3, #0]
}
 8004a8c:	bf00      	nop
 8004a8e:	3714      	adds	r7, #20
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr
 8004a98:	200004b0 	.word	0x200004b0
 8004a9c:	2000056c 	.word	0x2000056c

08004aa0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f103 0208 	add.w	r2, r3, #8
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ab8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f103 0208 	add.w	r2, r3, #8
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f103 0208 	add.w	r2, r3, #8
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004aee:	bf00      	nop
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004afa:	b480      	push	{r7}
 8004afc:	b085      	sub	sp, #20
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
 8004b02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	689a      	ldr	r2, [r3, #8]
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	683a      	ldr	r2, [r7, #0]
 8004b1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	683a      	ldr	r2, [r7, #0]
 8004b24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	1c5a      	adds	r2, r3, #1
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	601a      	str	r2, [r3, #0]
}
 8004b36:	bf00      	nop
 8004b38:	3714      	adds	r7, #20
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr

08004b42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b42:	b480      	push	{r7}
 8004b44:	b085      	sub	sp, #20
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
 8004b4a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b58:	d103      	bne.n	8004b62 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	60fb      	str	r3, [r7, #12]
 8004b60:	e00c      	b.n	8004b7c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	3308      	adds	r3, #8
 8004b66:	60fb      	str	r3, [r7, #12]
 8004b68:	e002      	b.n	8004b70 <vListInsert+0x2e>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	60fb      	str	r3, [r7, #12]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68ba      	ldr	r2, [r7, #8]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d2f6      	bcs.n	8004b6a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	683a      	ldr	r2, [r7, #0]
 8004b8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	683a      	ldr	r2, [r7, #0]
 8004b96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	1c5a      	adds	r2, r3, #1
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	601a      	str	r2, [r3, #0]
}
 8004ba8:	bf00      	nop
 8004baa:	3714      	adds	r7, #20
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	6892      	ldr	r2, [r2, #8]
 8004bca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	6852      	ldr	r2, [r2, #4]
 8004bd4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d103      	bne.n	8004be8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689a      	ldr	r2, [r3, #8]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	1e5a      	subs	r2, r3, #1
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3714      	adds	r7, #20
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d10a      	bne.n	8004c32 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c20:	f383 8811 	msr	BASEPRI, r3
 8004c24:	f3bf 8f6f 	isb	sy
 8004c28:	f3bf 8f4f 	dsb	sy
 8004c2c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004c2e:	bf00      	nop
 8004c30:	e7fe      	b.n	8004c30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004c32:	f002 fba7 	bl	8007384 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c3e:	68f9      	ldr	r1, [r7, #12]
 8004c40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004c42:	fb01 f303 	mul.w	r3, r1, r3
 8004c46:	441a      	add	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c62:	3b01      	subs	r3, #1
 8004c64:	68f9      	ldr	r1, [r7, #12]
 8004c66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004c68:	fb01 f303 	mul.w	r3, r1, r3
 8004c6c:	441a      	add	r2, r3
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	22ff      	movs	r2, #255	; 0xff
 8004c76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	22ff      	movs	r2, #255	; 0xff
 8004c7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d114      	bne.n	8004cb2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d01a      	beq.n	8004cc6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	3310      	adds	r3, #16
 8004c94:	4618      	mov	r0, r3
 8004c96:	f001 fb5d 	bl	8006354 <xTaskRemoveFromEventList>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d012      	beq.n	8004cc6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004ca0:	4b0c      	ldr	r3, [pc, #48]	; (8004cd4 <xQueueGenericReset+0xcc>)
 8004ca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ca6:	601a      	str	r2, [r3, #0]
 8004ca8:	f3bf 8f4f 	dsb	sy
 8004cac:	f3bf 8f6f 	isb	sy
 8004cb0:	e009      	b.n	8004cc6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	3310      	adds	r3, #16
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7ff fef2 	bl	8004aa0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	3324      	adds	r3, #36	; 0x24
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7ff feed 	bl	8004aa0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004cc6:	f002 fb8d 	bl	80073e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004cca:	2301      	movs	r3, #1
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3710      	adds	r7, #16
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	e000ed04 	.word	0xe000ed04

08004cd8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b08e      	sub	sp, #56	; 0x38
 8004cdc:	af02      	add	r7, sp, #8
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
 8004ce4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d10a      	bne.n	8004d02 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf0:	f383 8811 	msr	BASEPRI, r3
 8004cf4:	f3bf 8f6f 	isb	sy
 8004cf8:	f3bf 8f4f 	dsb	sy
 8004cfc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004cfe:	bf00      	nop
 8004d00:	e7fe      	b.n	8004d00 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10a      	bne.n	8004d1e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0c:	f383 8811 	msr	BASEPRI, r3
 8004d10:	f3bf 8f6f 	isb	sy
 8004d14:	f3bf 8f4f 	dsb	sy
 8004d18:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004d1a:	bf00      	nop
 8004d1c:	e7fe      	b.n	8004d1c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d002      	beq.n	8004d2a <xQueueGenericCreateStatic+0x52>
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d001      	beq.n	8004d2e <xQueueGenericCreateStatic+0x56>
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e000      	b.n	8004d30 <xQueueGenericCreateStatic+0x58>
 8004d2e:	2300      	movs	r3, #0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d10a      	bne.n	8004d4a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d38:	f383 8811 	msr	BASEPRI, r3
 8004d3c:	f3bf 8f6f 	isb	sy
 8004d40:	f3bf 8f4f 	dsb	sy
 8004d44:	623b      	str	r3, [r7, #32]
}
 8004d46:	bf00      	nop
 8004d48:	e7fe      	b.n	8004d48 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d102      	bne.n	8004d56 <xQueueGenericCreateStatic+0x7e>
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <xQueueGenericCreateStatic+0x82>
 8004d56:	2301      	movs	r3, #1
 8004d58:	e000      	b.n	8004d5c <xQueueGenericCreateStatic+0x84>
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10a      	bne.n	8004d76 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d64:	f383 8811 	msr	BASEPRI, r3
 8004d68:	f3bf 8f6f 	isb	sy
 8004d6c:	f3bf 8f4f 	dsb	sy
 8004d70:	61fb      	str	r3, [r7, #28]
}
 8004d72:	bf00      	nop
 8004d74:	e7fe      	b.n	8004d74 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004d76:	2350      	movs	r3, #80	; 0x50
 8004d78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	2b50      	cmp	r3, #80	; 0x50
 8004d7e:	d00a      	beq.n	8004d96 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d84:	f383 8811 	msr	BASEPRI, r3
 8004d88:	f3bf 8f6f 	isb	sy
 8004d8c:	f3bf 8f4f 	dsb	sy
 8004d90:	61bb      	str	r3, [r7, #24]
}
 8004d92:	bf00      	nop
 8004d94:	e7fe      	b.n	8004d94 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004d96:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00d      	beq.n	8004dbe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004daa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	4613      	mov	r3, r2
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	68b9      	ldr	r1, [r7, #8]
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f000 f83f 	bl	8004e3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3730      	adds	r7, #48	; 0x30
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b08a      	sub	sp, #40	; 0x28
 8004dcc:	af02      	add	r7, sp, #8
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d10a      	bne.n	8004df2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de0:	f383 8811 	msr	BASEPRI, r3
 8004de4:	f3bf 8f6f 	isb	sy
 8004de8:	f3bf 8f4f 	dsb	sy
 8004dec:	613b      	str	r3, [r7, #16]
}
 8004dee:	bf00      	nop
 8004df0:	e7fe      	b.n	8004df0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	68ba      	ldr	r2, [r7, #8]
 8004df6:	fb02 f303 	mul.w	r3, r2, r3
 8004dfa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	3350      	adds	r3, #80	; 0x50
 8004e00:	4618      	mov	r0, r3
 8004e02:	f002 fbe1 	bl	80075c8 <pvPortMalloc>
 8004e06:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d011      	beq.n	8004e32 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	3350      	adds	r3, #80	; 0x50
 8004e16:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e20:	79fa      	ldrb	r2, [r7, #7]
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	9300      	str	r3, [sp, #0]
 8004e26:	4613      	mov	r3, r2
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	68b9      	ldr	r1, [r7, #8]
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f000 f805 	bl	8004e3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004e32:	69bb      	ldr	r3, [r7, #24]
	}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3720      	adds	r7, #32
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
 8004e48:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d103      	bne.n	8004e58 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	69ba      	ldr	r2, [r7, #24]
 8004e54:	601a      	str	r2, [r3, #0]
 8004e56:	e002      	b.n	8004e5e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	68ba      	ldr	r2, [r7, #8]
 8004e68:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004e6a:	2101      	movs	r1, #1
 8004e6c:	69b8      	ldr	r0, [r7, #24]
 8004e6e:	f7ff fecb 	bl	8004c08 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	78fa      	ldrb	r2, [r7, #3]
 8004e76:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004e7a:	bf00      	nop
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
	...

08004e84 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b08e      	sub	sp, #56	; 0x38
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
 8004e90:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004e92:	2300      	movs	r3, #0
 8004e94:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10a      	bne.n	8004eb6 <xQueueGenericSend+0x32>
	__asm volatile
 8004ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea4:	f383 8811 	msr	BASEPRI, r3
 8004ea8:	f3bf 8f6f 	isb	sy
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004eb2:	bf00      	nop
 8004eb4:	e7fe      	b.n	8004eb4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d103      	bne.n	8004ec4 <xQueueGenericSend+0x40>
 8004ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d101      	bne.n	8004ec8 <xQueueGenericSend+0x44>
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e000      	b.n	8004eca <xQueueGenericSend+0x46>
 8004ec8:	2300      	movs	r3, #0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d10a      	bne.n	8004ee4 <xQueueGenericSend+0x60>
	__asm volatile
 8004ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed2:	f383 8811 	msr	BASEPRI, r3
 8004ed6:	f3bf 8f6f 	isb	sy
 8004eda:	f3bf 8f4f 	dsb	sy
 8004ede:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ee0:	bf00      	nop
 8004ee2:	e7fe      	b.n	8004ee2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d103      	bne.n	8004ef2 <xQueueGenericSend+0x6e>
 8004eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d101      	bne.n	8004ef6 <xQueueGenericSend+0x72>
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e000      	b.n	8004ef8 <xQueueGenericSend+0x74>
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d10a      	bne.n	8004f12 <xQueueGenericSend+0x8e>
	__asm volatile
 8004efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f00:	f383 8811 	msr	BASEPRI, r3
 8004f04:	f3bf 8f6f 	isb	sy
 8004f08:	f3bf 8f4f 	dsb	sy
 8004f0c:	623b      	str	r3, [r7, #32]
}
 8004f0e:	bf00      	nop
 8004f10:	e7fe      	b.n	8004f10 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f12:	f001 fbe1 	bl	80066d8 <xTaskGetSchedulerState>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d102      	bne.n	8004f22 <xQueueGenericSend+0x9e>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <xQueueGenericSend+0xa2>
 8004f22:	2301      	movs	r3, #1
 8004f24:	e000      	b.n	8004f28 <xQueueGenericSend+0xa4>
 8004f26:	2300      	movs	r3, #0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d10a      	bne.n	8004f42 <xQueueGenericSend+0xbe>
	__asm volatile
 8004f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f30:	f383 8811 	msr	BASEPRI, r3
 8004f34:	f3bf 8f6f 	isb	sy
 8004f38:	f3bf 8f4f 	dsb	sy
 8004f3c:	61fb      	str	r3, [r7, #28]
}
 8004f3e:	bf00      	nop
 8004f40:	e7fe      	b.n	8004f40 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f42:	f002 fa1f 	bl	8007384 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d302      	bcc.n	8004f58 <xQueueGenericSend+0xd4>
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d129      	bne.n	8004fac <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f58:	683a      	ldr	r2, [r7, #0]
 8004f5a:	68b9      	ldr	r1, [r7, #8]
 8004f5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f5e:	f000 fbbb 	bl	80056d8 <prvCopyDataToQueue>
 8004f62:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d010      	beq.n	8004f8e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6e:	3324      	adds	r3, #36	; 0x24
 8004f70:	4618      	mov	r0, r3
 8004f72:	f001 f9ef 	bl	8006354 <xTaskRemoveFromEventList>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d013      	beq.n	8004fa4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004f7c:	4b3f      	ldr	r3, [pc, #252]	; (800507c <xQueueGenericSend+0x1f8>)
 8004f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f82:	601a      	str	r2, [r3, #0]
 8004f84:	f3bf 8f4f 	dsb	sy
 8004f88:	f3bf 8f6f 	isb	sy
 8004f8c:	e00a      	b.n	8004fa4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d007      	beq.n	8004fa4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004f94:	4b39      	ldr	r3, [pc, #228]	; (800507c <xQueueGenericSend+0x1f8>)
 8004f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f9a:	601a      	str	r2, [r3, #0]
 8004f9c:	f3bf 8f4f 	dsb	sy
 8004fa0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004fa4:	f002 fa1e 	bl	80073e4 <vPortExitCritical>
				return pdPASS;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e063      	b.n	8005074 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d103      	bne.n	8004fba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004fb2:	f002 fa17 	bl	80073e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	e05c      	b.n	8005074 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d106      	bne.n	8004fce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004fc0:	f107 0314 	add.w	r3, r7, #20
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f001 fa29 	bl	800641c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fce:	f002 fa09 	bl	80073e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004fd2:	f000 ff95 	bl	8005f00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004fd6:	f002 f9d5 	bl	8007384 <vPortEnterCritical>
 8004fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fe0:	b25b      	sxtb	r3, r3
 8004fe2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fe6:	d103      	bne.n	8004ff0 <xQueueGenericSend+0x16c>
 8004fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ff6:	b25b      	sxtb	r3, r3
 8004ff8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ffc:	d103      	bne.n	8005006 <xQueueGenericSend+0x182>
 8004ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005000:	2200      	movs	r2, #0
 8005002:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005006:	f002 f9ed 	bl	80073e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800500a:	1d3a      	adds	r2, r7, #4
 800500c:	f107 0314 	add.w	r3, r7, #20
 8005010:	4611      	mov	r1, r2
 8005012:	4618      	mov	r0, r3
 8005014:	f001 fa18 	bl	8006448 <xTaskCheckForTimeOut>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d124      	bne.n	8005068 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800501e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005020:	f000 fc52 	bl	80058c8 <prvIsQueueFull>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d018      	beq.n	800505c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800502a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502c:	3310      	adds	r3, #16
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	4611      	mov	r1, r2
 8005032:	4618      	mov	r0, r3
 8005034:	f001 f93e 	bl	80062b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005038:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800503a:	f000 fbdd 	bl	80057f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800503e:	f000 ff6d 	bl	8005f1c <xTaskResumeAll>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	f47f af7c 	bne.w	8004f42 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800504a:	4b0c      	ldr	r3, [pc, #48]	; (800507c <xQueueGenericSend+0x1f8>)
 800504c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005050:	601a      	str	r2, [r3, #0]
 8005052:	f3bf 8f4f 	dsb	sy
 8005056:	f3bf 8f6f 	isb	sy
 800505a:	e772      	b.n	8004f42 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800505c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800505e:	f000 fbcb 	bl	80057f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005062:	f000 ff5b 	bl	8005f1c <xTaskResumeAll>
 8005066:	e76c      	b.n	8004f42 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005068:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800506a:	f000 fbc5 	bl	80057f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800506e:	f000 ff55 	bl	8005f1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005072:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005074:	4618      	mov	r0, r3
 8005076:	3738      	adds	r7, #56	; 0x38
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	e000ed04 	.word	0xe000ed04

08005080 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b090      	sub	sp, #64	; 0x40
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
 800508c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005094:	2b00      	cmp	r3, #0
 8005096:	d10a      	bne.n	80050ae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509c:	f383 8811 	msr	BASEPRI, r3
 80050a0:	f3bf 8f6f 	isb	sy
 80050a4:	f3bf 8f4f 	dsb	sy
 80050a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80050aa:	bf00      	nop
 80050ac:	e7fe      	b.n	80050ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d103      	bne.n	80050bc <xQueueGenericSendFromISR+0x3c>
 80050b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d101      	bne.n	80050c0 <xQueueGenericSendFromISR+0x40>
 80050bc:	2301      	movs	r3, #1
 80050be:	e000      	b.n	80050c2 <xQueueGenericSendFromISR+0x42>
 80050c0:	2300      	movs	r3, #0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d10a      	bne.n	80050dc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80050c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ca:	f383 8811 	msr	BASEPRI, r3
 80050ce:	f3bf 8f6f 	isb	sy
 80050d2:	f3bf 8f4f 	dsb	sy
 80050d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80050d8:	bf00      	nop
 80050da:	e7fe      	b.n	80050da <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d103      	bne.n	80050ea <xQueueGenericSendFromISR+0x6a>
 80050e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d101      	bne.n	80050ee <xQueueGenericSendFromISR+0x6e>
 80050ea:	2301      	movs	r3, #1
 80050ec:	e000      	b.n	80050f0 <xQueueGenericSendFromISR+0x70>
 80050ee:	2300      	movs	r3, #0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d10a      	bne.n	800510a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80050f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f8:	f383 8811 	msr	BASEPRI, r3
 80050fc:	f3bf 8f6f 	isb	sy
 8005100:	f3bf 8f4f 	dsb	sy
 8005104:	623b      	str	r3, [r7, #32]
}
 8005106:	bf00      	nop
 8005108:	e7fe      	b.n	8005108 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800510a:	f002 fa1d 	bl	8007548 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800510e:	f3ef 8211 	mrs	r2, BASEPRI
 8005112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005116:	f383 8811 	msr	BASEPRI, r3
 800511a:	f3bf 8f6f 	isb	sy
 800511e:	f3bf 8f4f 	dsb	sy
 8005122:	61fa      	str	r2, [r7, #28]
 8005124:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005126:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005128:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800512a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800512e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005132:	429a      	cmp	r2, r3
 8005134:	d302      	bcc.n	800513c <xQueueGenericSendFromISR+0xbc>
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	2b02      	cmp	r3, #2
 800513a:	d12f      	bne.n	800519c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800513c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800514c:	683a      	ldr	r2, [r7, #0]
 800514e:	68b9      	ldr	r1, [r7, #8]
 8005150:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005152:	f000 fac1 	bl	80056d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005156:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800515a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800515e:	d112      	bne.n	8005186 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005164:	2b00      	cmp	r3, #0
 8005166:	d016      	beq.n	8005196 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516a:	3324      	adds	r3, #36	; 0x24
 800516c:	4618      	mov	r0, r3
 800516e:	f001 f8f1 	bl	8006354 <xTaskRemoveFromEventList>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d00e      	beq.n	8005196 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00b      	beq.n	8005196 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2201      	movs	r2, #1
 8005182:	601a      	str	r2, [r3, #0]
 8005184:	e007      	b.n	8005196 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005186:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800518a:	3301      	adds	r3, #1
 800518c:	b2db      	uxtb	r3, r3
 800518e:	b25a      	sxtb	r2, r3
 8005190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005192:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005196:	2301      	movs	r3, #1
 8005198:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800519a:	e001      	b.n	80051a0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800519c:	2300      	movs	r3, #0
 800519e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051a2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80051aa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80051ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3740      	adds	r7, #64	; 0x40
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b08e      	sub	sp, #56	; 0x38
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
 80051be:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80051c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10a      	bne.n	80051e0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80051ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ce:	f383 8811 	msr	BASEPRI, r3
 80051d2:	f3bf 8f6f 	isb	sy
 80051d6:	f3bf 8f4f 	dsb	sy
 80051da:	623b      	str	r3, [r7, #32]
}
 80051dc:	bf00      	nop
 80051de:	e7fe      	b.n	80051de <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80051e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00a      	beq.n	80051fe <xQueueGiveFromISR+0x48>
	__asm volatile
 80051e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ec:	f383 8811 	msr	BASEPRI, r3
 80051f0:	f3bf 8f6f 	isb	sy
 80051f4:	f3bf 8f4f 	dsb	sy
 80051f8:	61fb      	str	r3, [r7, #28]
}
 80051fa:	bf00      	nop
 80051fc:	e7fe      	b.n	80051fc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80051fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d103      	bne.n	800520e <xQueueGiveFromISR+0x58>
 8005206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d101      	bne.n	8005212 <xQueueGiveFromISR+0x5c>
 800520e:	2301      	movs	r3, #1
 8005210:	e000      	b.n	8005214 <xQueueGiveFromISR+0x5e>
 8005212:	2300      	movs	r3, #0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d10a      	bne.n	800522e <xQueueGiveFromISR+0x78>
	__asm volatile
 8005218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521c:	f383 8811 	msr	BASEPRI, r3
 8005220:	f3bf 8f6f 	isb	sy
 8005224:	f3bf 8f4f 	dsb	sy
 8005228:	61bb      	str	r3, [r7, #24]
}
 800522a:	bf00      	nop
 800522c:	e7fe      	b.n	800522c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800522e:	f002 f98b 	bl	8007548 <vPortValidateInterruptPriority>
	__asm volatile
 8005232:	f3ef 8211 	mrs	r2, BASEPRI
 8005236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523a:	f383 8811 	msr	BASEPRI, r3
 800523e:	f3bf 8f6f 	isb	sy
 8005242:	f3bf 8f4f 	dsb	sy
 8005246:	617a      	str	r2, [r7, #20]
 8005248:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800524a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800524c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800524e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005252:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005258:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800525a:	429a      	cmp	r2, r3
 800525c:	d22b      	bcs.n	80052b6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800525e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005260:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005264:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526a:	1c5a      	adds	r2, r3, #1
 800526c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005270:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005274:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005278:	d112      	bne.n	80052a0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800527a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527e:	2b00      	cmp	r3, #0
 8005280:	d016      	beq.n	80052b0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005284:	3324      	adds	r3, #36	; 0x24
 8005286:	4618      	mov	r0, r3
 8005288:	f001 f864 	bl	8006354 <xTaskRemoveFromEventList>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00e      	beq.n	80052b0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00b      	beq.n	80052b0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	2201      	movs	r2, #1
 800529c:	601a      	str	r2, [r3, #0]
 800529e:	e007      	b.n	80052b0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80052a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052a4:	3301      	adds	r3, #1
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	b25a      	sxtb	r2, r3
 80052aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80052b0:	2301      	movs	r3, #1
 80052b2:	637b      	str	r3, [r7, #52]	; 0x34
 80052b4:	e001      	b.n	80052ba <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80052b6:	2300      	movs	r3, #0
 80052b8:	637b      	str	r3, [r7, #52]	; 0x34
 80052ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052bc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f383 8811 	msr	BASEPRI, r3
}
 80052c4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80052c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3738      	adds	r7, #56	; 0x38
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b08c      	sub	sp, #48	; 0x30
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80052dc:	2300      	movs	r3, #0
 80052de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80052e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10a      	bne.n	8005300 <xQueueReceive+0x30>
	__asm volatile
 80052ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ee:	f383 8811 	msr	BASEPRI, r3
 80052f2:	f3bf 8f6f 	isb	sy
 80052f6:	f3bf 8f4f 	dsb	sy
 80052fa:	623b      	str	r3, [r7, #32]
}
 80052fc:	bf00      	nop
 80052fe:	e7fe      	b.n	80052fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d103      	bne.n	800530e <xQueueReceive+0x3e>
 8005306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <xQueueReceive+0x42>
 800530e:	2301      	movs	r3, #1
 8005310:	e000      	b.n	8005314 <xQueueReceive+0x44>
 8005312:	2300      	movs	r3, #0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d10a      	bne.n	800532e <xQueueReceive+0x5e>
	__asm volatile
 8005318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531c:	f383 8811 	msr	BASEPRI, r3
 8005320:	f3bf 8f6f 	isb	sy
 8005324:	f3bf 8f4f 	dsb	sy
 8005328:	61fb      	str	r3, [r7, #28]
}
 800532a:	bf00      	nop
 800532c:	e7fe      	b.n	800532c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800532e:	f001 f9d3 	bl	80066d8 <xTaskGetSchedulerState>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d102      	bne.n	800533e <xQueueReceive+0x6e>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d101      	bne.n	8005342 <xQueueReceive+0x72>
 800533e:	2301      	movs	r3, #1
 8005340:	e000      	b.n	8005344 <xQueueReceive+0x74>
 8005342:	2300      	movs	r3, #0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d10a      	bne.n	800535e <xQueueReceive+0x8e>
	__asm volatile
 8005348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534c:	f383 8811 	msr	BASEPRI, r3
 8005350:	f3bf 8f6f 	isb	sy
 8005354:	f3bf 8f4f 	dsb	sy
 8005358:	61bb      	str	r3, [r7, #24]
}
 800535a:	bf00      	nop
 800535c:	e7fe      	b.n	800535c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800535e:	f002 f811 	bl	8007384 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005366:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536a:	2b00      	cmp	r3, #0
 800536c:	d01f      	beq.n	80053ae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800536e:	68b9      	ldr	r1, [r7, #8]
 8005370:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005372:	f000 fa1b 	bl	80057ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005378:	1e5a      	subs	r2, r3, #1
 800537a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800537e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00f      	beq.n	80053a6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005388:	3310      	adds	r3, #16
 800538a:	4618      	mov	r0, r3
 800538c:	f000 ffe2 	bl	8006354 <xTaskRemoveFromEventList>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d007      	beq.n	80053a6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005396:	4b3d      	ldr	r3, [pc, #244]	; (800548c <xQueueReceive+0x1bc>)
 8005398:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800539c:	601a      	str	r2, [r3, #0]
 800539e:	f3bf 8f4f 	dsb	sy
 80053a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80053a6:	f002 f81d 	bl	80073e4 <vPortExitCritical>
				return pdPASS;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e069      	b.n	8005482 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d103      	bne.n	80053bc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80053b4:	f002 f816 	bl	80073e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80053b8:	2300      	movs	r3, #0
 80053ba:	e062      	b.n	8005482 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80053bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d106      	bne.n	80053d0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80053c2:	f107 0310 	add.w	r3, r7, #16
 80053c6:	4618      	mov	r0, r3
 80053c8:	f001 f828 	bl	800641c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80053cc:	2301      	movs	r3, #1
 80053ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80053d0:	f002 f808 	bl	80073e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80053d4:	f000 fd94 	bl	8005f00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80053d8:	f001 ffd4 	bl	8007384 <vPortEnterCritical>
 80053dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053e2:	b25b      	sxtb	r3, r3
 80053e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053e8:	d103      	bne.n	80053f2 <xQueueReceive+0x122>
 80053ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053f8:	b25b      	sxtb	r3, r3
 80053fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053fe:	d103      	bne.n	8005408 <xQueueReceive+0x138>
 8005400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005402:	2200      	movs	r2, #0
 8005404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005408:	f001 ffec 	bl	80073e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800540c:	1d3a      	adds	r2, r7, #4
 800540e:	f107 0310 	add.w	r3, r7, #16
 8005412:	4611      	mov	r1, r2
 8005414:	4618      	mov	r0, r3
 8005416:	f001 f817 	bl	8006448 <xTaskCheckForTimeOut>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d123      	bne.n	8005468 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005420:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005422:	f000 fa3b 	bl	800589c <prvIsQueueEmpty>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d017      	beq.n	800545c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800542c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542e:	3324      	adds	r3, #36	; 0x24
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	4611      	mov	r1, r2
 8005434:	4618      	mov	r0, r3
 8005436:	f000 ff3d 	bl	80062b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800543a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800543c:	f000 f9dc 	bl	80057f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005440:	f000 fd6c 	bl	8005f1c <xTaskResumeAll>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d189      	bne.n	800535e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800544a:	4b10      	ldr	r3, [pc, #64]	; (800548c <xQueueReceive+0x1bc>)
 800544c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005450:	601a      	str	r2, [r3, #0]
 8005452:	f3bf 8f4f 	dsb	sy
 8005456:	f3bf 8f6f 	isb	sy
 800545a:	e780      	b.n	800535e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800545c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800545e:	f000 f9cb 	bl	80057f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005462:	f000 fd5b 	bl	8005f1c <xTaskResumeAll>
 8005466:	e77a      	b.n	800535e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005468:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800546a:	f000 f9c5 	bl	80057f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800546e:	f000 fd55 	bl	8005f1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005472:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005474:	f000 fa12 	bl	800589c <prvIsQueueEmpty>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	f43f af6f 	beq.w	800535e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005480:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005482:	4618      	mov	r0, r3
 8005484:	3730      	adds	r7, #48	; 0x30
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	e000ed04 	.word	0xe000ed04

08005490 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b08e      	sub	sp, #56	; 0x38
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800549a:	2300      	movs	r3, #0
 800549c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80054a2:	2300      	movs	r3, #0
 80054a4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80054a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d10a      	bne.n	80054c2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80054ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b0:	f383 8811 	msr	BASEPRI, r3
 80054b4:	f3bf 8f6f 	isb	sy
 80054b8:	f3bf 8f4f 	dsb	sy
 80054bc:	623b      	str	r3, [r7, #32]
}
 80054be:	bf00      	nop
 80054c0:	e7fe      	b.n	80054c0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80054c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00a      	beq.n	80054e0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80054ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ce:	f383 8811 	msr	BASEPRI, r3
 80054d2:	f3bf 8f6f 	isb	sy
 80054d6:	f3bf 8f4f 	dsb	sy
 80054da:	61fb      	str	r3, [r7, #28]
}
 80054dc:	bf00      	nop
 80054de:	e7fe      	b.n	80054de <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80054e0:	f001 f8fa 	bl	80066d8 <xTaskGetSchedulerState>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d102      	bne.n	80054f0 <xQueueSemaphoreTake+0x60>
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d101      	bne.n	80054f4 <xQueueSemaphoreTake+0x64>
 80054f0:	2301      	movs	r3, #1
 80054f2:	e000      	b.n	80054f6 <xQueueSemaphoreTake+0x66>
 80054f4:	2300      	movs	r3, #0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10a      	bne.n	8005510 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80054fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fe:	f383 8811 	msr	BASEPRI, r3
 8005502:	f3bf 8f6f 	isb	sy
 8005506:	f3bf 8f4f 	dsb	sy
 800550a:	61bb      	str	r3, [r7, #24]
}
 800550c:	bf00      	nop
 800550e:	e7fe      	b.n	800550e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005510:	f001 ff38 	bl	8007384 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005518:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800551a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551c:	2b00      	cmp	r3, #0
 800551e:	d024      	beq.n	800556a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005522:	1e5a      	subs	r2, r3, #1
 8005524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005526:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d104      	bne.n	800553a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005530:	f001 fa48 	bl	80069c4 <pvTaskIncrementMutexHeldCount>
 8005534:	4602      	mov	r2, r0
 8005536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005538:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800553a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00f      	beq.n	8005562 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005544:	3310      	adds	r3, #16
 8005546:	4618      	mov	r0, r3
 8005548:	f000 ff04 	bl	8006354 <xTaskRemoveFromEventList>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d007      	beq.n	8005562 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005552:	4b54      	ldr	r3, [pc, #336]	; (80056a4 <xQueueSemaphoreTake+0x214>)
 8005554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005558:	601a      	str	r2, [r3, #0]
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005562:	f001 ff3f 	bl	80073e4 <vPortExitCritical>
				return pdPASS;
 8005566:	2301      	movs	r3, #1
 8005568:	e097      	b.n	800569a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d111      	bne.n	8005594 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00a      	beq.n	800558c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557a:	f383 8811 	msr	BASEPRI, r3
 800557e:	f3bf 8f6f 	isb	sy
 8005582:	f3bf 8f4f 	dsb	sy
 8005586:	617b      	str	r3, [r7, #20]
}
 8005588:	bf00      	nop
 800558a:	e7fe      	b.n	800558a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800558c:	f001 ff2a 	bl	80073e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005590:	2300      	movs	r3, #0
 8005592:	e082      	b.n	800569a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005596:	2b00      	cmp	r3, #0
 8005598:	d106      	bne.n	80055a8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800559a:	f107 030c 	add.w	r3, r7, #12
 800559e:	4618      	mov	r0, r3
 80055a0:	f000 ff3c 	bl	800641c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055a4:	2301      	movs	r3, #1
 80055a6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055a8:	f001 ff1c 	bl	80073e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055ac:	f000 fca8 	bl	8005f00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055b0:	f001 fee8 	bl	8007384 <vPortEnterCritical>
 80055b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055ba:	b25b      	sxtb	r3, r3
 80055bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055c0:	d103      	bne.n	80055ca <xQueueSemaphoreTake+0x13a>
 80055c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055d0:	b25b      	sxtb	r3, r3
 80055d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055d6:	d103      	bne.n	80055e0 <xQueueSemaphoreTake+0x150>
 80055d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055e0:	f001 ff00 	bl	80073e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055e4:	463a      	mov	r2, r7
 80055e6:	f107 030c 	add.w	r3, r7, #12
 80055ea:	4611      	mov	r1, r2
 80055ec:	4618      	mov	r0, r3
 80055ee:	f000 ff2b 	bl	8006448 <xTaskCheckForTimeOut>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d132      	bne.n	800565e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80055f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80055fa:	f000 f94f 	bl	800589c <prvIsQueueEmpty>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d026      	beq.n	8005652 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d109      	bne.n	8005620 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800560c:	f001 feba 	bl	8007384 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	4618      	mov	r0, r3
 8005616:	f001 f87d 	bl	8006714 <xTaskPriorityInherit>
 800561a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800561c:	f001 fee2 	bl	80073e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005622:	3324      	adds	r3, #36	; 0x24
 8005624:	683a      	ldr	r2, [r7, #0]
 8005626:	4611      	mov	r1, r2
 8005628:	4618      	mov	r0, r3
 800562a:	f000 fe43 	bl	80062b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800562e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005630:	f000 f8e2 	bl	80057f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005634:	f000 fc72 	bl	8005f1c <xTaskResumeAll>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	f47f af68 	bne.w	8005510 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005640:	4b18      	ldr	r3, [pc, #96]	; (80056a4 <xQueueSemaphoreTake+0x214>)
 8005642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005646:	601a      	str	r2, [r3, #0]
 8005648:	f3bf 8f4f 	dsb	sy
 800564c:	f3bf 8f6f 	isb	sy
 8005650:	e75e      	b.n	8005510 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005652:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005654:	f000 f8d0 	bl	80057f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005658:	f000 fc60 	bl	8005f1c <xTaskResumeAll>
 800565c:	e758      	b.n	8005510 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800565e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005660:	f000 f8ca 	bl	80057f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005664:	f000 fc5a 	bl	8005f1c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005668:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800566a:	f000 f917 	bl	800589c <prvIsQueueEmpty>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	f43f af4d 	beq.w	8005510 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00d      	beq.n	8005698 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800567c:	f001 fe82 	bl	8007384 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005680:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005682:	f000 f811 	bl	80056a8 <prvGetDisinheritPriorityAfterTimeout>
 8005686:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800568e:	4618      	mov	r0, r3
 8005690:	f001 f916 	bl	80068c0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005694:	f001 fea6 	bl	80073e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005698:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800569a:	4618      	mov	r0, r3
 800569c:	3738      	adds	r7, #56	; 0x38
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	e000ed04 	.word	0xe000ed04

080056a8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d006      	beq.n	80056c6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80056c2:	60fb      	str	r3, [r7, #12]
 80056c4:	e001      	b.n	80056ca <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80056c6:	2300      	movs	r3, #0
 80056c8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80056ca:	68fb      	ldr	r3, [r7, #12]
	}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3714      	adds	r7, #20
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b086      	sub	sp, #24
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80056e4:	2300      	movs	r3, #0
 80056e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d10d      	bne.n	8005712 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d14d      	bne.n	800579a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	4618      	mov	r0, r3
 8005704:	f001 f86e 	bl	80067e4 <xTaskPriorityDisinherit>
 8005708:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	609a      	str	r2, [r3, #8]
 8005710:	e043      	b.n	800579a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d119      	bne.n	800574c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6858      	ldr	r0, [r3, #4]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005720:	461a      	mov	r2, r3
 8005722:	68b9      	ldr	r1, [r7, #8]
 8005724:	f002 f960 	bl	80079e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005730:	441a      	add	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	685a      	ldr	r2, [r3, #4]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	429a      	cmp	r2, r3
 8005740:	d32b      	bcc.n	800579a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	605a      	str	r2, [r3, #4]
 800574a:	e026      	b.n	800579a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	68d8      	ldr	r0, [r3, #12]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005754:	461a      	mov	r2, r3
 8005756:	68b9      	ldr	r1, [r7, #8]
 8005758:	f002 f946 	bl	80079e8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	68da      	ldr	r2, [r3, #12]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005764:	425b      	negs	r3, r3
 8005766:	441a      	add	r2, r3
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	68da      	ldr	r2, [r3, #12]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	429a      	cmp	r2, r3
 8005776:	d207      	bcs.n	8005788 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	689a      	ldr	r2, [r3, #8]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005780:	425b      	negs	r3, r3
 8005782:	441a      	add	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b02      	cmp	r3, #2
 800578c:	d105      	bne.n	800579a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d002      	beq.n	800579a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	3b01      	subs	r3, #1
 8005798:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	1c5a      	adds	r2, r3, #1
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80057a2:	697b      	ldr	r3, [r7, #20]
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3718      	adds	r7, #24
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d018      	beq.n	80057f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	68da      	ldr	r2, [r3, #12]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c6:	441a      	add	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	68da      	ldr	r2, [r3, #12]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d303      	bcc.n	80057e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	68d9      	ldr	r1, [r3, #12]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e8:	461a      	mov	r2, r3
 80057ea:	6838      	ldr	r0, [r7, #0]
 80057ec:	f002 f8fc 	bl	80079e8 <memcpy>
	}
}
 80057f0:	bf00      	nop
 80057f2:	3708      	adds	r7, #8
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005800:	f001 fdc0 	bl	8007384 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800580a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800580c:	e011      	b.n	8005832 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005812:	2b00      	cmp	r3, #0
 8005814:	d012      	beq.n	800583c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	3324      	adds	r3, #36	; 0x24
 800581a:	4618      	mov	r0, r3
 800581c:	f000 fd9a 	bl	8006354 <xTaskRemoveFromEventList>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d001      	beq.n	800582a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005826:	f000 fe71 	bl	800650c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800582a:	7bfb      	ldrb	r3, [r7, #15]
 800582c:	3b01      	subs	r3, #1
 800582e:	b2db      	uxtb	r3, r3
 8005830:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005836:	2b00      	cmp	r3, #0
 8005838:	dce9      	bgt.n	800580e <prvUnlockQueue+0x16>
 800583a:	e000      	b.n	800583e <prvUnlockQueue+0x46>
					break;
 800583c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	22ff      	movs	r2, #255	; 0xff
 8005842:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005846:	f001 fdcd 	bl	80073e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800584a:	f001 fd9b 	bl	8007384 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005854:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005856:	e011      	b.n	800587c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d012      	beq.n	8005886 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	3310      	adds	r3, #16
 8005864:	4618      	mov	r0, r3
 8005866:	f000 fd75 	bl	8006354 <xTaskRemoveFromEventList>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d001      	beq.n	8005874 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005870:	f000 fe4c 	bl	800650c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005874:	7bbb      	ldrb	r3, [r7, #14]
 8005876:	3b01      	subs	r3, #1
 8005878:	b2db      	uxtb	r3, r3
 800587a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800587c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005880:	2b00      	cmp	r3, #0
 8005882:	dce9      	bgt.n	8005858 <prvUnlockQueue+0x60>
 8005884:	e000      	b.n	8005888 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005886:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	22ff      	movs	r2, #255	; 0xff
 800588c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005890:	f001 fda8 	bl	80073e4 <vPortExitCritical>
}
 8005894:	bf00      	nop
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80058a4:	f001 fd6e 	bl	8007384 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d102      	bne.n	80058b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80058b0:	2301      	movs	r3, #1
 80058b2:	60fb      	str	r3, [r7, #12]
 80058b4:	e001      	b.n	80058ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80058b6:	2300      	movs	r3, #0
 80058b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80058ba:	f001 fd93 	bl	80073e4 <vPortExitCritical>

	return xReturn;
 80058be:	68fb      	ldr	r3, [r7, #12]
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3710      	adds	r7, #16
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80058d0:	f001 fd58 	bl	8007384 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058dc:	429a      	cmp	r2, r3
 80058de:	d102      	bne.n	80058e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80058e0:	2301      	movs	r3, #1
 80058e2:	60fb      	str	r3, [r7, #12]
 80058e4:	e001      	b.n	80058ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80058e6:	2300      	movs	r3, #0
 80058e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80058ea:	f001 fd7b 	bl	80073e4 <vPortExitCritical>

	return xReturn;
 80058ee:	68fb      	ldr	r3, [r7, #12]
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005902:	2300      	movs	r3, #0
 8005904:	60fb      	str	r3, [r7, #12]
 8005906:	e014      	b.n	8005932 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005908:	4a0f      	ldr	r2, [pc, #60]	; (8005948 <vQueueAddToRegistry+0x50>)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10b      	bne.n	800592c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005914:	490c      	ldr	r1, [pc, #48]	; (8005948 <vQueueAddToRegistry+0x50>)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	683a      	ldr	r2, [r7, #0]
 800591a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800591e:	4a0a      	ldr	r2, [pc, #40]	; (8005948 <vQueueAddToRegistry+0x50>)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	4413      	add	r3, r2
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800592a:	e006      	b.n	800593a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	3301      	adds	r3, #1
 8005930:	60fb      	str	r3, [r7, #12]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2b07      	cmp	r3, #7
 8005936:	d9e7      	bls.n	8005908 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005938:	bf00      	nop
 800593a:	bf00      	nop
 800593c:	3714      	adds	r7, #20
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	2000096c 	.word	0x2000096c

0800594c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800595c:	f001 fd12 	bl	8007384 <vPortEnterCritical>
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005966:	b25b      	sxtb	r3, r3
 8005968:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800596c:	d103      	bne.n	8005976 <vQueueWaitForMessageRestricted+0x2a>
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800597c:	b25b      	sxtb	r3, r3
 800597e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005982:	d103      	bne.n	800598c <vQueueWaitForMessageRestricted+0x40>
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800598c:	f001 fd2a 	bl	80073e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005994:	2b00      	cmp	r3, #0
 8005996:	d106      	bne.n	80059a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	3324      	adds	r3, #36	; 0x24
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	68b9      	ldr	r1, [r7, #8]
 80059a0:	4618      	mov	r0, r3
 80059a2:	f000 fcab 	bl	80062fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80059a6:	6978      	ldr	r0, [r7, #20]
 80059a8:	f7ff ff26 	bl	80057f8 <prvUnlockQueue>
	}
 80059ac:	bf00      	nop
 80059ae:	3718      	adds	r7, #24
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b08e      	sub	sp, #56	; 0x38
 80059b8:	af04      	add	r7, sp, #16
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
 80059c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80059c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d10a      	bne.n	80059de <xTaskCreateStatic+0x2a>
	__asm volatile
 80059c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059cc:	f383 8811 	msr	BASEPRI, r3
 80059d0:	f3bf 8f6f 	isb	sy
 80059d4:	f3bf 8f4f 	dsb	sy
 80059d8:	623b      	str	r3, [r7, #32]
}
 80059da:	bf00      	nop
 80059dc:	e7fe      	b.n	80059dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80059de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d10a      	bne.n	80059fa <xTaskCreateStatic+0x46>
	__asm volatile
 80059e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e8:	f383 8811 	msr	BASEPRI, r3
 80059ec:	f3bf 8f6f 	isb	sy
 80059f0:	f3bf 8f4f 	dsb	sy
 80059f4:	61fb      	str	r3, [r7, #28]
}
 80059f6:	bf00      	nop
 80059f8:	e7fe      	b.n	80059f8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80059fa:	23bc      	movs	r3, #188	; 0xbc
 80059fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	2bbc      	cmp	r3, #188	; 0xbc
 8005a02:	d00a      	beq.n	8005a1a <xTaskCreateStatic+0x66>
	__asm volatile
 8005a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a08:	f383 8811 	msr	BASEPRI, r3
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	61bb      	str	r3, [r7, #24]
}
 8005a16:	bf00      	nop
 8005a18:	e7fe      	b.n	8005a18 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005a1a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d01e      	beq.n	8005a60 <xTaskCreateStatic+0xac>
 8005a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d01b      	beq.n	8005a60 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a2a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a30:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a34:	2202      	movs	r2, #2
 8005a36:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	9303      	str	r3, [sp, #12]
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a40:	9302      	str	r3, [sp, #8]
 8005a42:	f107 0314 	add.w	r3, r7, #20
 8005a46:	9301      	str	r3, [sp, #4]
 8005a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4a:	9300      	str	r3, [sp, #0]
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	68b9      	ldr	r1, [r7, #8]
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	f000 f850 	bl	8005af8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a5a:	f000 f8f3 	bl	8005c44 <prvAddNewTaskToReadyList>
 8005a5e:	e001      	b.n	8005a64 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005a60:	2300      	movs	r3, #0
 8005a62:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005a64:	697b      	ldr	r3, [r7, #20]
	}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3728      	adds	r7, #40	; 0x28
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b08c      	sub	sp, #48	; 0x30
 8005a72:	af04      	add	r7, sp, #16
 8005a74:	60f8      	str	r0, [r7, #12]
 8005a76:	60b9      	str	r1, [r7, #8]
 8005a78:	603b      	str	r3, [r7, #0]
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005a7e:	88fb      	ldrh	r3, [r7, #6]
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	4618      	mov	r0, r3
 8005a84:	f001 fda0 	bl	80075c8 <pvPortMalloc>
 8005a88:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00e      	beq.n	8005aae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005a90:	20bc      	movs	r0, #188	; 0xbc
 8005a92:	f001 fd99 	bl	80075c8 <pvPortMalloc>
 8005a96:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d003      	beq.n	8005aa6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	631a      	str	r2, [r3, #48]	; 0x30
 8005aa4:	e005      	b.n	8005ab2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005aa6:	6978      	ldr	r0, [r7, #20]
 8005aa8:	f001 fe5a 	bl	8007760 <vPortFree>
 8005aac:	e001      	b.n	8005ab2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d017      	beq.n	8005ae8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005ac0:	88fa      	ldrh	r2, [r7, #6]
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	9303      	str	r3, [sp, #12]
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	9302      	str	r3, [sp, #8]
 8005aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005acc:	9301      	str	r3, [sp, #4]
 8005ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad0:	9300      	str	r3, [sp, #0]
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	68b9      	ldr	r1, [r7, #8]
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f000 f80e 	bl	8005af8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005adc:	69f8      	ldr	r0, [r7, #28]
 8005ade:	f000 f8b1 	bl	8005c44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	61bb      	str	r3, [r7, #24]
 8005ae6:	e002      	b.n	8005aee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ae8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005aec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005aee:	69bb      	ldr	r3, [r7, #24]
	}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3720      	adds	r7, #32
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b088      	sub	sp, #32
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
 8005b04:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b08:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	461a      	mov	r2, r3
 8005b10:	21a5      	movs	r1, #165	; 0xa5
 8005b12:	f001 ff77 	bl	8007a04 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005b20:	3b01      	subs	r3, #1
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	4413      	add	r3, r2
 8005b26:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	f023 0307 	bic.w	r3, r3, #7
 8005b2e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	f003 0307 	and.w	r3, r3, #7
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00a      	beq.n	8005b50 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b3e:	f383 8811 	msr	BASEPRI, r3
 8005b42:	f3bf 8f6f 	isb	sy
 8005b46:	f3bf 8f4f 	dsb	sy
 8005b4a:	617b      	str	r3, [r7, #20]
}
 8005b4c:	bf00      	nop
 8005b4e:	e7fe      	b.n	8005b4e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d01f      	beq.n	8005b96 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b56:	2300      	movs	r3, #0
 8005b58:	61fb      	str	r3, [r7, #28]
 8005b5a:	e012      	b.n	8005b82 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b5c:	68ba      	ldr	r2, [r7, #8]
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	4413      	add	r3, r2
 8005b62:	7819      	ldrb	r1, [r3, #0]
 8005b64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	4413      	add	r3, r2
 8005b6a:	3334      	adds	r3, #52	; 0x34
 8005b6c:	460a      	mov	r2, r1
 8005b6e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	4413      	add	r3, r2
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d006      	beq.n	8005b8a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	3301      	adds	r3, #1
 8005b80:	61fb      	str	r3, [r7, #28]
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	2b0f      	cmp	r3, #15
 8005b86:	d9e9      	bls.n	8005b5c <prvInitialiseNewTask+0x64>
 8005b88:	e000      	b.n	8005b8c <prvInitialiseNewTask+0x94>
			{
				break;
 8005b8a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b94:	e003      	b.n	8005b9e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba0:	2b37      	cmp	r3, #55	; 0x37
 8005ba2:	d901      	bls.n	8005ba8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005ba4:	2337      	movs	r3, #55	; 0x37
 8005ba6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005baa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bb2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbc:	3304      	adds	r3, #4
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7fe ff8e 	bl	8004ae0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc6:	3318      	adds	r3, #24
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f7fe ff89 	bl	8004ae0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bd2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bdc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005be2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be6:	2200      	movs	r2, #0
 8005be8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf6:	3354      	adds	r3, #84	; 0x54
 8005bf8:	2260      	movs	r2, #96	; 0x60
 8005bfa:	2100      	movs	r1, #0
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f001 ff01 	bl	8007a04 <memset>
 8005c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c04:	4a0c      	ldr	r2, [pc, #48]	; (8005c38 <prvInitialiseNewTask+0x140>)
 8005c06:	659a      	str	r2, [r3, #88]	; 0x58
 8005c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0a:	4a0c      	ldr	r2, [pc, #48]	; (8005c3c <prvInitialiseNewTask+0x144>)
 8005c0c:	65da      	str	r2, [r3, #92]	; 0x5c
 8005c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c10:	4a0b      	ldr	r2, [pc, #44]	; (8005c40 <prvInitialiseNewTask+0x148>)
 8005c12:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005c14:	683a      	ldr	r2, [r7, #0]
 8005c16:	68f9      	ldr	r1, [r7, #12]
 8005c18:	69b8      	ldr	r0, [r7, #24]
 8005c1a:	f001 fa89 	bl	8007130 <pxPortInitialiseStack>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c22:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d002      	beq.n	8005c30 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c2e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c30:	bf00      	nop
 8005c32:	3720      	adds	r7, #32
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	08007cd0 	.word	0x08007cd0
 8005c3c:	08007cf0 	.word	0x08007cf0
 8005c40:	08007cb0 	.word	0x08007cb0

08005c44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005c4c:	f001 fb9a 	bl	8007384 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005c50:	4b2d      	ldr	r3, [pc, #180]	; (8005d08 <prvAddNewTaskToReadyList+0xc4>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	3301      	adds	r3, #1
 8005c56:	4a2c      	ldr	r2, [pc, #176]	; (8005d08 <prvAddNewTaskToReadyList+0xc4>)
 8005c58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005c5a:	4b2c      	ldr	r3, [pc, #176]	; (8005d0c <prvAddNewTaskToReadyList+0xc8>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d109      	bne.n	8005c76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005c62:	4a2a      	ldr	r2, [pc, #168]	; (8005d0c <prvAddNewTaskToReadyList+0xc8>)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005c68:	4b27      	ldr	r3, [pc, #156]	; (8005d08 <prvAddNewTaskToReadyList+0xc4>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d110      	bne.n	8005c92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005c70:	f000 fc70 	bl	8006554 <prvInitialiseTaskLists>
 8005c74:	e00d      	b.n	8005c92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005c76:	4b26      	ldr	r3, [pc, #152]	; (8005d10 <prvAddNewTaskToReadyList+0xcc>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d109      	bne.n	8005c92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c7e:	4b23      	ldr	r3, [pc, #140]	; (8005d0c <prvAddNewTaskToReadyList+0xc8>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d802      	bhi.n	8005c92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005c8c:	4a1f      	ldr	r2, [pc, #124]	; (8005d0c <prvAddNewTaskToReadyList+0xc8>)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005c92:	4b20      	ldr	r3, [pc, #128]	; (8005d14 <prvAddNewTaskToReadyList+0xd0>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	3301      	adds	r3, #1
 8005c98:	4a1e      	ldr	r2, [pc, #120]	; (8005d14 <prvAddNewTaskToReadyList+0xd0>)
 8005c9a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005c9c:	4b1d      	ldr	r3, [pc, #116]	; (8005d14 <prvAddNewTaskToReadyList+0xd0>)
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ca8:	4b1b      	ldr	r3, [pc, #108]	; (8005d18 <prvAddNewTaskToReadyList+0xd4>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d903      	bls.n	8005cb8 <prvAddNewTaskToReadyList+0x74>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb4:	4a18      	ldr	r2, [pc, #96]	; (8005d18 <prvAddNewTaskToReadyList+0xd4>)
 8005cb6:	6013      	str	r3, [r2, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	4413      	add	r3, r2
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	4a15      	ldr	r2, [pc, #84]	; (8005d1c <prvAddNewTaskToReadyList+0xd8>)
 8005cc6:	441a      	add	r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	3304      	adds	r3, #4
 8005ccc:	4619      	mov	r1, r3
 8005cce:	4610      	mov	r0, r2
 8005cd0:	f7fe ff13 	bl	8004afa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005cd4:	f001 fb86 	bl	80073e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005cd8:	4b0d      	ldr	r3, [pc, #52]	; (8005d10 <prvAddNewTaskToReadyList+0xcc>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00e      	beq.n	8005cfe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005ce0:	4b0a      	ldr	r3, [pc, #40]	; (8005d0c <prvAddNewTaskToReadyList+0xc8>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d207      	bcs.n	8005cfe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005cee:	4b0c      	ldr	r3, [pc, #48]	; (8005d20 <prvAddNewTaskToReadyList+0xdc>)
 8005cf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cf4:	601a      	str	r2, [r3, #0]
 8005cf6:	f3bf 8f4f 	dsb	sy
 8005cfa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cfe:	bf00      	nop
 8005d00:	3708      	adds	r7, #8
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	20000e80 	.word	0x20000e80
 8005d0c:	200009ac 	.word	0x200009ac
 8005d10:	20000e8c 	.word	0x20000e8c
 8005d14:	20000e9c 	.word	0x20000e9c
 8005d18:	20000e88 	.word	0x20000e88
 8005d1c:	200009b0 	.word	0x200009b0
 8005d20:	e000ed04 	.word	0xe000ed04

08005d24 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b08a      	sub	sp, #40	; 0x28
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d10a      	bne.n	8005d4e <vTaskDelayUntil+0x2a>
	__asm volatile
 8005d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3c:	f383 8811 	msr	BASEPRI, r3
 8005d40:	f3bf 8f6f 	isb	sy
 8005d44:	f3bf 8f4f 	dsb	sy
 8005d48:	617b      	str	r3, [r7, #20]
}
 8005d4a:	bf00      	nop
 8005d4c:	e7fe      	b.n	8005d4c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d10a      	bne.n	8005d6a <vTaskDelayUntil+0x46>
	__asm volatile
 8005d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d58:	f383 8811 	msr	BASEPRI, r3
 8005d5c:	f3bf 8f6f 	isb	sy
 8005d60:	f3bf 8f4f 	dsb	sy
 8005d64:	613b      	str	r3, [r7, #16]
}
 8005d66:	bf00      	nop
 8005d68:	e7fe      	b.n	8005d68 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8005d6a:	4b2a      	ldr	r3, [pc, #168]	; (8005e14 <vTaskDelayUntil+0xf0>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00a      	beq.n	8005d88 <vTaskDelayUntil+0x64>
	__asm volatile
 8005d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d76:	f383 8811 	msr	BASEPRI, r3
 8005d7a:	f3bf 8f6f 	isb	sy
 8005d7e:	f3bf 8f4f 	dsb	sy
 8005d82:	60fb      	str	r3, [r7, #12]
}
 8005d84:	bf00      	nop
 8005d86:	e7fe      	b.n	8005d86 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8005d88:	f000 f8ba 	bl	8005f00 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8005d8c:	4b22      	ldr	r3, [pc, #136]	; (8005e18 <vTaskDelayUntil+0xf4>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	683a      	ldr	r2, [r7, #0]
 8005d98:	4413      	add	r3, r2
 8005d9a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6a3a      	ldr	r2, [r7, #32]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d20b      	bcs.n	8005dbe <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	69fa      	ldr	r2, [r7, #28]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d211      	bcs.n	8005dd4 <vTaskDelayUntil+0xb0>
 8005db0:	69fa      	ldr	r2, [r7, #28]
 8005db2:	6a3b      	ldr	r3, [r7, #32]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d90d      	bls.n	8005dd4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8005db8:	2301      	movs	r3, #1
 8005dba:	627b      	str	r3, [r7, #36]	; 0x24
 8005dbc:	e00a      	b.n	8005dd4 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	69fa      	ldr	r2, [r7, #28]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d303      	bcc.n	8005dd0 <vTaskDelayUntil+0xac>
 8005dc8:	69fa      	ldr	r2, [r7, #28]
 8005dca:	6a3b      	ldr	r3, [r7, #32]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d901      	bls.n	8005dd4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	69fa      	ldr	r2, [r7, #28]
 8005dd8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8005dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d006      	beq.n	8005dee <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8005de0:	69fa      	ldr	r2, [r7, #28]
 8005de2:	6a3b      	ldr	r3, [r7, #32]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	2100      	movs	r1, #0
 8005de8:	4618      	mov	r0, r3
 8005dea:	f000 fdff 	bl	80069ec <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8005dee:	f000 f895 	bl	8005f1c <xTaskResumeAll>
 8005df2:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d107      	bne.n	8005e0a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8005dfa:	4b08      	ldr	r3, [pc, #32]	; (8005e1c <vTaskDelayUntil+0xf8>)
 8005dfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e00:	601a      	str	r2, [r3, #0]
 8005e02:	f3bf 8f4f 	dsb	sy
 8005e06:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e0a:	bf00      	nop
 8005e0c:	3728      	adds	r7, #40	; 0x28
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	20000ea8 	.word	0x20000ea8
 8005e18:	20000e84 	.word	0x20000e84
 8005e1c:	e000ed04 	.word	0xe000ed04

08005e20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b08a      	sub	sp, #40	; 0x28
 8005e24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005e26:	2300      	movs	r3, #0
 8005e28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005e2e:	463a      	mov	r2, r7
 8005e30:	1d39      	adds	r1, r7, #4
 8005e32:	f107 0308 	add.w	r3, r7, #8
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7fe fdfe 	bl	8004a38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005e3c:	6839      	ldr	r1, [r7, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	68ba      	ldr	r2, [r7, #8]
 8005e42:	9202      	str	r2, [sp, #8]
 8005e44:	9301      	str	r3, [sp, #4]
 8005e46:	2300      	movs	r3, #0
 8005e48:	9300      	str	r3, [sp, #0]
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	460a      	mov	r2, r1
 8005e4e:	4924      	ldr	r1, [pc, #144]	; (8005ee0 <vTaskStartScheduler+0xc0>)
 8005e50:	4824      	ldr	r0, [pc, #144]	; (8005ee4 <vTaskStartScheduler+0xc4>)
 8005e52:	f7ff fdaf 	bl	80059b4 <xTaskCreateStatic>
 8005e56:	4603      	mov	r3, r0
 8005e58:	4a23      	ldr	r2, [pc, #140]	; (8005ee8 <vTaskStartScheduler+0xc8>)
 8005e5a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005e5c:	4b22      	ldr	r3, [pc, #136]	; (8005ee8 <vTaskStartScheduler+0xc8>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d002      	beq.n	8005e6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005e64:	2301      	movs	r3, #1
 8005e66:	617b      	str	r3, [r7, #20]
 8005e68:	e001      	b.n	8005e6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d102      	bne.n	8005e7a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005e74:	f000 fe0e 	bl	8006a94 <xTimerCreateTimerTask>
 8005e78:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d11b      	bne.n	8005eb8 <vTaskStartScheduler+0x98>
	__asm volatile
 8005e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e84:	f383 8811 	msr	BASEPRI, r3
 8005e88:	f3bf 8f6f 	isb	sy
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	613b      	str	r3, [r7, #16]
}
 8005e92:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005e94:	4b15      	ldr	r3, [pc, #84]	; (8005eec <vTaskStartScheduler+0xcc>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	3354      	adds	r3, #84	; 0x54
 8005e9a:	4a15      	ldr	r2, [pc, #84]	; (8005ef0 <vTaskStartScheduler+0xd0>)
 8005e9c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005e9e:	4b15      	ldr	r3, [pc, #84]	; (8005ef4 <vTaskStartScheduler+0xd4>)
 8005ea0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ea4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005ea6:	4b14      	ldr	r3, [pc, #80]	; (8005ef8 <vTaskStartScheduler+0xd8>)
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005eac:	4b13      	ldr	r3, [pc, #76]	; (8005efc <vTaskStartScheduler+0xdc>)
 8005eae:	2200      	movs	r2, #0
 8005eb0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005eb2:	f001 f9c5 	bl	8007240 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005eb6:	e00e      	b.n	8005ed6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ebe:	d10a      	bne.n	8005ed6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8005ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec4:	f383 8811 	msr	BASEPRI, r3
 8005ec8:	f3bf 8f6f 	isb	sy
 8005ecc:	f3bf 8f4f 	dsb	sy
 8005ed0:	60fb      	str	r3, [r7, #12]
}
 8005ed2:	bf00      	nop
 8005ed4:	e7fe      	b.n	8005ed4 <vTaskStartScheduler+0xb4>
}
 8005ed6:	bf00      	nop
 8005ed8:	3718      	adds	r7, #24
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	08007bd8 	.word	0x08007bd8
 8005ee4:	08006525 	.word	0x08006525
 8005ee8:	20000ea4 	.word	0x20000ea4
 8005eec:	200009ac 	.word	0x200009ac
 8005ef0:	20000018 	.word	0x20000018
 8005ef4:	20000ea0 	.word	0x20000ea0
 8005ef8:	20000e8c 	.word	0x20000e8c
 8005efc:	20000e84 	.word	0x20000e84

08005f00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005f00:	b480      	push	{r7}
 8005f02:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005f04:	4b04      	ldr	r3, [pc, #16]	; (8005f18 <vTaskSuspendAll+0x18>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	3301      	adds	r3, #1
 8005f0a:	4a03      	ldr	r2, [pc, #12]	; (8005f18 <vTaskSuspendAll+0x18>)
 8005f0c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005f0e:	bf00      	nop
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr
 8005f18:	20000ea8 	.word	0x20000ea8

08005f1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005f22:	2300      	movs	r3, #0
 8005f24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005f26:	2300      	movs	r3, #0
 8005f28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005f2a:	4b42      	ldr	r3, [pc, #264]	; (8006034 <xTaskResumeAll+0x118>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d10a      	bne.n	8005f48 <xTaskResumeAll+0x2c>
	__asm volatile
 8005f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f36:	f383 8811 	msr	BASEPRI, r3
 8005f3a:	f3bf 8f6f 	isb	sy
 8005f3e:	f3bf 8f4f 	dsb	sy
 8005f42:	603b      	str	r3, [r7, #0]
}
 8005f44:	bf00      	nop
 8005f46:	e7fe      	b.n	8005f46 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005f48:	f001 fa1c 	bl	8007384 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005f4c:	4b39      	ldr	r3, [pc, #228]	; (8006034 <xTaskResumeAll+0x118>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	3b01      	subs	r3, #1
 8005f52:	4a38      	ldr	r2, [pc, #224]	; (8006034 <xTaskResumeAll+0x118>)
 8005f54:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f56:	4b37      	ldr	r3, [pc, #220]	; (8006034 <xTaskResumeAll+0x118>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d162      	bne.n	8006024 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005f5e:	4b36      	ldr	r3, [pc, #216]	; (8006038 <xTaskResumeAll+0x11c>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d05e      	beq.n	8006024 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f66:	e02f      	b.n	8005fc8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f68:	4b34      	ldr	r3, [pc, #208]	; (800603c <xTaskResumeAll+0x120>)
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	3318      	adds	r3, #24
 8005f74:	4618      	mov	r0, r3
 8005f76:	f7fe fe1d 	bl	8004bb4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	3304      	adds	r3, #4
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7fe fe18 	bl	8004bb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f88:	4b2d      	ldr	r3, [pc, #180]	; (8006040 <xTaskResumeAll+0x124>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d903      	bls.n	8005f98 <xTaskResumeAll+0x7c>
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f94:	4a2a      	ldr	r2, [pc, #168]	; (8006040 <xTaskResumeAll+0x124>)
 8005f96:	6013      	str	r3, [r2, #0]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	4413      	add	r3, r2
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	4a27      	ldr	r2, [pc, #156]	; (8006044 <xTaskResumeAll+0x128>)
 8005fa6:	441a      	add	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	3304      	adds	r3, #4
 8005fac:	4619      	mov	r1, r3
 8005fae:	4610      	mov	r0, r2
 8005fb0:	f7fe fda3 	bl	8004afa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fb8:	4b23      	ldr	r3, [pc, #140]	; (8006048 <xTaskResumeAll+0x12c>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d302      	bcc.n	8005fc8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005fc2:	4b22      	ldr	r3, [pc, #136]	; (800604c <xTaskResumeAll+0x130>)
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fc8:	4b1c      	ldr	r3, [pc, #112]	; (800603c <xTaskResumeAll+0x120>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1cb      	bne.n	8005f68 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d001      	beq.n	8005fda <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005fd6:	f000 fb5f 	bl	8006698 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005fda:	4b1d      	ldr	r3, [pc, #116]	; (8006050 <xTaskResumeAll+0x134>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d010      	beq.n	8006008 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005fe6:	f000 f847 	bl	8006078 <xTaskIncrementTick>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d002      	beq.n	8005ff6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005ff0:	4b16      	ldr	r3, [pc, #88]	; (800604c <xTaskResumeAll+0x130>)
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1f1      	bne.n	8005fe6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006002:	4b13      	ldr	r3, [pc, #76]	; (8006050 <xTaskResumeAll+0x134>)
 8006004:	2200      	movs	r2, #0
 8006006:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006008:	4b10      	ldr	r3, [pc, #64]	; (800604c <xTaskResumeAll+0x130>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d009      	beq.n	8006024 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006010:	2301      	movs	r3, #1
 8006012:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006014:	4b0f      	ldr	r3, [pc, #60]	; (8006054 <xTaskResumeAll+0x138>)
 8006016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800601a:	601a      	str	r2, [r3, #0]
 800601c:	f3bf 8f4f 	dsb	sy
 8006020:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006024:	f001 f9de 	bl	80073e4 <vPortExitCritical>

	return xAlreadyYielded;
 8006028:	68bb      	ldr	r3, [r7, #8]
}
 800602a:	4618      	mov	r0, r3
 800602c:	3710      	adds	r7, #16
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	20000ea8 	.word	0x20000ea8
 8006038:	20000e80 	.word	0x20000e80
 800603c:	20000e40 	.word	0x20000e40
 8006040:	20000e88 	.word	0x20000e88
 8006044:	200009b0 	.word	0x200009b0
 8006048:	200009ac 	.word	0x200009ac
 800604c:	20000e94 	.word	0x20000e94
 8006050:	20000e90 	.word	0x20000e90
 8006054:	e000ed04 	.word	0xe000ed04

08006058 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800605e:	4b05      	ldr	r3, [pc, #20]	; (8006074 <xTaskGetTickCount+0x1c>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006064:	687b      	ldr	r3, [r7, #4]
}
 8006066:	4618      	mov	r0, r3
 8006068:	370c      	adds	r7, #12
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	20000e84 	.word	0x20000e84

08006078 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b086      	sub	sp, #24
 800607c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800607e:	2300      	movs	r3, #0
 8006080:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006082:	4b4f      	ldr	r3, [pc, #316]	; (80061c0 <xTaskIncrementTick+0x148>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	f040 808f 	bne.w	80061aa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800608c:	4b4d      	ldr	r3, [pc, #308]	; (80061c4 <xTaskIncrementTick+0x14c>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	3301      	adds	r3, #1
 8006092:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006094:	4a4b      	ldr	r2, [pc, #300]	; (80061c4 <xTaskIncrementTick+0x14c>)
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d120      	bne.n	80060e2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80060a0:	4b49      	ldr	r3, [pc, #292]	; (80061c8 <xTaskIncrementTick+0x150>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00a      	beq.n	80060c0 <xTaskIncrementTick+0x48>
	__asm volatile
 80060aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ae:	f383 8811 	msr	BASEPRI, r3
 80060b2:	f3bf 8f6f 	isb	sy
 80060b6:	f3bf 8f4f 	dsb	sy
 80060ba:	603b      	str	r3, [r7, #0]
}
 80060bc:	bf00      	nop
 80060be:	e7fe      	b.n	80060be <xTaskIncrementTick+0x46>
 80060c0:	4b41      	ldr	r3, [pc, #260]	; (80061c8 <xTaskIncrementTick+0x150>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	60fb      	str	r3, [r7, #12]
 80060c6:	4b41      	ldr	r3, [pc, #260]	; (80061cc <xTaskIncrementTick+0x154>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a3f      	ldr	r2, [pc, #252]	; (80061c8 <xTaskIncrementTick+0x150>)
 80060cc:	6013      	str	r3, [r2, #0]
 80060ce:	4a3f      	ldr	r2, [pc, #252]	; (80061cc <xTaskIncrementTick+0x154>)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6013      	str	r3, [r2, #0]
 80060d4:	4b3e      	ldr	r3, [pc, #248]	; (80061d0 <xTaskIncrementTick+0x158>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	3301      	adds	r3, #1
 80060da:	4a3d      	ldr	r2, [pc, #244]	; (80061d0 <xTaskIncrementTick+0x158>)
 80060dc:	6013      	str	r3, [r2, #0]
 80060de:	f000 fadb 	bl	8006698 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80060e2:	4b3c      	ldr	r3, [pc, #240]	; (80061d4 <xTaskIncrementTick+0x15c>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d349      	bcc.n	8006180 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060ec:	4b36      	ldr	r3, [pc, #216]	; (80061c8 <xTaskIncrementTick+0x150>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d104      	bne.n	8006100 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060f6:	4b37      	ldr	r3, [pc, #220]	; (80061d4 <xTaskIncrementTick+0x15c>)
 80060f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80060fc:	601a      	str	r2, [r3, #0]
					break;
 80060fe:	e03f      	b.n	8006180 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006100:	4b31      	ldr	r3, [pc, #196]	; (80061c8 <xTaskIncrementTick+0x150>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	429a      	cmp	r2, r3
 8006116:	d203      	bcs.n	8006120 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006118:	4a2e      	ldr	r2, [pc, #184]	; (80061d4 <xTaskIncrementTick+0x15c>)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800611e:	e02f      	b.n	8006180 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	3304      	adds	r3, #4
 8006124:	4618      	mov	r0, r3
 8006126:	f7fe fd45 	bl	8004bb4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800612e:	2b00      	cmp	r3, #0
 8006130:	d004      	beq.n	800613c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	3318      	adds	r3, #24
 8006136:	4618      	mov	r0, r3
 8006138:	f7fe fd3c 	bl	8004bb4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006140:	4b25      	ldr	r3, [pc, #148]	; (80061d8 <xTaskIncrementTick+0x160>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	429a      	cmp	r2, r3
 8006146:	d903      	bls.n	8006150 <xTaskIncrementTick+0xd8>
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614c:	4a22      	ldr	r2, [pc, #136]	; (80061d8 <xTaskIncrementTick+0x160>)
 800614e:	6013      	str	r3, [r2, #0]
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006154:	4613      	mov	r3, r2
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	4413      	add	r3, r2
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	4a1f      	ldr	r2, [pc, #124]	; (80061dc <xTaskIncrementTick+0x164>)
 800615e:	441a      	add	r2, r3
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	3304      	adds	r3, #4
 8006164:	4619      	mov	r1, r3
 8006166:	4610      	mov	r0, r2
 8006168:	f7fe fcc7 	bl	8004afa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006170:	4b1b      	ldr	r3, [pc, #108]	; (80061e0 <xTaskIncrementTick+0x168>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006176:	429a      	cmp	r2, r3
 8006178:	d3b8      	bcc.n	80060ec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800617a:	2301      	movs	r3, #1
 800617c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800617e:	e7b5      	b.n	80060ec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006180:	4b17      	ldr	r3, [pc, #92]	; (80061e0 <xTaskIncrementTick+0x168>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006186:	4915      	ldr	r1, [pc, #84]	; (80061dc <xTaskIncrementTick+0x164>)
 8006188:	4613      	mov	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4413      	add	r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	440b      	add	r3, r1
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2b01      	cmp	r3, #1
 8006196:	d901      	bls.n	800619c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006198:	2301      	movs	r3, #1
 800619a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800619c:	4b11      	ldr	r3, [pc, #68]	; (80061e4 <xTaskIncrementTick+0x16c>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d007      	beq.n	80061b4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80061a4:	2301      	movs	r3, #1
 80061a6:	617b      	str	r3, [r7, #20]
 80061a8:	e004      	b.n	80061b4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80061aa:	4b0f      	ldr	r3, [pc, #60]	; (80061e8 <xTaskIncrementTick+0x170>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	3301      	adds	r3, #1
 80061b0:	4a0d      	ldr	r2, [pc, #52]	; (80061e8 <xTaskIncrementTick+0x170>)
 80061b2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80061b4:	697b      	ldr	r3, [r7, #20]
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3718      	adds	r7, #24
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	20000ea8 	.word	0x20000ea8
 80061c4:	20000e84 	.word	0x20000e84
 80061c8:	20000e38 	.word	0x20000e38
 80061cc:	20000e3c 	.word	0x20000e3c
 80061d0:	20000e98 	.word	0x20000e98
 80061d4:	20000ea0 	.word	0x20000ea0
 80061d8:	20000e88 	.word	0x20000e88
 80061dc:	200009b0 	.word	0x200009b0
 80061e0:	200009ac 	.word	0x200009ac
 80061e4:	20000e94 	.word	0x20000e94
 80061e8:	20000e90 	.word	0x20000e90

080061ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80061ec:	b480      	push	{r7}
 80061ee:	b085      	sub	sp, #20
 80061f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80061f2:	4b2a      	ldr	r3, [pc, #168]	; (800629c <vTaskSwitchContext+0xb0>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d003      	beq.n	8006202 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80061fa:	4b29      	ldr	r3, [pc, #164]	; (80062a0 <vTaskSwitchContext+0xb4>)
 80061fc:	2201      	movs	r2, #1
 80061fe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006200:	e046      	b.n	8006290 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006202:	4b27      	ldr	r3, [pc, #156]	; (80062a0 <vTaskSwitchContext+0xb4>)
 8006204:	2200      	movs	r2, #0
 8006206:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006208:	4b26      	ldr	r3, [pc, #152]	; (80062a4 <vTaskSwitchContext+0xb8>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	60fb      	str	r3, [r7, #12]
 800620e:	e010      	b.n	8006232 <vTaskSwitchContext+0x46>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d10a      	bne.n	800622c <vTaskSwitchContext+0x40>
	__asm volatile
 8006216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621a:	f383 8811 	msr	BASEPRI, r3
 800621e:	f3bf 8f6f 	isb	sy
 8006222:	f3bf 8f4f 	dsb	sy
 8006226:	607b      	str	r3, [r7, #4]
}
 8006228:	bf00      	nop
 800622a:	e7fe      	b.n	800622a <vTaskSwitchContext+0x3e>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	3b01      	subs	r3, #1
 8006230:	60fb      	str	r3, [r7, #12]
 8006232:	491d      	ldr	r1, [pc, #116]	; (80062a8 <vTaskSwitchContext+0xbc>)
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	4613      	mov	r3, r2
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	4413      	add	r3, r2
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	440b      	add	r3, r1
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d0e4      	beq.n	8006210 <vTaskSwitchContext+0x24>
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	4613      	mov	r3, r2
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	4413      	add	r3, r2
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	4a15      	ldr	r2, [pc, #84]	; (80062a8 <vTaskSwitchContext+0xbc>)
 8006252:	4413      	add	r3, r2
 8006254:	60bb      	str	r3, [r7, #8]
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	685a      	ldr	r2, [r3, #4]
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	605a      	str	r2, [r3, #4]
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	685a      	ldr	r2, [r3, #4]
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	3308      	adds	r3, #8
 8006268:	429a      	cmp	r2, r3
 800626a:	d104      	bne.n	8006276 <vTaskSwitchContext+0x8a>
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	685a      	ldr	r2, [r3, #4]
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	605a      	str	r2, [r3, #4]
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	4a0b      	ldr	r2, [pc, #44]	; (80062ac <vTaskSwitchContext+0xc0>)
 800627e:	6013      	str	r3, [r2, #0]
 8006280:	4a08      	ldr	r2, [pc, #32]	; (80062a4 <vTaskSwitchContext+0xb8>)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006286:	4b09      	ldr	r3, [pc, #36]	; (80062ac <vTaskSwitchContext+0xc0>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	3354      	adds	r3, #84	; 0x54
 800628c:	4a08      	ldr	r2, [pc, #32]	; (80062b0 <vTaskSwitchContext+0xc4>)
 800628e:	6013      	str	r3, [r2, #0]
}
 8006290:	bf00      	nop
 8006292:	3714      	adds	r7, #20
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr
 800629c:	20000ea8 	.word	0x20000ea8
 80062a0:	20000e94 	.word	0x20000e94
 80062a4:	20000e88 	.word	0x20000e88
 80062a8:	200009b0 	.word	0x200009b0
 80062ac:	200009ac 	.word	0x200009ac
 80062b0:	20000018 	.word	0x20000018

080062b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d10a      	bne.n	80062da <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80062c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c8:	f383 8811 	msr	BASEPRI, r3
 80062cc:	f3bf 8f6f 	isb	sy
 80062d0:	f3bf 8f4f 	dsb	sy
 80062d4:	60fb      	str	r3, [r7, #12]
}
 80062d6:	bf00      	nop
 80062d8:	e7fe      	b.n	80062d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80062da:	4b07      	ldr	r3, [pc, #28]	; (80062f8 <vTaskPlaceOnEventList+0x44>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	3318      	adds	r3, #24
 80062e0:	4619      	mov	r1, r3
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f7fe fc2d 	bl	8004b42 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80062e8:	2101      	movs	r1, #1
 80062ea:	6838      	ldr	r0, [r7, #0]
 80062ec:	f000 fb7e 	bl	80069ec <prvAddCurrentTaskToDelayedList>
}
 80062f0:	bf00      	nop
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	200009ac 	.word	0x200009ac

080062fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b086      	sub	sp, #24
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d10a      	bne.n	8006324 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800630e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006312:	f383 8811 	msr	BASEPRI, r3
 8006316:	f3bf 8f6f 	isb	sy
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	617b      	str	r3, [r7, #20]
}
 8006320:	bf00      	nop
 8006322:	e7fe      	b.n	8006322 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006324:	4b0a      	ldr	r3, [pc, #40]	; (8006350 <vTaskPlaceOnEventListRestricted+0x54>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	3318      	adds	r3, #24
 800632a:	4619      	mov	r1, r3
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f7fe fbe4 	bl	8004afa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d002      	beq.n	800633e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006338:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800633c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800633e:	6879      	ldr	r1, [r7, #4]
 8006340:	68b8      	ldr	r0, [r7, #8]
 8006342:	f000 fb53 	bl	80069ec <prvAddCurrentTaskToDelayedList>
	}
 8006346:	bf00      	nop
 8006348:	3718      	adds	r7, #24
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	200009ac 	.word	0x200009ac

08006354 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b086      	sub	sp, #24
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10a      	bne.n	8006380 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800636a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636e:	f383 8811 	msr	BASEPRI, r3
 8006372:	f3bf 8f6f 	isb	sy
 8006376:	f3bf 8f4f 	dsb	sy
 800637a:	60fb      	str	r3, [r7, #12]
}
 800637c:	bf00      	nop
 800637e:	e7fe      	b.n	800637e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	3318      	adds	r3, #24
 8006384:	4618      	mov	r0, r3
 8006386:	f7fe fc15 	bl	8004bb4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800638a:	4b1e      	ldr	r3, [pc, #120]	; (8006404 <xTaskRemoveFromEventList+0xb0>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d11d      	bne.n	80063ce <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	3304      	adds	r3, #4
 8006396:	4618      	mov	r0, r3
 8006398:	f7fe fc0c 	bl	8004bb4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a0:	4b19      	ldr	r3, [pc, #100]	; (8006408 <xTaskRemoveFromEventList+0xb4>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d903      	bls.n	80063b0 <xTaskRemoveFromEventList+0x5c>
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ac:	4a16      	ldr	r2, [pc, #88]	; (8006408 <xTaskRemoveFromEventList+0xb4>)
 80063ae:	6013      	str	r3, [r2, #0]
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063b4:	4613      	mov	r3, r2
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	4413      	add	r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	4a13      	ldr	r2, [pc, #76]	; (800640c <xTaskRemoveFromEventList+0xb8>)
 80063be:	441a      	add	r2, r3
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	3304      	adds	r3, #4
 80063c4:	4619      	mov	r1, r3
 80063c6:	4610      	mov	r0, r2
 80063c8:	f7fe fb97 	bl	8004afa <vListInsertEnd>
 80063cc:	e005      	b.n	80063da <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	3318      	adds	r3, #24
 80063d2:	4619      	mov	r1, r3
 80063d4:	480e      	ldr	r0, [pc, #56]	; (8006410 <xTaskRemoveFromEventList+0xbc>)
 80063d6:	f7fe fb90 	bl	8004afa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063de:	4b0d      	ldr	r3, [pc, #52]	; (8006414 <xTaskRemoveFromEventList+0xc0>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d905      	bls.n	80063f4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80063e8:	2301      	movs	r3, #1
 80063ea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80063ec:	4b0a      	ldr	r3, [pc, #40]	; (8006418 <xTaskRemoveFromEventList+0xc4>)
 80063ee:	2201      	movs	r2, #1
 80063f0:	601a      	str	r2, [r3, #0]
 80063f2:	e001      	b.n	80063f8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80063f4:	2300      	movs	r3, #0
 80063f6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80063f8:	697b      	ldr	r3, [r7, #20]
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3718      	adds	r7, #24
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	20000ea8 	.word	0x20000ea8
 8006408:	20000e88 	.word	0x20000e88
 800640c:	200009b0 	.word	0x200009b0
 8006410:	20000e40 	.word	0x20000e40
 8006414:	200009ac 	.word	0x200009ac
 8006418:	20000e94 	.word	0x20000e94

0800641c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006424:	4b06      	ldr	r3, [pc, #24]	; (8006440 <vTaskInternalSetTimeOutState+0x24>)
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800642c:	4b05      	ldr	r3, [pc, #20]	; (8006444 <vTaskInternalSetTimeOutState+0x28>)
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	605a      	str	r2, [r3, #4]
}
 8006434:	bf00      	nop
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr
 8006440:	20000e98 	.word	0x20000e98
 8006444:	20000e84 	.word	0x20000e84

08006448 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b088      	sub	sp, #32
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d10a      	bne.n	800646e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645c:	f383 8811 	msr	BASEPRI, r3
 8006460:	f3bf 8f6f 	isb	sy
 8006464:	f3bf 8f4f 	dsb	sy
 8006468:	613b      	str	r3, [r7, #16]
}
 800646a:	bf00      	nop
 800646c:	e7fe      	b.n	800646c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d10a      	bne.n	800648a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006478:	f383 8811 	msr	BASEPRI, r3
 800647c:	f3bf 8f6f 	isb	sy
 8006480:	f3bf 8f4f 	dsb	sy
 8006484:	60fb      	str	r3, [r7, #12]
}
 8006486:	bf00      	nop
 8006488:	e7fe      	b.n	8006488 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800648a:	f000 ff7b 	bl	8007384 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800648e:	4b1d      	ldr	r3, [pc, #116]	; (8006504 <xTaskCheckForTimeOut+0xbc>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	69ba      	ldr	r2, [r7, #24]
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064a6:	d102      	bne.n	80064ae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80064a8:	2300      	movs	r3, #0
 80064aa:	61fb      	str	r3, [r7, #28]
 80064ac:	e023      	b.n	80064f6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	4b15      	ldr	r3, [pc, #84]	; (8006508 <xTaskCheckForTimeOut+0xc0>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d007      	beq.n	80064ca <xTaskCheckForTimeOut+0x82>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	69ba      	ldr	r2, [r7, #24]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d302      	bcc.n	80064ca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80064c4:	2301      	movs	r3, #1
 80064c6:	61fb      	str	r3, [r7, #28]
 80064c8:	e015      	b.n	80064f6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	697a      	ldr	r2, [r7, #20]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d20b      	bcs.n	80064ec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	1ad2      	subs	r2, r2, r3
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f7ff ff9b 	bl	800641c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80064e6:	2300      	movs	r3, #0
 80064e8:	61fb      	str	r3, [r7, #28]
 80064ea:	e004      	b.n	80064f6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	2200      	movs	r2, #0
 80064f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80064f2:	2301      	movs	r3, #1
 80064f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80064f6:	f000 ff75 	bl	80073e4 <vPortExitCritical>

	return xReturn;
 80064fa:	69fb      	ldr	r3, [r7, #28]
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3720      	adds	r7, #32
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	20000e84 	.word	0x20000e84
 8006508:	20000e98 	.word	0x20000e98

0800650c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800650c:	b480      	push	{r7}
 800650e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006510:	4b03      	ldr	r3, [pc, #12]	; (8006520 <vTaskMissedYield+0x14>)
 8006512:	2201      	movs	r2, #1
 8006514:	601a      	str	r2, [r3, #0]
}
 8006516:	bf00      	nop
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr
 8006520:	20000e94 	.word	0x20000e94

08006524 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800652c:	f000 f852 	bl	80065d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006530:	4b06      	ldr	r3, [pc, #24]	; (800654c <prvIdleTask+0x28>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2b01      	cmp	r3, #1
 8006536:	d9f9      	bls.n	800652c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006538:	4b05      	ldr	r3, [pc, #20]	; (8006550 <prvIdleTask+0x2c>)
 800653a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800653e:	601a      	str	r2, [r3, #0]
 8006540:	f3bf 8f4f 	dsb	sy
 8006544:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006548:	e7f0      	b.n	800652c <prvIdleTask+0x8>
 800654a:	bf00      	nop
 800654c:	200009b0 	.word	0x200009b0
 8006550:	e000ed04 	.word	0xe000ed04

08006554 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800655a:	2300      	movs	r3, #0
 800655c:	607b      	str	r3, [r7, #4]
 800655e:	e00c      	b.n	800657a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	4613      	mov	r3, r2
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	4413      	add	r3, r2
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	4a12      	ldr	r2, [pc, #72]	; (80065b4 <prvInitialiseTaskLists+0x60>)
 800656c:	4413      	add	r3, r2
 800656e:	4618      	mov	r0, r3
 8006570:	f7fe fa96 	bl	8004aa0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	3301      	adds	r3, #1
 8006578:	607b      	str	r3, [r7, #4]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2b37      	cmp	r3, #55	; 0x37
 800657e:	d9ef      	bls.n	8006560 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006580:	480d      	ldr	r0, [pc, #52]	; (80065b8 <prvInitialiseTaskLists+0x64>)
 8006582:	f7fe fa8d 	bl	8004aa0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006586:	480d      	ldr	r0, [pc, #52]	; (80065bc <prvInitialiseTaskLists+0x68>)
 8006588:	f7fe fa8a 	bl	8004aa0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800658c:	480c      	ldr	r0, [pc, #48]	; (80065c0 <prvInitialiseTaskLists+0x6c>)
 800658e:	f7fe fa87 	bl	8004aa0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006592:	480c      	ldr	r0, [pc, #48]	; (80065c4 <prvInitialiseTaskLists+0x70>)
 8006594:	f7fe fa84 	bl	8004aa0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006598:	480b      	ldr	r0, [pc, #44]	; (80065c8 <prvInitialiseTaskLists+0x74>)
 800659a:	f7fe fa81 	bl	8004aa0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800659e:	4b0b      	ldr	r3, [pc, #44]	; (80065cc <prvInitialiseTaskLists+0x78>)
 80065a0:	4a05      	ldr	r2, [pc, #20]	; (80065b8 <prvInitialiseTaskLists+0x64>)
 80065a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80065a4:	4b0a      	ldr	r3, [pc, #40]	; (80065d0 <prvInitialiseTaskLists+0x7c>)
 80065a6:	4a05      	ldr	r2, [pc, #20]	; (80065bc <prvInitialiseTaskLists+0x68>)
 80065a8:	601a      	str	r2, [r3, #0]
}
 80065aa:	bf00      	nop
 80065ac:	3708      	adds	r7, #8
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	200009b0 	.word	0x200009b0
 80065b8:	20000e10 	.word	0x20000e10
 80065bc:	20000e24 	.word	0x20000e24
 80065c0:	20000e40 	.word	0x20000e40
 80065c4:	20000e54 	.word	0x20000e54
 80065c8:	20000e6c 	.word	0x20000e6c
 80065cc:	20000e38 	.word	0x20000e38
 80065d0:	20000e3c 	.word	0x20000e3c

080065d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065da:	e019      	b.n	8006610 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80065dc:	f000 fed2 	bl	8007384 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065e0:	4b10      	ldr	r3, [pc, #64]	; (8006624 <prvCheckTasksWaitingTermination+0x50>)
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	3304      	adds	r3, #4
 80065ec:	4618      	mov	r0, r3
 80065ee:	f7fe fae1 	bl	8004bb4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80065f2:	4b0d      	ldr	r3, [pc, #52]	; (8006628 <prvCheckTasksWaitingTermination+0x54>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	3b01      	subs	r3, #1
 80065f8:	4a0b      	ldr	r2, [pc, #44]	; (8006628 <prvCheckTasksWaitingTermination+0x54>)
 80065fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80065fc:	4b0b      	ldr	r3, [pc, #44]	; (800662c <prvCheckTasksWaitingTermination+0x58>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	3b01      	subs	r3, #1
 8006602:	4a0a      	ldr	r2, [pc, #40]	; (800662c <prvCheckTasksWaitingTermination+0x58>)
 8006604:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006606:	f000 feed 	bl	80073e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f810 	bl	8006630 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006610:	4b06      	ldr	r3, [pc, #24]	; (800662c <prvCheckTasksWaitingTermination+0x58>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d1e1      	bne.n	80065dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006618:	bf00      	nop
 800661a:	bf00      	nop
 800661c:	3708      	adds	r7, #8
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	20000e54 	.word	0x20000e54
 8006628:	20000e80 	.word	0x20000e80
 800662c:	20000e68 	.word	0x20000e68

08006630 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	3354      	adds	r3, #84	; 0x54
 800663c:	4618      	mov	r0, r3
 800663e:	f001 f9f7 	bl	8007a30 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006648:	2b00      	cmp	r3, #0
 800664a:	d108      	bne.n	800665e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006650:	4618      	mov	r0, r3
 8006652:	f001 f885 	bl	8007760 <vPortFree>
				vPortFree( pxTCB );
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f001 f882 	bl	8007760 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800665c:	e018      	b.n	8006690 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006664:	2b01      	cmp	r3, #1
 8006666:	d103      	bne.n	8006670 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f001 f879 	bl	8007760 <vPortFree>
	}
 800666e:	e00f      	b.n	8006690 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006676:	2b02      	cmp	r3, #2
 8006678:	d00a      	beq.n	8006690 <prvDeleteTCB+0x60>
	__asm volatile
 800667a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667e:	f383 8811 	msr	BASEPRI, r3
 8006682:	f3bf 8f6f 	isb	sy
 8006686:	f3bf 8f4f 	dsb	sy
 800668a:	60fb      	str	r3, [r7, #12]
}
 800668c:	bf00      	nop
 800668e:	e7fe      	b.n	800668e <prvDeleteTCB+0x5e>
	}
 8006690:	bf00      	nop
 8006692:	3710      	adds	r7, #16
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800669e:	4b0c      	ldr	r3, [pc, #48]	; (80066d0 <prvResetNextTaskUnblockTime+0x38>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d104      	bne.n	80066b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80066a8:	4b0a      	ldr	r3, [pc, #40]	; (80066d4 <prvResetNextTaskUnblockTime+0x3c>)
 80066aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80066b0:	e008      	b.n	80066c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066b2:	4b07      	ldr	r3, [pc, #28]	; (80066d0 <prvResetNextTaskUnblockTime+0x38>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	4a04      	ldr	r2, [pc, #16]	; (80066d4 <prvResetNextTaskUnblockTime+0x3c>)
 80066c2:	6013      	str	r3, [r2, #0]
}
 80066c4:	bf00      	nop
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr
 80066d0:	20000e38 	.word	0x20000e38
 80066d4:	20000ea0 	.word	0x20000ea0

080066d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80066de:	4b0b      	ldr	r3, [pc, #44]	; (800670c <xTaskGetSchedulerState+0x34>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d102      	bne.n	80066ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80066e6:	2301      	movs	r3, #1
 80066e8:	607b      	str	r3, [r7, #4]
 80066ea:	e008      	b.n	80066fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066ec:	4b08      	ldr	r3, [pc, #32]	; (8006710 <xTaskGetSchedulerState+0x38>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d102      	bne.n	80066fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80066f4:	2302      	movs	r3, #2
 80066f6:	607b      	str	r3, [r7, #4]
 80066f8:	e001      	b.n	80066fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80066fa:	2300      	movs	r3, #0
 80066fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80066fe:	687b      	ldr	r3, [r7, #4]
	}
 8006700:	4618      	mov	r0, r3
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	20000e8c 	.word	0x20000e8c
 8006710:	20000ea8 	.word	0x20000ea8

08006714 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006720:	2300      	movs	r3, #0
 8006722:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d051      	beq.n	80067ce <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800672e:	4b2a      	ldr	r3, [pc, #168]	; (80067d8 <xTaskPriorityInherit+0xc4>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006734:	429a      	cmp	r2, r3
 8006736:	d241      	bcs.n	80067bc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	2b00      	cmp	r3, #0
 800673e:	db06      	blt.n	800674e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006740:	4b25      	ldr	r3, [pc, #148]	; (80067d8 <xTaskPriorityInherit+0xc4>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006746:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	6959      	ldr	r1, [r3, #20]
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006756:	4613      	mov	r3, r2
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	4413      	add	r3, r2
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	4a1f      	ldr	r2, [pc, #124]	; (80067dc <xTaskPriorityInherit+0xc8>)
 8006760:	4413      	add	r3, r2
 8006762:	4299      	cmp	r1, r3
 8006764:	d122      	bne.n	80067ac <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	3304      	adds	r3, #4
 800676a:	4618      	mov	r0, r3
 800676c:	f7fe fa22 	bl	8004bb4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006770:	4b19      	ldr	r3, [pc, #100]	; (80067d8 <xTaskPriorityInherit+0xc4>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800677e:	4b18      	ldr	r3, [pc, #96]	; (80067e0 <xTaskPriorityInherit+0xcc>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	429a      	cmp	r2, r3
 8006784:	d903      	bls.n	800678e <xTaskPriorityInherit+0x7a>
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678a:	4a15      	ldr	r2, [pc, #84]	; (80067e0 <xTaskPriorityInherit+0xcc>)
 800678c:	6013      	str	r3, [r2, #0]
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006792:	4613      	mov	r3, r2
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	4413      	add	r3, r2
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	4a10      	ldr	r2, [pc, #64]	; (80067dc <xTaskPriorityInherit+0xc8>)
 800679c:	441a      	add	r2, r3
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	3304      	adds	r3, #4
 80067a2:	4619      	mov	r1, r3
 80067a4:	4610      	mov	r0, r2
 80067a6:	f7fe f9a8 	bl	8004afa <vListInsertEnd>
 80067aa:	e004      	b.n	80067b6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80067ac:	4b0a      	ldr	r3, [pc, #40]	; (80067d8 <xTaskPriorityInherit+0xc4>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80067b6:	2301      	movs	r3, #1
 80067b8:	60fb      	str	r3, [r7, #12]
 80067ba:	e008      	b.n	80067ce <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80067c0:	4b05      	ldr	r3, [pc, #20]	; (80067d8 <xTaskPriorityInherit+0xc4>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d201      	bcs.n	80067ce <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80067ca:	2301      	movs	r3, #1
 80067cc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80067ce:	68fb      	ldr	r3, [r7, #12]
	}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3710      	adds	r7, #16
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	200009ac 	.word	0x200009ac
 80067dc:	200009b0 	.word	0x200009b0
 80067e0:	20000e88 	.word	0x20000e88

080067e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b086      	sub	sp, #24
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80067f0:	2300      	movs	r3, #0
 80067f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d056      	beq.n	80068a8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80067fa:	4b2e      	ldr	r3, [pc, #184]	; (80068b4 <xTaskPriorityDisinherit+0xd0>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	693a      	ldr	r2, [r7, #16]
 8006800:	429a      	cmp	r2, r3
 8006802:	d00a      	beq.n	800681a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006808:	f383 8811 	msr	BASEPRI, r3
 800680c:	f3bf 8f6f 	isb	sy
 8006810:	f3bf 8f4f 	dsb	sy
 8006814:	60fb      	str	r3, [r7, #12]
}
 8006816:	bf00      	nop
 8006818:	e7fe      	b.n	8006818 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10a      	bne.n	8006838 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006826:	f383 8811 	msr	BASEPRI, r3
 800682a:	f3bf 8f6f 	isb	sy
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	60bb      	str	r3, [r7, #8]
}
 8006834:	bf00      	nop
 8006836:	e7fe      	b.n	8006836 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800683c:	1e5a      	subs	r2, r3, #1
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800684a:	429a      	cmp	r2, r3
 800684c:	d02c      	beq.n	80068a8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006852:	2b00      	cmp	r3, #0
 8006854:	d128      	bne.n	80068a8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	3304      	adds	r3, #4
 800685a:	4618      	mov	r0, r3
 800685c:	f7fe f9aa 	bl	8004bb4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800686c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006878:	4b0f      	ldr	r3, [pc, #60]	; (80068b8 <xTaskPriorityDisinherit+0xd4>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	429a      	cmp	r2, r3
 800687e:	d903      	bls.n	8006888 <xTaskPriorityDisinherit+0xa4>
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006884:	4a0c      	ldr	r2, [pc, #48]	; (80068b8 <xTaskPriorityDisinherit+0xd4>)
 8006886:	6013      	str	r3, [r2, #0]
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800688c:	4613      	mov	r3, r2
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	4413      	add	r3, r2
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	4a09      	ldr	r2, [pc, #36]	; (80068bc <xTaskPriorityDisinherit+0xd8>)
 8006896:	441a      	add	r2, r3
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	3304      	adds	r3, #4
 800689c:	4619      	mov	r1, r3
 800689e:	4610      	mov	r0, r2
 80068a0:	f7fe f92b 	bl	8004afa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80068a4:	2301      	movs	r3, #1
 80068a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80068a8:	697b      	ldr	r3, [r7, #20]
	}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3718      	adds	r7, #24
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	200009ac 	.word	0x200009ac
 80068b8:	20000e88 	.word	0x20000e88
 80068bc:	200009b0 	.word	0x200009b0

080068c0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b088      	sub	sp, #32
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80068ce:	2301      	movs	r3, #1
 80068d0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d06a      	beq.n	80069ae <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80068d8:	69bb      	ldr	r3, [r7, #24]
 80068da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d10a      	bne.n	80068f6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80068e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e4:	f383 8811 	msr	BASEPRI, r3
 80068e8:	f3bf 8f6f 	isb	sy
 80068ec:	f3bf 8f4f 	dsb	sy
 80068f0:	60fb      	str	r3, [r7, #12]
}
 80068f2:	bf00      	nop
 80068f4:	e7fe      	b.n	80068f4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068fa:	683a      	ldr	r2, [r7, #0]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d902      	bls.n	8006906 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	61fb      	str	r3, [r7, #28]
 8006904:	e002      	b.n	800690c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800690a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006910:	69fa      	ldr	r2, [r7, #28]
 8006912:	429a      	cmp	r2, r3
 8006914:	d04b      	beq.n	80069ae <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800691a:	697a      	ldr	r2, [r7, #20]
 800691c:	429a      	cmp	r2, r3
 800691e:	d146      	bne.n	80069ae <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006920:	4b25      	ldr	r3, [pc, #148]	; (80069b8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	69ba      	ldr	r2, [r7, #24]
 8006926:	429a      	cmp	r2, r3
 8006928:	d10a      	bne.n	8006940 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800692a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692e:	f383 8811 	msr	BASEPRI, r3
 8006932:	f3bf 8f6f 	isb	sy
 8006936:	f3bf 8f4f 	dsb	sy
 800693a:	60bb      	str	r3, [r7, #8]
}
 800693c:	bf00      	nop
 800693e:	e7fe      	b.n	800693e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006944:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	69fa      	ldr	r2, [r7, #28]
 800694a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	699b      	ldr	r3, [r3, #24]
 8006950:	2b00      	cmp	r3, #0
 8006952:	db04      	blt.n	800695e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	6959      	ldr	r1, [r3, #20]
 8006962:	693a      	ldr	r2, [r7, #16]
 8006964:	4613      	mov	r3, r2
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	4413      	add	r3, r2
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	4a13      	ldr	r2, [pc, #76]	; (80069bc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800696e:	4413      	add	r3, r2
 8006970:	4299      	cmp	r1, r3
 8006972:	d11c      	bne.n	80069ae <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	3304      	adds	r3, #4
 8006978:	4618      	mov	r0, r3
 800697a:	f7fe f91b 	bl	8004bb4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006982:	4b0f      	ldr	r3, [pc, #60]	; (80069c0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	429a      	cmp	r2, r3
 8006988:	d903      	bls.n	8006992 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800698e:	4a0c      	ldr	r2, [pc, #48]	; (80069c0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006990:	6013      	str	r3, [r2, #0]
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006996:	4613      	mov	r3, r2
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	4413      	add	r3, r2
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	4a07      	ldr	r2, [pc, #28]	; (80069bc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80069a0:	441a      	add	r2, r3
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	3304      	adds	r3, #4
 80069a6:	4619      	mov	r1, r3
 80069a8:	4610      	mov	r0, r2
 80069aa:	f7fe f8a6 	bl	8004afa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80069ae:	bf00      	nop
 80069b0:	3720      	adds	r7, #32
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	200009ac 	.word	0x200009ac
 80069bc:	200009b0 	.word	0x200009b0
 80069c0:	20000e88 	.word	0x20000e88

080069c4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80069c4:	b480      	push	{r7}
 80069c6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80069c8:	4b07      	ldr	r3, [pc, #28]	; (80069e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d004      	beq.n	80069da <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80069d0:	4b05      	ldr	r3, [pc, #20]	; (80069e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80069d6:	3201      	adds	r2, #1
 80069d8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80069da:	4b03      	ldr	r3, [pc, #12]	; (80069e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80069dc:	681b      	ldr	r3, [r3, #0]
	}
 80069de:	4618      	mov	r0, r3
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr
 80069e8:	200009ac 	.word	0x200009ac

080069ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80069f6:	4b21      	ldr	r3, [pc, #132]	; (8006a7c <prvAddCurrentTaskToDelayedList+0x90>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069fc:	4b20      	ldr	r3, [pc, #128]	; (8006a80 <prvAddCurrentTaskToDelayedList+0x94>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	3304      	adds	r3, #4
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7fe f8d6 	bl	8004bb4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a0e:	d10a      	bne.n	8006a26 <prvAddCurrentTaskToDelayedList+0x3a>
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d007      	beq.n	8006a26 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a16:	4b1a      	ldr	r3, [pc, #104]	; (8006a80 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	3304      	adds	r3, #4
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	4819      	ldr	r0, [pc, #100]	; (8006a84 <prvAddCurrentTaskToDelayedList+0x98>)
 8006a20:	f7fe f86b 	bl	8004afa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006a24:	e026      	b.n	8006a74 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006a2e:	4b14      	ldr	r3, [pc, #80]	; (8006a80 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	68ba      	ldr	r2, [r7, #8]
 8006a34:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006a36:	68ba      	ldr	r2, [r7, #8]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d209      	bcs.n	8006a52 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a3e:	4b12      	ldr	r3, [pc, #72]	; (8006a88 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	4b0f      	ldr	r3, [pc, #60]	; (8006a80 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	3304      	adds	r3, #4
 8006a48:	4619      	mov	r1, r3
 8006a4a:	4610      	mov	r0, r2
 8006a4c:	f7fe f879 	bl	8004b42 <vListInsert>
}
 8006a50:	e010      	b.n	8006a74 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a52:	4b0e      	ldr	r3, [pc, #56]	; (8006a8c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	4b0a      	ldr	r3, [pc, #40]	; (8006a80 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	3304      	adds	r3, #4
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	4610      	mov	r0, r2
 8006a60:	f7fe f86f 	bl	8004b42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006a64:	4b0a      	ldr	r3, [pc, #40]	; (8006a90 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68ba      	ldr	r2, [r7, #8]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d202      	bcs.n	8006a74 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006a6e:	4a08      	ldr	r2, [pc, #32]	; (8006a90 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	6013      	str	r3, [r2, #0]
}
 8006a74:	bf00      	nop
 8006a76:	3710      	adds	r7, #16
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	20000e84 	.word	0x20000e84
 8006a80:	200009ac 	.word	0x200009ac
 8006a84:	20000e6c 	.word	0x20000e6c
 8006a88:	20000e3c 	.word	0x20000e3c
 8006a8c:	20000e38 	.word	0x20000e38
 8006a90:	20000ea0 	.word	0x20000ea0

08006a94 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b08a      	sub	sp, #40	; 0x28
 8006a98:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006a9e:	f000 fb07 	bl	80070b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006aa2:	4b1c      	ldr	r3, [pc, #112]	; (8006b14 <xTimerCreateTimerTask+0x80>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d021      	beq.n	8006aee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006ab2:	1d3a      	adds	r2, r7, #4
 8006ab4:	f107 0108 	add.w	r1, r7, #8
 8006ab8:	f107 030c 	add.w	r3, r7, #12
 8006abc:	4618      	mov	r0, r3
 8006abe:	f7fd ffd5 	bl	8004a6c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006ac2:	6879      	ldr	r1, [r7, #4]
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	9202      	str	r2, [sp, #8]
 8006aca:	9301      	str	r3, [sp, #4]
 8006acc:	2302      	movs	r3, #2
 8006ace:	9300      	str	r3, [sp, #0]
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	460a      	mov	r2, r1
 8006ad4:	4910      	ldr	r1, [pc, #64]	; (8006b18 <xTimerCreateTimerTask+0x84>)
 8006ad6:	4811      	ldr	r0, [pc, #68]	; (8006b1c <xTimerCreateTimerTask+0x88>)
 8006ad8:	f7fe ff6c 	bl	80059b4 <xTaskCreateStatic>
 8006adc:	4603      	mov	r3, r0
 8006ade:	4a10      	ldr	r2, [pc, #64]	; (8006b20 <xTimerCreateTimerTask+0x8c>)
 8006ae0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006ae2:	4b0f      	ldr	r3, [pc, #60]	; (8006b20 <xTimerCreateTimerTask+0x8c>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d001      	beq.n	8006aee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006aea:	2301      	movs	r3, #1
 8006aec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d10a      	bne.n	8006b0a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af8:	f383 8811 	msr	BASEPRI, r3
 8006afc:	f3bf 8f6f 	isb	sy
 8006b00:	f3bf 8f4f 	dsb	sy
 8006b04:	613b      	str	r3, [r7, #16]
}
 8006b06:	bf00      	nop
 8006b08:	e7fe      	b.n	8006b08 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006b0a:	697b      	ldr	r3, [r7, #20]
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3718      	adds	r7, #24
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	20000edc 	.word	0x20000edc
 8006b18:	08007be0 	.word	0x08007be0
 8006b1c:	08006c59 	.word	0x08006c59
 8006b20:	20000ee0 	.word	0x20000ee0

08006b24 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b08a      	sub	sp, #40	; 0x28
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	607a      	str	r2, [r7, #4]
 8006b30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006b32:	2300      	movs	r3, #0
 8006b34:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d10a      	bne.n	8006b52 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b40:	f383 8811 	msr	BASEPRI, r3
 8006b44:	f3bf 8f6f 	isb	sy
 8006b48:	f3bf 8f4f 	dsb	sy
 8006b4c:	623b      	str	r3, [r7, #32]
}
 8006b4e:	bf00      	nop
 8006b50:	e7fe      	b.n	8006b50 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006b52:	4b1a      	ldr	r3, [pc, #104]	; (8006bbc <xTimerGenericCommand+0x98>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d02a      	beq.n	8006bb0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	2b05      	cmp	r3, #5
 8006b6a:	dc18      	bgt.n	8006b9e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006b6c:	f7ff fdb4 	bl	80066d8 <xTaskGetSchedulerState>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b02      	cmp	r3, #2
 8006b74:	d109      	bne.n	8006b8a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006b76:	4b11      	ldr	r3, [pc, #68]	; (8006bbc <xTimerGenericCommand+0x98>)
 8006b78:	6818      	ldr	r0, [r3, #0]
 8006b7a:	f107 0110 	add.w	r1, r7, #16
 8006b7e:	2300      	movs	r3, #0
 8006b80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b82:	f7fe f97f 	bl	8004e84 <xQueueGenericSend>
 8006b86:	6278      	str	r0, [r7, #36]	; 0x24
 8006b88:	e012      	b.n	8006bb0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006b8a:	4b0c      	ldr	r3, [pc, #48]	; (8006bbc <xTimerGenericCommand+0x98>)
 8006b8c:	6818      	ldr	r0, [r3, #0]
 8006b8e:	f107 0110 	add.w	r1, r7, #16
 8006b92:	2300      	movs	r3, #0
 8006b94:	2200      	movs	r2, #0
 8006b96:	f7fe f975 	bl	8004e84 <xQueueGenericSend>
 8006b9a:	6278      	str	r0, [r7, #36]	; 0x24
 8006b9c:	e008      	b.n	8006bb0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006b9e:	4b07      	ldr	r3, [pc, #28]	; (8006bbc <xTimerGenericCommand+0x98>)
 8006ba0:	6818      	ldr	r0, [r3, #0]
 8006ba2:	f107 0110 	add.w	r1, r7, #16
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	683a      	ldr	r2, [r7, #0]
 8006baa:	f7fe fa69 	bl	8005080 <xQueueGenericSendFromISR>
 8006bae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3728      	adds	r7, #40	; 0x28
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	20000edc 	.word	0x20000edc

08006bc0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b088      	sub	sp, #32
 8006bc4:	af02      	add	r7, sp, #8
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bca:	4b22      	ldr	r3, [pc, #136]	; (8006c54 <prvProcessExpiredTimer+0x94>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	3304      	adds	r3, #4
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f7fd ffeb 	bl	8004bb4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006be4:	f003 0304 	and.w	r3, r3, #4
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d022      	beq.n	8006c32 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	699a      	ldr	r2, [r3, #24]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	18d1      	adds	r1, r2, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	683a      	ldr	r2, [r7, #0]
 8006bf8:	6978      	ldr	r0, [r7, #20]
 8006bfa:	f000 f8d1 	bl	8006da0 <prvInsertTimerInActiveList>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d01f      	beq.n	8006c44 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c04:	2300      	movs	r3, #0
 8006c06:	9300      	str	r3, [sp, #0]
 8006c08:	2300      	movs	r3, #0
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	6978      	ldr	r0, [r7, #20]
 8006c10:	f7ff ff88 	bl	8006b24 <xTimerGenericCommand>
 8006c14:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d113      	bne.n	8006c44 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c20:	f383 8811 	msr	BASEPRI, r3
 8006c24:	f3bf 8f6f 	isb	sy
 8006c28:	f3bf 8f4f 	dsb	sy
 8006c2c:	60fb      	str	r3, [r7, #12]
}
 8006c2e:	bf00      	nop
 8006c30:	e7fe      	b.n	8006c30 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c38:	f023 0301 	bic.w	r3, r3, #1
 8006c3c:	b2da      	uxtb	r2, r3
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	6a1b      	ldr	r3, [r3, #32]
 8006c48:	6978      	ldr	r0, [r7, #20]
 8006c4a:	4798      	blx	r3
}
 8006c4c:	bf00      	nop
 8006c4e:	3718      	adds	r7, #24
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}
 8006c54:	20000ed4 	.word	0x20000ed4

08006c58 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006c60:	f107 0308 	add.w	r3, r7, #8
 8006c64:	4618      	mov	r0, r3
 8006c66:	f000 f857 	bl	8006d18 <prvGetNextExpireTime>
 8006c6a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	4619      	mov	r1, r3
 8006c70:	68f8      	ldr	r0, [r7, #12]
 8006c72:	f000 f803 	bl	8006c7c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006c76:	f000 f8d5 	bl	8006e24 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006c7a:	e7f1      	b.n	8006c60 <prvTimerTask+0x8>

08006c7c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006c86:	f7ff f93b 	bl	8005f00 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c8a:	f107 0308 	add.w	r3, r7, #8
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f000 f866 	bl	8006d60 <prvSampleTimeNow>
 8006c94:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d130      	bne.n	8006cfe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d10a      	bne.n	8006cb8 <prvProcessTimerOrBlockTask+0x3c>
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d806      	bhi.n	8006cb8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006caa:	f7ff f937 	bl	8005f1c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006cae:	68f9      	ldr	r1, [r7, #12]
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f7ff ff85 	bl	8006bc0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006cb6:	e024      	b.n	8006d02 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d008      	beq.n	8006cd0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006cbe:	4b13      	ldr	r3, [pc, #76]	; (8006d0c <prvProcessTimerOrBlockTask+0x90>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d101      	bne.n	8006ccc <prvProcessTimerOrBlockTask+0x50>
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e000      	b.n	8006cce <prvProcessTimerOrBlockTask+0x52>
 8006ccc:	2300      	movs	r3, #0
 8006cce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006cd0:	4b0f      	ldr	r3, [pc, #60]	; (8006d10 <prvProcessTimerOrBlockTask+0x94>)
 8006cd2:	6818      	ldr	r0, [r3, #0]
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	683a      	ldr	r2, [r7, #0]
 8006cdc:	4619      	mov	r1, r3
 8006cde:	f7fe fe35 	bl	800594c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006ce2:	f7ff f91b 	bl	8005f1c <xTaskResumeAll>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d10a      	bne.n	8006d02 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006cec:	4b09      	ldr	r3, [pc, #36]	; (8006d14 <prvProcessTimerOrBlockTask+0x98>)
 8006cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cf2:	601a      	str	r2, [r3, #0]
 8006cf4:	f3bf 8f4f 	dsb	sy
 8006cf8:	f3bf 8f6f 	isb	sy
}
 8006cfc:	e001      	b.n	8006d02 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006cfe:	f7ff f90d 	bl	8005f1c <xTaskResumeAll>
}
 8006d02:	bf00      	nop
 8006d04:	3710      	adds	r7, #16
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	20000ed8 	.word	0x20000ed8
 8006d10:	20000edc 	.word	0x20000edc
 8006d14:	e000ed04 	.word	0xe000ed04

08006d18 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b085      	sub	sp, #20
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006d20:	4b0e      	ldr	r3, [pc, #56]	; (8006d5c <prvGetNextExpireTime+0x44>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d101      	bne.n	8006d2e <prvGetNextExpireTime+0x16>
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	e000      	b.n	8006d30 <prvGetNextExpireTime+0x18>
 8006d2e:	2200      	movs	r2, #0
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d105      	bne.n	8006d48 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d3c:	4b07      	ldr	r3, [pc, #28]	; (8006d5c <prvGetNextExpireTime+0x44>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	60fb      	str	r3, [r7, #12]
 8006d46:	e001      	b.n	8006d4c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3714      	adds	r7, #20
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr
 8006d5a:	bf00      	nop
 8006d5c:	20000ed4 	.word	0x20000ed4

08006d60 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006d68:	f7ff f976 	bl	8006058 <xTaskGetTickCount>
 8006d6c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006d6e:	4b0b      	ldr	r3, [pc, #44]	; (8006d9c <prvSampleTimeNow+0x3c>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d205      	bcs.n	8006d84 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006d78:	f000 f936 	bl	8006fe8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	601a      	str	r2, [r3, #0]
 8006d82:	e002      	b.n	8006d8a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006d8a:	4a04      	ldr	r2, [pc, #16]	; (8006d9c <prvSampleTimeNow+0x3c>)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006d90:	68fb      	ldr	r3, [r7, #12]
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3710      	adds	r7, #16
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	20000ee4 	.word	0x20000ee4

08006da0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b086      	sub	sp, #24
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	607a      	str	r2, [r7, #4]
 8006dac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006dae:	2300      	movs	r3, #0
 8006db0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	68ba      	ldr	r2, [r7, #8]
 8006db6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006dbe:	68ba      	ldr	r2, [r7, #8]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d812      	bhi.n	8006dec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	1ad2      	subs	r2, r2, r3
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	699b      	ldr	r3, [r3, #24]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d302      	bcc.n	8006dda <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	617b      	str	r3, [r7, #20]
 8006dd8:	e01b      	b.n	8006e12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006dda:	4b10      	ldr	r3, [pc, #64]	; (8006e1c <prvInsertTimerInActiveList+0x7c>)
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	3304      	adds	r3, #4
 8006de2:	4619      	mov	r1, r3
 8006de4:	4610      	mov	r0, r2
 8006de6:	f7fd feac 	bl	8004b42 <vListInsert>
 8006dea:	e012      	b.n	8006e12 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d206      	bcs.n	8006e02 <prvInsertTimerInActiveList+0x62>
 8006df4:	68ba      	ldr	r2, [r7, #8]
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d302      	bcc.n	8006e02 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	617b      	str	r3, [r7, #20]
 8006e00:	e007      	b.n	8006e12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e02:	4b07      	ldr	r3, [pc, #28]	; (8006e20 <prvInsertTimerInActiveList+0x80>)
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	3304      	adds	r3, #4
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	4610      	mov	r0, r2
 8006e0e:	f7fd fe98 	bl	8004b42 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006e12:	697b      	ldr	r3, [r7, #20]
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3718      	adds	r7, #24
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	20000ed8 	.word	0x20000ed8
 8006e20:	20000ed4 	.word	0x20000ed4

08006e24 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b08e      	sub	sp, #56	; 0x38
 8006e28:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e2a:	e0ca      	b.n	8006fc2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	da18      	bge.n	8006e64 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006e32:	1d3b      	adds	r3, r7, #4
 8006e34:	3304      	adds	r3, #4
 8006e36:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d10a      	bne.n	8006e54 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e42:	f383 8811 	msr	BASEPRI, r3
 8006e46:	f3bf 8f6f 	isb	sy
 8006e4a:	f3bf 8f4f 	dsb	sy
 8006e4e:	61fb      	str	r3, [r7, #28]
}
 8006e50:	bf00      	nop
 8006e52:	e7fe      	b.n	8006e52 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e5a:	6850      	ldr	r0, [r2, #4]
 8006e5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e5e:	6892      	ldr	r2, [r2, #8]
 8006e60:	4611      	mov	r1, r2
 8006e62:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	f2c0 80aa 	blt.w	8006fc0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e72:	695b      	ldr	r3, [r3, #20]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d004      	beq.n	8006e82 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7a:	3304      	adds	r3, #4
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f7fd fe99 	bl	8004bb4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e82:	463b      	mov	r3, r7
 8006e84:	4618      	mov	r0, r3
 8006e86:	f7ff ff6b 	bl	8006d60 <prvSampleTimeNow>
 8006e8a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2b09      	cmp	r3, #9
 8006e90:	f200 8097 	bhi.w	8006fc2 <prvProcessReceivedCommands+0x19e>
 8006e94:	a201      	add	r2, pc, #4	; (adr r2, 8006e9c <prvProcessReceivedCommands+0x78>)
 8006e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e9a:	bf00      	nop
 8006e9c:	08006ec5 	.word	0x08006ec5
 8006ea0:	08006ec5 	.word	0x08006ec5
 8006ea4:	08006ec5 	.word	0x08006ec5
 8006ea8:	08006f39 	.word	0x08006f39
 8006eac:	08006f4d 	.word	0x08006f4d
 8006eb0:	08006f97 	.word	0x08006f97
 8006eb4:	08006ec5 	.word	0x08006ec5
 8006eb8:	08006ec5 	.word	0x08006ec5
 8006ebc:	08006f39 	.word	0x08006f39
 8006ec0:	08006f4d 	.word	0x08006f4d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006eca:	f043 0301 	orr.w	r3, r3, #1
 8006ece:	b2da      	uxtb	r2, r3
 8006ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006ed6:	68ba      	ldr	r2, [r7, #8]
 8006ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eda:	699b      	ldr	r3, [r3, #24]
 8006edc:	18d1      	adds	r1, r2, r3
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ee2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ee4:	f7ff ff5c 	bl	8006da0 <prvInsertTimerInActiveList>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d069      	beq.n	8006fc2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ef4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006efc:	f003 0304 	and.w	r3, r3, #4
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d05e      	beq.n	8006fc2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006f04:	68ba      	ldr	r2, [r7, #8]
 8006f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	441a      	add	r2, r3
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	9300      	str	r3, [sp, #0]
 8006f10:	2300      	movs	r3, #0
 8006f12:	2100      	movs	r1, #0
 8006f14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f16:	f7ff fe05 	bl	8006b24 <xTimerGenericCommand>
 8006f1a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006f1c:	6a3b      	ldr	r3, [r7, #32]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d14f      	bne.n	8006fc2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f26:	f383 8811 	msr	BASEPRI, r3
 8006f2a:	f3bf 8f6f 	isb	sy
 8006f2e:	f3bf 8f4f 	dsb	sy
 8006f32:	61bb      	str	r3, [r7, #24]
}
 8006f34:	bf00      	nop
 8006f36:	e7fe      	b.n	8006f36 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f3e:	f023 0301 	bic.w	r3, r3, #1
 8006f42:	b2da      	uxtb	r2, r3
 8006f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006f4a:	e03a      	b.n	8006fc2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f52:	f043 0301 	orr.w	r3, r3, #1
 8006f56:	b2da      	uxtb	r2, r3
 8006f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006f5e:	68ba      	ldr	r2, [r7, #8]
 8006f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f62:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f66:	699b      	ldr	r3, [r3, #24]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d10a      	bne.n	8006f82 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f70:	f383 8811 	msr	BASEPRI, r3
 8006f74:	f3bf 8f6f 	isb	sy
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	617b      	str	r3, [r7, #20]
}
 8006f7e:	bf00      	nop
 8006f80:	e7fe      	b.n	8006f80 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f84:	699a      	ldr	r2, [r3, #24]
 8006f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f88:	18d1      	adds	r1, r2, r3
 8006f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f90:	f7ff ff06 	bl	8006da0 <prvInsertTimerInActiveList>
					break;
 8006f94:	e015      	b.n	8006fc2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f9c:	f003 0302 	and.w	r3, r3, #2
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d103      	bne.n	8006fac <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006fa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fa6:	f000 fbdb 	bl	8007760 <vPortFree>
 8006faa:	e00a      	b.n	8006fc2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fb2:	f023 0301 	bic.w	r3, r3, #1
 8006fb6:	b2da      	uxtb	r2, r3
 8006fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006fbe:	e000      	b.n	8006fc2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006fc0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006fc2:	4b08      	ldr	r3, [pc, #32]	; (8006fe4 <prvProcessReceivedCommands+0x1c0>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	1d39      	adds	r1, r7, #4
 8006fc8:	2200      	movs	r2, #0
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7fe f980 	bl	80052d0 <xQueueReceive>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	f47f af2a 	bne.w	8006e2c <prvProcessReceivedCommands+0x8>
	}
}
 8006fd8:	bf00      	nop
 8006fda:	bf00      	nop
 8006fdc:	3730      	adds	r7, #48	; 0x30
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	20000edc 	.word	0x20000edc

08006fe8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b088      	sub	sp, #32
 8006fec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006fee:	e048      	b.n	8007082 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ff0:	4b2d      	ldr	r3, [pc, #180]	; (80070a8 <prvSwitchTimerLists+0xc0>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ffa:	4b2b      	ldr	r3, [pc, #172]	; (80070a8 <prvSwitchTimerLists+0xc0>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	3304      	adds	r3, #4
 8007008:	4618      	mov	r0, r3
 800700a:	f7fd fdd3 	bl	8004bb4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6a1b      	ldr	r3, [r3, #32]
 8007012:	68f8      	ldr	r0, [r7, #12]
 8007014:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800701c:	f003 0304 	and.w	r3, r3, #4
 8007020:	2b00      	cmp	r3, #0
 8007022:	d02e      	beq.n	8007082 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	699b      	ldr	r3, [r3, #24]
 8007028:	693a      	ldr	r2, [r7, #16]
 800702a:	4413      	add	r3, r2
 800702c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800702e:	68ba      	ldr	r2, [r7, #8]
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	429a      	cmp	r2, r3
 8007034:	d90e      	bls.n	8007054 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	68ba      	ldr	r2, [r7, #8]
 800703a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007042:	4b19      	ldr	r3, [pc, #100]	; (80070a8 <prvSwitchTimerLists+0xc0>)
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	3304      	adds	r3, #4
 800704a:	4619      	mov	r1, r3
 800704c:	4610      	mov	r0, r2
 800704e:	f7fd fd78 	bl	8004b42 <vListInsert>
 8007052:	e016      	b.n	8007082 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007054:	2300      	movs	r3, #0
 8007056:	9300      	str	r3, [sp, #0]
 8007058:	2300      	movs	r3, #0
 800705a:	693a      	ldr	r2, [r7, #16]
 800705c:	2100      	movs	r1, #0
 800705e:	68f8      	ldr	r0, [r7, #12]
 8007060:	f7ff fd60 	bl	8006b24 <xTimerGenericCommand>
 8007064:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d10a      	bne.n	8007082 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800706c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007070:	f383 8811 	msr	BASEPRI, r3
 8007074:	f3bf 8f6f 	isb	sy
 8007078:	f3bf 8f4f 	dsb	sy
 800707c:	603b      	str	r3, [r7, #0]
}
 800707e:	bf00      	nop
 8007080:	e7fe      	b.n	8007080 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007082:	4b09      	ldr	r3, [pc, #36]	; (80070a8 <prvSwitchTimerLists+0xc0>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d1b1      	bne.n	8006ff0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800708c:	4b06      	ldr	r3, [pc, #24]	; (80070a8 <prvSwitchTimerLists+0xc0>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007092:	4b06      	ldr	r3, [pc, #24]	; (80070ac <prvSwitchTimerLists+0xc4>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a04      	ldr	r2, [pc, #16]	; (80070a8 <prvSwitchTimerLists+0xc0>)
 8007098:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800709a:	4a04      	ldr	r2, [pc, #16]	; (80070ac <prvSwitchTimerLists+0xc4>)
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	6013      	str	r3, [r2, #0]
}
 80070a0:	bf00      	nop
 80070a2:	3718      	adds	r7, #24
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	20000ed4 	.word	0x20000ed4
 80070ac:	20000ed8 	.word	0x20000ed8

080070b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80070b6:	f000 f965 	bl	8007384 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80070ba:	4b15      	ldr	r3, [pc, #84]	; (8007110 <prvCheckForValidListAndQueue+0x60>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d120      	bne.n	8007104 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80070c2:	4814      	ldr	r0, [pc, #80]	; (8007114 <prvCheckForValidListAndQueue+0x64>)
 80070c4:	f7fd fcec 	bl	8004aa0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80070c8:	4813      	ldr	r0, [pc, #76]	; (8007118 <prvCheckForValidListAndQueue+0x68>)
 80070ca:	f7fd fce9 	bl	8004aa0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80070ce:	4b13      	ldr	r3, [pc, #76]	; (800711c <prvCheckForValidListAndQueue+0x6c>)
 80070d0:	4a10      	ldr	r2, [pc, #64]	; (8007114 <prvCheckForValidListAndQueue+0x64>)
 80070d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80070d4:	4b12      	ldr	r3, [pc, #72]	; (8007120 <prvCheckForValidListAndQueue+0x70>)
 80070d6:	4a10      	ldr	r2, [pc, #64]	; (8007118 <prvCheckForValidListAndQueue+0x68>)
 80070d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80070da:	2300      	movs	r3, #0
 80070dc:	9300      	str	r3, [sp, #0]
 80070de:	4b11      	ldr	r3, [pc, #68]	; (8007124 <prvCheckForValidListAndQueue+0x74>)
 80070e0:	4a11      	ldr	r2, [pc, #68]	; (8007128 <prvCheckForValidListAndQueue+0x78>)
 80070e2:	2110      	movs	r1, #16
 80070e4:	200a      	movs	r0, #10
 80070e6:	f7fd fdf7 	bl	8004cd8 <xQueueGenericCreateStatic>
 80070ea:	4603      	mov	r3, r0
 80070ec:	4a08      	ldr	r2, [pc, #32]	; (8007110 <prvCheckForValidListAndQueue+0x60>)
 80070ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80070f0:	4b07      	ldr	r3, [pc, #28]	; (8007110 <prvCheckForValidListAndQueue+0x60>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d005      	beq.n	8007104 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80070f8:	4b05      	ldr	r3, [pc, #20]	; (8007110 <prvCheckForValidListAndQueue+0x60>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	490b      	ldr	r1, [pc, #44]	; (800712c <prvCheckForValidListAndQueue+0x7c>)
 80070fe:	4618      	mov	r0, r3
 8007100:	f7fe fbfa 	bl	80058f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007104:	f000 f96e 	bl	80073e4 <vPortExitCritical>
}
 8007108:	bf00      	nop
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	20000edc 	.word	0x20000edc
 8007114:	20000eac 	.word	0x20000eac
 8007118:	20000ec0 	.word	0x20000ec0
 800711c:	20000ed4 	.word	0x20000ed4
 8007120:	20000ed8 	.word	0x20000ed8
 8007124:	20000f88 	.word	0x20000f88
 8007128:	20000ee8 	.word	0x20000ee8
 800712c:	08007be8 	.word	0x08007be8

08007130 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007130:	b480      	push	{r7}
 8007132:	b085      	sub	sp, #20
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	3b04      	subs	r3, #4
 8007140:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007148:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	3b04      	subs	r3, #4
 800714e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	f023 0201 	bic.w	r2, r3, #1
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	3b04      	subs	r3, #4
 800715e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007160:	4a0c      	ldr	r2, [pc, #48]	; (8007194 <pxPortInitialiseStack+0x64>)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	3b14      	subs	r3, #20
 800716a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	3b04      	subs	r3, #4
 8007176:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f06f 0202 	mvn.w	r2, #2
 800717e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	3b20      	subs	r3, #32
 8007184:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007186:	68fb      	ldr	r3, [r7, #12]
}
 8007188:	4618      	mov	r0, r3
 800718a:	3714      	adds	r7, #20
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr
 8007194:	08007199 	.word	0x08007199

08007198 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007198:	b480      	push	{r7}
 800719a:	b085      	sub	sp, #20
 800719c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800719e:	2300      	movs	r3, #0
 80071a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80071a2:	4b12      	ldr	r3, [pc, #72]	; (80071ec <prvTaskExitError+0x54>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071aa:	d00a      	beq.n	80071c2 <prvTaskExitError+0x2a>
	__asm volatile
 80071ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b0:	f383 8811 	msr	BASEPRI, r3
 80071b4:	f3bf 8f6f 	isb	sy
 80071b8:	f3bf 8f4f 	dsb	sy
 80071bc:	60fb      	str	r3, [r7, #12]
}
 80071be:	bf00      	nop
 80071c0:	e7fe      	b.n	80071c0 <prvTaskExitError+0x28>
	__asm volatile
 80071c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c6:	f383 8811 	msr	BASEPRI, r3
 80071ca:	f3bf 8f6f 	isb	sy
 80071ce:	f3bf 8f4f 	dsb	sy
 80071d2:	60bb      	str	r3, [r7, #8]
}
 80071d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80071d6:	bf00      	nop
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d0fc      	beq.n	80071d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80071de:	bf00      	nop
 80071e0:	bf00      	nop
 80071e2:	3714      	adds	r7, #20
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr
 80071ec:	20000014 	.word	0x20000014

080071f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80071f0:	4b07      	ldr	r3, [pc, #28]	; (8007210 <pxCurrentTCBConst2>)
 80071f2:	6819      	ldr	r1, [r3, #0]
 80071f4:	6808      	ldr	r0, [r1, #0]
 80071f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071fa:	f380 8809 	msr	PSP, r0
 80071fe:	f3bf 8f6f 	isb	sy
 8007202:	f04f 0000 	mov.w	r0, #0
 8007206:	f380 8811 	msr	BASEPRI, r0
 800720a:	4770      	bx	lr
 800720c:	f3af 8000 	nop.w

08007210 <pxCurrentTCBConst2>:
 8007210:	200009ac 	.word	0x200009ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007214:	bf00      	nop
 8007216:	bf00      	nop

08007218 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007218:	4808      	ldr	r0, [pc, #32]	; (800723c <prvPortStartFirstTask+0x24>)
 800721a:	6800      	ldr	r0, [r0, #0]
 800721c:	6800      	ldr	r0, [r0, #0]
 800721e:	f380 8808 	msr	MSP, r0
 8007222:	f04f 0000 	mov.w	r0, #0
 8007226:	f380 8814 	msr	CONTROL, r0
 800722a:	b662      	cpsie	i
 800722c:	b661      	cpsie	f
 800722e:	f3bf 8f4f 	dsb	sy
 8007232:	f3bf 8f6f 	isb	sy
 8007236:	df00      	svc	0
 8007238:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800723a:	bf00      	nop
 800723c:	e000ed08 	.word	0xe000ed08

08007240 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b086      	sub	sp, #24
 8007244:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007246:	4b46      	ldr	r3, [pc, #280]	; (8007360 <xPortStartScheduler+0x120>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a46      	ldr	r2, [pc, #280]	; (8007364 <xPortStartScheduler+0x124>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d10a      	bne.n	8007266 <xPortStartScheduler+0x26>
	__asm volatile
 8007250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007254:	f383 8811 	msr	BASEPRI, r3
 8007258:	f3bf 8f6f 	isb	sy
 800725c:	f3bf 8f4f 	dsb	sy
 8007260:	613b      	str	r3, [r7, #16]
}
 8007262:	bf00      	nop
 8007264:	e7fe      	b.n	8007264 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007266:	4b3e      	ldr	r3, [pc, #248]	; (8007360 <xPortStartScheduler+0x120>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a3f      	ldr	r2, [pc, #252]	; (8007368 <xPortStartScheduler+0x128>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d10a      	bne.n	8007286 <xPortStartScheduler+0x46>
	__asm volatile
 8007270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007274:	f383 8811 	msr	BASEPRI, r3
 8007278:	f3bf 8f6f 	isb	sy
 800727c:	f3bf 8f4f 	dsb	sy
 8007280:	60fb      	str	r3, [r7, #12]
}
 8007282:	bf00      	nop
 8007284:	e7fe      	b.n	8007284 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007286:	4b39      	ldr	r3, [pc, #228]	; (800736c <xPortStartScheduler+0x12c>)
 8007288:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	b2db      	uxtb	r3, r3
 8007290:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	22ff      	movs	r2, #255	; 0xff
 8007296:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	b2db      	uxtb	r3, r3
 800729e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80072a0:	78fb      	ldrb	r3, [r7, #3]
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80072a8:	b2da      	uxtb	r2, r3
 80072aa:	4b31      	ldr	r3, [pc, #196]	; (8007370 <xPortStartScheduler+0x130>)
 80072ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80072ae:	4b31      	ldr	r3, [pc, #196]	; (8007374 <xPortStartScheduler+0x134>)
 80072b0:	2207      	movs	r2, #7
 80072b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80072b4:	e009      	b.n	80072ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80072b6:	4b2f      	ldr	r3, [pc, #188]	; (8007374 <xPortStartScheduler+0x134>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	3b01      	subs	r3, #1
 80072bc:	4a2d      	ldr	r2, [pc, #180]	; (8007374 <xPortStartScheduler+0x134>)
 80072be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80072c0:	78fb      	ldrb	r3, [r7, #3]
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	005b      	lsls	r3, r3, #1
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80072ca:	78fb      	ldrb	r3, [r7, #3]
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072d2:	2b80      	cmp	r3, #128	; 0x80
 80072d4:	d0ef      	beq.n	80072b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80072d6:	4b27      	ldr	r3, [pc, #156]	; (8007374 <xPortStartScheduler+0x134>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f1c3 0307 	rsb	r3, r3, #7
 80072de:	2b04      	cmp	r3, #4
 80072e0:	d00a      	beq.n	80072f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80072e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e6:	f383 8811 	msr	BASEPRI, r3
 80072ea:	f3bf 8f6f 	isb	sy
 80072ee:	f3bf 8f4f 	dsb	sy
 80072f2:	60bb      	str	r3, [r7, #8]
}
 80072f4:	bf00      	nop
 80072f6:	e7fe      	b.n	80072f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80072f8:	4b1e      	ldr	r3, [pc, #120]	; (8007374 <xPortStartScheduler+0x134>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	021b      	lsls	r3, r3, #8
 80072fe:	4a1d      	ldr	r2, [pc, #116]	; (8007374 <xPortStartScheduler+0x134>)
 8007300:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007302:	4b1c      	ldr	r3, [pc, #112]	; (8007374 <xPortStartScheduler+0x134>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800730a:	4a1a      	ldr	r2, [pc, #104]	; (8007374 <xPortStartScheduler+0x134>)
 800730c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	b2da      	uxtb	r2, r3
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007316:	4b18      	ldr	r3, [pc, #96]	; (8007378 <xPortStartScheduler+0x138>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a17      	ldr	r2, [pc, #92]	; (8007378 <xPortStartScheduler+0x138>)
 800731c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007320:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007322:	4b15      	ldr	r3, [pc, #84]	; (8007378 <xPortStartScheduler+0x138>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a14      	ldr	r2, [pc, #80]	; (8007378 <xPortStartScheduler+0x138>)
 8007328:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800732c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800732e:	f000 f8dd 	bl	80074ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007332:	4b12      	ldr	r3, [pc, #72]	; (800737c <xPortStartScheduler+0x13c>)
 8007334:	2200      	movs	r2, #0
 8007336:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007338:	f000 f8fc 	bl	8007534 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800733c:	4b10      	ldr	r3, [pc, #64]	; (8007380 <xPortStartScheduler+0x140>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a0f      	ldr	r2, [pc, #60]	; (8007380 <xPortStartScheduler+0x140>)
 8007342:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007346:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007348:	f7ff ff66 	bl	8007218 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800734c:	f7fe ff4e 	bl	80061ec <vTaskSwitchContext>
	prvTaskExitError();
 8007350:	f7ff ff22 	bl	8007198 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3718      	adds	r7, #24
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	e000ed00 	.word	0xe000ed00
 8007364:	410fc271 	.word	0x410fc271
 8007368:	410fc270 	.word	0x410fc270
 800736c:	e000e400 	.word	0xe000e400
 8007370:	20000fd8 	.word	0x20000fd8
 8007374:	20000fdc 	.word	0x20000fdc
 8007378:	e000ed20 	.word	0xe000ed20
 800737c:	20000014 	.word	0x20000014
 8007380:	e000ef34 	.word	0xe000ef34

08007384 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
	__asm volatile
 800738a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800738e:	f383 8811 	msr	BASEPRI, r3
 8007392:	f3bf 8f6f 	isb	sy
 8007396:	f3bf 8f4f 	dsb	sy
 800739a:	607b      	str	r3, [r7, #4]
}
 800739c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800739e:	4b0f      	ldr	r3, [pc, #60]	; (80073dc <vPortEnterCritical+0x58>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	3301      	adds	r3, #1
 80073a4:	4a0d      	ldr	r2, [pc, #52]	; (80073dc <vPortEnterCritical+0x58>)
 80073a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80073a8:	4b0c      	ldr	r3, [pc, #48]	; (80073dc <vPortEnterCritical+0x58>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d10f      	bne.n	80073d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80073b0:	4b0b      	ldr	r3, [pc, #44]	; (80073e0 <vPortEnterCritical+0x5c>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d00a      	beq.n	80073d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80073ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073be:	f383 8811 	msr	BASEPRI, r3
 80073c2:	f3bf 8f6f 	isb	sy
 80073c6:	f3bf 8f4f 	dsb	sy
 80073ca:	603b      	str	r3, [r7, #0]
}
 80073cc:	bf00      	nop
 80073ce:	e7fe      	b.n	80073ce <vPortEnterCritical+0x4a>
	}
}
 80073d0:	bf00      	nop
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr
 80073dc:	20000014 	.word	0x20000014
 80073e0:	e000ed04 	.word	0xe000ed04

080073e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80073ea:	4b12      	ldr	r3, [pc, #72]	; (8007434 <vPortExitCritical+0x50>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d10a      	bne.n	8007408 <vPortExitCritical+0x24>
	__asm volatile
 80073f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f6:	f383 8811 	msr	BASEPRI, r3
 80073fa:	f3bf 8f6f 	isb	sy
 80073fe:	f3bf 8f4f 	dsb	sy
 8007402:	607b      	str	r3, [r7, #4]
}
 8007404:	bf00      	nop
 8007406:	e7fe      	b.n	8007406 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007408:	4b0a      	ldr	r3, [pc, #40]	; (8007434 <vPortExitCritical+0x50>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	3b01      	subs	r3, #1
 800740e:	4a09      	ldr	r2, [pc, #36]	; (8007434 <vPortExitCritical+0x50>)
 8007410:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007412:	4b08      	ldr	r3, [pc, #32]	; (8007434 <vPortExitCritical+0x50>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d105      	bne.n	8007426 <vPortExitCritical+0x42>
 800741a:	2300      	movs	r3, #0
 800741c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	f383 8811 	msr	BASEPRI, r3
}
 8007424:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007426:	bf00      	nop
 8007428:	370c      	adds	r7, #12
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr
 8007432:	bf00      	nop
 8007434:	20000014 	.word	0x20000014
	...

08007440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007440:	f3ef 8009 	mrs	r0, PSP
 8007444:	f3bf 8f6f 	isb	sy
 8007448:	4b15      	ldr	r3, [pc, #84]	; (80074a0 <pxCurrentTCBConst>)
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	f01e 0f10 	tst.w	lr, #16
 8007450:	bf08      	it	eq
 8007452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800745a:	6010      	str	r0, [r2, #0]
 800745c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007460:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007464:	f380 8811 	msr	BASEPRI, r0
 8007468:	f3bf 8f4f 	dsb	sy
 800746c:	f3bf 8f6f 	isb	sy
 8007470:	f7fe febc 	bl	80061ec <vTaskSwitchContext>
 8007474:	f04f 0000 	mov.w	r0, #0
 8007478:	f380 8811 	msr	BASEPRI, r0
 800747c:	bc09      	pop	{r0, r3}
 800747e:	6819      	ldr	r1, [r3, #0]
 8007480:	6808      	ldr	r0, [r1, #0]
 8007482:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007486:	f01e 0f10 	tst.w	lr, #16
 800748a:	bf08      	it	eq
 800748c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007490:	f380 8809 	msr	PSP, r0
 8007494:	f3bf 8f6f 	isb	sy
 8007498:	4770      	bx	lr
 800749a:	bf00      	nop
 800749c:	f3af 8000 	nop.w

080074a0 <pxCurrentTCBConst>:
 80074a0:	200009ac 	.word	0x200009ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80074a4:	bf00      	nop
 80074a6:	bf00      	nop

080074a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
	__asm volatile
 80074ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b2:	f383 8811 	msr	BASEPRI, r3
 80074b6:	f3bf 8f6f 	isb	sy
 80074ba:	f3bf 8f4f 	dsb	sy
 80074be:	607b      	str	r3, [r7, #4]
}
 80074c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80074c2:	f7fe fdd9 	bl	8006078 <xTaskIncrementTick>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d003      	beq.n	80074d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80074cc:	4b06      	ldr	r3, [pc, #24]	; (80074e8 <xPortSysTickHandler+0x40>)
 80074ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074d2:	601a      	str	r2, [r3, #0]
 80074d4:	2300      	movs	r3, #0
 80074d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	f383 8811 	msr	BASEPRI, r3
}
 80074de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80074e0:	bf00      	nop
 80074e2:	3708      	adds	r7, #8
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	e000ed04 	.word	0xe000ed04

080074ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80074ec:	b480      	push	{r7}
 80074ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80074f0:	4b0b      	ldr	r3, [pc, #44]	; (8007520 <vPortSetupTimerInterrupt+0x34>)
 80074f2:	2200      	movs	r2, #0
 80074f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80074f6:	4b0b      	ldr	r3, [pc, #44]	; (8007524 <vPortSetupTimerInterrupt+0x38>)
 80074f8:	2200      	movs	r2, #0
 80074fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80074fc:	4b0a      	ldr	r3, [pc, #40]	; (8007528 <vPortSetupTimerInterrupt+0x3c>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a0a      	ldr	r2, [pc, #40]	; (800752c <vPortSetupTimerInterrupt+0x40>)
 8007502:	fba2 2303 	umull	r2, r3, r2, r3
 8007506:	099b      	lsrs	r3, r3, #6
 8007508:	4a09      	ldr	r2, [pc, #36]	; (8007530 <vPortSetupTimerInterrupt+0x44>)
 800750a:	3b01      	subs	r3, #1
 800750c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800750e:	4b04      	ldr	r3, [pc, #16]	; (8007520 <vPortSetupTimerInterrupt+0x34>)
 8007510:	2207      	movs	r2, #7
 8007512:	601a      	str	r2, [r3, #0]
}
 8007514:	bf00      	nop
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr
 800751e:	bf00      	nop
 8007520:	e000e010 	.word	0xe000e010
 8007524:	e000e018 	.word	0xe000e018
 8007528:	20000008 	.word	0x20000008
 800752c:	10624dd3 	.word	0x10624dd3
 8007530:	e000e014 	.word	0xe000e014

08007534 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007534:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007544 <vPortEnableVFP+0x10>
 8007538:	6801      	ldr	r1, [r0, #0]
 800753a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800753e:	6001      	str	r1, [r0, #0]
 8007540:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007542:	bf00      	nop
 8007544:	e000ed88 	.word	0xe000ed88

08007548 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007548:	b480      	push	{r7}
 800754a:	b085      	sub	sp, #20
 800754c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800754e:	f3ef 8305 	mrs	r3, IPSR
 8007552:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2b0f      	cmp	r3, #15
 8007558:	d914      	bls.n	8007584 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800755a:	4a17      	ldr	r2, [pc, #92]	; (80075b8 <vPortValidateInterruptPriority+0x70>)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	4413      	add	r3, r2
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007564:	4b15      	ldr	r3, [pc, #84]	; (80075bc <vPortValidateInterruptPriority+0x74>)
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	7afa      	ldrb	r2, [r7, #11]
 800756a:	429a      	cmp	r2, r3
 800756c:	d20a      	bcs.n	8007584 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800756e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007572:	f383 8811 	msr	BASEPRI, r3
 8007576:	f3bf 8f6f 	isb	sy
 800757a:	f3bf 8f4f 	dsb	sy
 800757e:	607b      	str	r3, [r7, #4]
}
 8007580:	bf00      	nop
 8007582:	e7fe      	b.n	8007582 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007584:	4b0e      	ldr	r3, [pc, #56]	; (80075c0 <vPortValidateInterruptPriority+0x78>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800758c:	4b0d      	ldr	r3, [pc, #52]	; (80075c4 <vPortValidateInterruptPriority+0x7c>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	429a      	cmp	r2, r3
 8007592:	d90a      	bls.n	80075aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007598:	f383 8811 	msr	BASEPRI, r3
 800759c:	f3bf 8f6f 	isb	sy
 80075a0:	f3bf 8f4f 	dsb	sy
 80075a4:	603b      	str	r3, [r7, #0]
}
 80075a6:	bf00      	nop
 80075a8:	e7fe      	b.n	80075a8 <vPortValidateInterruptPriority+0x60>
	}
 80075aa:	bf00      	nop
 80075ac:	3714      	adds	r7, #20
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr
 80075b6:	bf00      	nop
 80075b8:	e000e3f0 	.word	0xe000e3f0
 80075bc:	20000fd8 	.word	0x20000fd8
 80075c0:	e000ed0c 	.word	0xe000ed0c
 80075c4:	20000fdc 	.word	0x20000fdc

080075c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b08a      	sub	sp, #40	; 0x28
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80075d0:	2300      	movs	r3, #0
 80075d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80075d4:	f7fe fc94 	bl	8005f00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80075d8:	4b5b      	ldr	r3, [pc, #364]	; (8007748 <pvPortMalloc+0x180>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d101      	bne.n	80075e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80075e0:	f000 f920 	bl	8007824 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80075e4:	4b59      	ldr	r3, [pc, #356]	; (800774c <pvPortMalloc+0x184>)
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	4013      	ands	r3, r2
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	f040 8093 	bne.w	8007718 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d01d      	beq.n	8007634 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80075f8:	2208      	movs	r2, #8
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4413      	add	r3, r2
 80075fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f003 0307 	and.w	r3, r3, #7
 8007606:	2b00      	cmp	r3, #0
 8007608:	d014      	beq.n	8007634 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f023 0307 	bic.w	r3, r3, #7
 8007610:	3308      	adds	r3, #8
 8007612:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f003 0307 	and.w	r3, r3, #7
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00a      	beq.n	8007634 <pvPortMalloc+0x6c>
	__asm volatile
 800761e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007622:	f383 8811 	msr	BASEPRI, r3
 8007626:	f3bf 8f6f 	isb	sy
 800762a:	f3bf 8f4f 	dsb	sy
 800762e:	617b      	str	r3, [r7, #20]
}
 8007630:	bf00      	nop
 8007632:	e7fe      	b.n	8007632 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d06e      	beq.n	8007718 <pvPortMalloc+0x150>
 800763a:	4b45      	ldr	r3, [pc, #276]	; (8007750 <pvPortMalloc+0x188>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	429a      	cmp	r2, r3
 8007642:	d869      	bhi.n	8007718 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007644:	4b43      	ldr	r3, [pc, #268]	; (8007754 <pvPortMalloc+0x18c>)
 8007646:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007648:	4b42      	ldr	r3, [pc, #264]	; (8007754 <pvPortMalloc+0x18c>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800764e:	e004      	b.n	800765a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007652:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800765a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	429a      	cmp	r2, r3
 8007662:	d903      	bls.n	800766c <pvPortMalloc+0xa4>
 8007664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d1f1      	bne.n	8007650 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800766c:	4b36      	ldr	r3, [pc, #216]	; (8007748 <pvPortMalloc+0x180>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007672:	429a      	cmp	r2, r3
 8007674:	d050      	beq.n	8007718 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007676:	6a3b      	ldr	r3, [r7, #32]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	2208      	movs	r2, #8
 800767c:	4413      	add	r3, r2
 800767e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	6a3b      	ldr	r3, [r7, #32]
 8007686:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768a:	685a      	ldr	r2, [r3, #4]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	1ad2      	subs	r2, r2, r3
 8007690:	2308      	movs	r3, #8
 8007692:	005b      	lsls	r3, r3, #1
 8007694:	429a      	cmp	r2, r3
 8007696:	d91f      	bls.n	80076d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	4413      	add	r3, r2
 800769e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	f003 0307 	and.w	r3, r3, #7
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d00a      	beq.n	80076c0 <pvPortMalloc+0xf8>
	__asm volatile
 80076aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ae:	f383 8811 	msr	BASEPRI, r3
 80076b2:	f3bf 8f6f 	isb	sy
 80076b6:	f3bf 8f4f 	dsb	sy
 80076ba:	613b      	str	r3, [r7, #16]
}
 80076bc:	bf00      	nop
 80076be:	e7fe      	b.n	80076be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80076c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c2:	685a      	ldr	r2, [r3, #4]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	1ad2      	subs	r2, r2, r3
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80076cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80076d2:	69b8      	ldr	r0, [r7, #24]
 80076d4:	f000 f908 	bl	80078e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80076d8:	4b1d      	ldr	r3, [pc, #116]	; (8007750 <pvPortMalloc+0x188>)
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	1ad3      	subs	r3, r2, r3
 80076e2:	4a1b      	ldr	r2, [pc, #108]	; (8007750 <pvPortMalloc+0x188>)
 80076e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80076e6:	4b1a      	ldr	r3, [pc, #104]	; (8007750 <pvPortMalloc+0x188>)
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	4b1b      	ldr	r3, [pc, #108]	; (8007758 <pvPortMalloc+0x190>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d203      	bcs.n	80076fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80076f2:	4b17      	ldr	r3, [pc, #92]	; (8007750 <pvPortMalloc+0x188>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a18      	ldr	r2, [pc, #96]	; (8007758 <pvPortMalloc+0x190>)
 80076f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80076fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fc:	685a      	ldr	r2, [r3, #4]
 80076fe:	4b13      	ldr	r3, [pc, #76]	; (800774c <pvPortMalloc+0x184>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	431a      	orrs	r2, r3
 8007704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007706:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770a:	2200      	movs	r2, #0
 800770c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800770e:	4b13      	ldr	r3, [pc, #76]	; (800775c <pvPortMalloc+0x194>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	3301      	adds	r3, #1
 8007714:	4a11      	ldr	r2, [pc, #68]	; (800775c <pvPortMalloc+0x194>)
 8007716:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007718:	f7fe fc00 	bl	8005f1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	f003 0307 	and.w	r3, r3, #7
 8007722:	2b00      	cmp	r3, #0
 8007724:	d00a      	beq.n	800773c <pvPortMalloc+0x174>
	__asm volatile
 8007726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800772a:	f383 8811 	msr	BASEPRI, r3
 800772e:	f3bf 8f6f 	isb	sy
 8007732:	f3bf 8f4f 	dsb	sy
 8007736:	60fb      	str	r3, [r7, #12]
}
 8007738:	bf00      	nop
 800773a:	e7fe      	b.n	800773a <pvPortMalloc+0x172>
	return pvReturn;
 800773c:	69fb      	ldr	r3, [r7, #28]
}
 800773e:	4618      	mov	r0, r3
 8007740:	3728      	adds	r7, #40	; 0x28
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	20001ba0 	.word	0x20001ba0
 800774c:	20001bb4 	.word	0x20001bb4
 8007750:	20001ba4 	.word	0x20001ba4
 8007754:	20001b98 	.word	0x20001b98
 8007758:	20001ba8 	.word	0x20001ba8
 800775c:	20001bac 	.word	0x20001bac

08007760 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b086      	sub	sp, #24
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d04d      	beq.n	800780e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007772:	2308      	movs	r3, #8
 8007774:	425b      	negs	r3, r3
 8007776:	697a      	ldr	r2, [r7, #20]
 8007778:	4413      	add	r3, r2
 800777a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	685a      	ldr	r2, [r3, #4]
 8007784:	4b24      	ldr	r3, [pc, #144]	; (8007818 <vPortFree+0xb8>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4013      	ands	r3, r2
 800778a:	2b00      	cmp	r3, #0
 800778c:	d10a      	bne.n	80077a4 <vPortFree+0x44>
	__asm volatile
 800778e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007792:	f383 8811 	msr	BASEPRI, r3
 8007796:	f3bf 8f6f 	isb	sy
 800779a:	f3bf 8f4f 	dsb	sy
 800779e:	60fb      	str	r3, [r7, #12]
}
 80077a0:	bf00      	nop
 80077a2:	e7fe      	b.n	80077a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d00a      	beq.n	80077c2 <vPortFree+0x62>
	__asm volatile
 80077ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b0:	f383 8811 	msr	BASEPRI, r3
 80077b4:	f3bf 8f6f 	isb	sy
 80077b8:	f3bf 8f4f 	dsb	sy
 80077bc:	60bb      	str	r3, [r7, #8]
}
 80077be:	bf00      	nop
 80077c0:	e7fe      	b.n	80077c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	685a      	ldr	r2, [r3, #4]
 80077c6:	4b14      	ldr	r3, [pc, #80]	; (8007818 <vPortFree+0xb8>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4013      	ands	r3, r2
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d01e      	beq.n	800780e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d11a      	bne.n	800780e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	685a      	ldr	r2, [r3, #4]
 80077dc:	4b0e      	ldr	r3, [pc, #56]	; (8007818 <vPortFree+0xb8>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	43db      	mvns	r3, r3
 80077e2:	401a      	ands	r2, r3
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80077e8:	f7fe fb8a 	bl	8005f00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	685a      	ldr	r2, [r3, #4]
 80077f0:	4b0a      	ldr	r3, [pc, #40]	; (800781c <vPortFree+0xbc>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4413      	add	r3, r2
 80077f6:	4a09      	ldr	r2, [pc, #36]	; (800781c <vPortFree+0xbc>)
 80077f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80077fa:	6938      	ldr	r0, [r7, #16]
 80077fc:	f000 f874 	bl	80078e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007800:	4b07      	ldr	r3, [pc, #28]	; (8007820 <vPortFree+0xc0>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	3301      	adds	r3, #1
 8007806:	4a06      	ldr	r2, [pc, #24]	; (8007820 <vPortFree+0xc0>)
 8007808:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800780a:	f7fe fb87 	bl	8005f1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800780e:	bf00      	nop
 8007810:	3718      	adds	r7, #24
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	20001bb4 	.word	0x20001bb4
 800781c:	20001ba4 	.word	0x20001ba4
 8007820:	20001bb0 	.word	0x20001bb0

08007824 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007824:	b480      	push	{r7}
 8007826:	b085      	sub	sp, #20
 8007828:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800782a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800782e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007830:	4b27      	ldr	r3, [pc, #156]	; (80078d0 <prvHeapInit+0xac>)
 8007832:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f003 0307 	and.w	r3, r3, #7
 800783a:	2b00      	cmp	r3, #0
 800783c:	d00c      	beq.n	8007858 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	3307      	adds	r3, #7
 8007842:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f023 0307 	bic.w	r3, r3, #7
 800784a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800784c:	68ba      	ldr	r2, [r7, #8]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	1ad3      	subs	r3, r2, r3
 8007852:	4a1f      	ldr	r2, [pc, #124]	; (80078d0 <prvHeapInit+0xac>)
 8007854:	4413      	add	r3, r2
 8007856:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800785c:	4a1d      	ldr	r2, [pc, #116]	; (80078d4 <prvHeapInit+0xb0>)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007862:	4b1c      	ldr	r3, [pc, #112]	; (80078d4 <prvHeapInit+0xb0>)
 8007864:	2200      	movs	r2, #0
 8007866:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	68ba      	ldr	r2, [r7, #8]
 800786c:	4413      	add	r3, r2
 800786e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007870:	2208      	movs	r2, #8
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	1a9b      	subs	r3, r3, r2
 8007876:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f023 0307 	bic.w	r3, r3, #7
 800787e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	4a15      	ldr	r2, [pc, #84]	; (80078d8 <prvHeapInit+0xb4>)
 8007884:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007886:	4b14      	ldr	r3, [pc, #80]	; (80078d8 <prvHeapInit+0xb4>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2200      	movs	r2, #0
 800788c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800788e:	4b12      	ldr	r3, [pc, #72]	; (80078d8 <prvHeapInit+0xb4>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	2200      	movs	r2, #0
 8007894:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	1ad2      	subs	r2, r2, r3
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80078a4:	4b0c      	ldr	r3, [pc, #48]	; (80078d8 <prvHeapInit+0xb4>)
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	4a0a      	ldr	r2, [pc, #40]	; (80078dc <prvHeapInit+0xb8>)
 80078b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	4a09      	ldr	r2, [pc, #36]	; (80078e0 <prvHeapInit+0xbc>)
 80078ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80078bc:	4b09      	ldr	r3, [pc, #36]	; (80078e4 <prvHeapInit+0xc0>)
 80078be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80078c2:	601a      	str	r2, [r3, #0]
}
 80078c4:	bf00      	nop
 80078c6:	3714      	adds	r7, #20
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr
 80078d0:	20000fe0 	.word	0x20000fe0
 80078d4:	20001b98 	.word	0x20001b98
 80078d8:	20001ba0 	.word	0x20001ba0
 80078dc:	20001ba8 	.word	0x20001ba8
 80078e0:	20001ba4 	.word	0x20001ba4
 80078e4:	20001bb4 	.word	0x20001bb4

080078e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80078e8:	b480      	push	{r7}
 80078ea:	b085      	sub	sp, #20
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80078f0:	4b28      	ldr	r3, [pc, #160]	; (8007994 <prvInsertBlockIntoFreeList+0xac>)
 80078f2:	60fb      	str	r3, [r7, #12]
 80078f4:	e002      	b.n	80078fc <prvInsertBlockIntoFreeList+0x14>
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	60fb      	str	r3, [r7, #12]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	429a      	cmp	r2, r3
 8007904:	d8f7      	bhi.n	80078f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	68ba      	ldr	r2, [r7, #8]
 8007910:	4413      	add	r3, r2
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	429a      	cmp	r2, r3
 8007916:	d108      	bne.n	800792a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	685a      	ldr	r2, [r3, #4]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	441a      	add	r2, r3
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	68ba      	ldr	r2, [r7, #8]
 8007934:	441a      	add	r2, r3
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	429a      	cmp	r2, r3
 800793c:	d118      	bne.n	8007970 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	4b15      	ldr	r3, [pc, #84]	; (8007998 <prvInsertBlockIntoFreeList+0xb0>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	429a      	cmp	r2, r3
 8007948:	d00d      	beq.n	8007966 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	685a      	ldr	r2, [r3, #4]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	441a      	add	r2, r3
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	601a      	str	r2, [r3, #0]
 8007964:	e008      	b.n	8007978 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007966:	4b0c      	ldr	r3, [pc, #48]	; (8007998 <prvInsertBlockIntoFreeList+0xb0>)
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	601a      	str	r2, [r3, #0]
 800796e:	e003      	b.n	8007978 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007978:	68fa      	ldr	r2, [r7, #12]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	429a      	cmp	r2, r3
 800797e:	d002      	beq.n	8007986 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007986:	bf00      	nop
 8007988:	3714      	adds	r7, #20
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	20001b98 	.word	0x20001b98
 8007998:	20001ba0 	.word	0x20001ba0

0800799c <__libc_init_array>:
 800799c:	b570      	push	{r4, r5, r6, lr}
 800799e:	4d0d      	ldr	r5, [pc, #52]	; (80079d4 <__libc_init_array+0x38>)
 80079a0:	4c0d      	ldr	r4, [pc, #52]	; (80079d8 <__libc_init_array+0x3c>)
 80079a2:	1b64      	subs	r4, r4, r5
 80079a4:	10a4      	asrs	r4, r4, #2
 80079a6:	2600      	movs	r6, #0
 80079a8:	42a6      	cmp	r6, r4
 80079aa:	d109      	bne.n	80079c0 <__libc_init_array+0x24>
 80079ac:	4d0b      	ldr	r5, [pc, #44]	; (80079dc <__libc_init_array+0x40>)
 80079ae:	4c0c      	ldr	r4, [pc, #48]	; (80079e0 <__libc_init_array+0x44>)
 80079b0:	f000 f8f2 	bl	8007b98 <_init>
 80079b4:	1b64      	subs	r4, r4, r5
 80079b6:	10a4      	asrs	r4, r4, #2
 80079b8:	2600      	movs	r6, #0
 80079ba:	42a6      	cmp	r6, r4
 80079bc:	d105      	bne.n	80079ca <__libc_init_array+0x2e>
 80079be:	bd70      	pop	{r4, r5, r6, pc}
 80079c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80079c4:	4798      	blx	r3
 80079c6:	3601      	adds	r6, #1
 80079c8:	e7ee      	b.n	80079a8 <__libc_init_array+0xc>
 80079ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80079ce:	4798      	blx	r3
 80079d0:	3601      	adds	r6, #1
 80079d2:	e7f2      	b.n	80079ba <__libc_init_array+0x1e>
 80079d4:	08007d18 	.word	0x08007d18
 80079d8:	08007d18 	.word	0x08007d18
 80079dc:	08007d18 	.word	0x08007d18
 80079e0:	08007d1c 	.word	0x08007d1c

080079e4 <__retarget_lock_acquire_recursive>:
 80079e4:	4770      	bx	lr

080079e6 <__retarget_lock_release_recursive>:
 80079e6:	4770      	bx	lr

080079e8 <memcpy>:
 80079e8:	440a      	add	r2, r1
 80079ea:	4291      	cmp	r1, r2
 80079ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80079f0:	d100      	bne.n	80079f4 <memcpy+0xc>
 80079f2:	4770      	bx	lr
 80079f4:	b510      	push	{r4, lr}
 80079f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079fe:	4291      	cmp	r1, r2
 8007a00:	d1f9      	bne.n	80079f6 <memcpy+0xe>
 8007a02:	bd10      	pop	{r4, pc}

08007a04 <memset>:
 8007a04:	4402      	add	r2, r0
 8007a06:	4603      	mov	r3, r0
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d100      	bne.n	8007a0e <memset+0xa>
 8007a0c:	4770      	bx	lr
 8007a0e:	f803 1b01 	strb.w	r1, [r3], #1
 8007a12:	e7f9      	b.n	8007a08 <memset+0x4>

08007a14 <cleanup_glue>:
 8007a14:	b538      	push	{r3, r4, r5, lr}
 8007a16:	460c      	mov	r4, r1
 8007a18:	6809      	ldr	r1, [r1, #0]
 8007a1a:	4605      	mov	r5, r0
 8007a1c:	b109      	cbz	r1, 8007a22 <cleanup_glue+0xe>
 8007a1e:	f7ff fff9 	bl	8007a14 <cleanup_glue>
 8007a22:	4621      	mov	r1, r4
 8007a24:	4628      	mov	r0, r5
 8007a26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a2a:	f000 b869 	b.w	8007b00 <_free_r>
	...

08007a30 <_reclaim_reent>:
 8007a30:	4b2c      	ldr	r3, [pc, #176]	; (8007ae4 <_reclaim_reent+0xb4>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4283      	cmp	r3, r0
 8007a36:	b570      	push	{r4, r5, r6, lr}
 8007a38:	4604      	mov	r4, r0
 8007a3a:	d051      	beq.n	8007ae0 <_reclaim_reent+0xb0>
 8007a3c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007a3e:	b143      	cbz	r3, 8007a52 <_reclaim_reent+0x22>
 8007a40:	68db      	ldr	r3, [r3, #12]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d14a      	bne.n	8007adc <_reclaim_reent+0xac>
 8007a46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a48:	6819      	ldr	r1, [r3, #0]
 8007a4a:	b111      	cbz	r1, 8007a52 <_reclaim_reent+0x22>
 8007a4c:	4620      	mov	r0, r4
 8007a4e:	f000 f857 	bl	8007b00 <_free_r>
 8007a52:	6961      	ldr	r1, [r4, #20]
 8007a54:	b111      	cbz	r1, 8007a5c <_reclaim_reent+0x2c>
 8007a56:	4620      	mov	r0, r4
 8007a58:	f000 f852 	bl	8007b00 <_free_r>
 8007a5c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007a5e:	b111      	cbz	r1, 8007a66 <_reclaim_reent+0x36>
 8007a60:	4620      	mov	r0, r4
 8007a62:	f000 f84d 	bl	8007b00 <_free_r>
 8007a66:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007a68:	b111      	cbz	r1, 8007a70 <_reclaim_reent+0x40>
 8007a6a:	4620      	mov	r0, r4
 8007a6c:	f000 f848 	bl	8007b00 <_free_r>
 8007a70:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007a72:	b111      	cbz	r1, 8007a7a <_reclaim_reent+0x4a>
 8007a74:	4620      	mov	r0, r4
 8007a76:	f000 f843 	bl	8007b00 <_free_r>
 8007a7a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007a7c:	b111      	cbz	r1, 8007a84 <_reclaim_reent+0x54>
 8007a7e:	4620      	mov	r0, r4
 8007a80:	f000 f83e 	bl	8007b00 <_free_r>
 8007a84:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007a86:	b111      	cbz	r1, 8007a8e <_reclaim_reent+0x5e>
 8007a88:	4620      	mov	r0, r4
 8007a8a:	f000 f839 	bl	8007b00 <_free_r>
 8007a8e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007a90:	b111      	cbz	r1, 8007a98 <_reclaim_reent+0x68>
 8007a92:	4620      	mov	r0, r4
 8007a94:	f000 f834 	bl	8007b00 <_free_r>
 8007a98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a9a:	b111      	cbz	r1, 8007aa2 <_reclaim_reent+0x72>
 8007a9c:	4620      	mov	r0, r4
 8007a9e:	f000 f82f 	bl	8007b00 <_free_r>
 8007aa2:	69a3      	ldr	r3, [r4, #24]
 8007aa4:	b1e3      	cbz	r3, 8007ae0 <_reclaim_reent+0xb0>
 8007aa6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007aa8:	4620      	mov	r0, r4
 8007aaa:	4798      	blx	r3
 8007aac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007aae:	b1b9      	cbz	r1, 8007ae0 <_reclaim_reent+0xb0>
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007ab6:	f7ff bfad 	b.w	8007a14 <cleanup_glue>
 8007aba:	5949      	ldr	r1, [r1, r5]
 8007abc:	b941      	cbnz	r1, 8007ad0 <_reclaim_reent+0xa0>
 8007abe:	3504      	adds	r5, #4
 8007ac0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ac2:	2d80      	cmp	r5, #128	; 0x80
 8007ac4:	68d9      	ldr	r1, [r3, #12]
 8007ac6:	d1f8      	bne.n	8007aba <_reclaim_reent+0x8a>
 8007ac8:	4620      	mov	r0, r4
 8007aca:	f000 f819 	bl	8007b00 <_free_r>
 8007ace:	e7ba      	b.n	8007a46 <_reclaim_reent+0x16>
 8007ad0:	680e      	ldr	r6, [r1, #0]
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	f000 f814 	bl	8007b00 <_free_r>
 8007ad8:	4631      	mov	r1, r6
 8007ada:	e7ef      	b.n	8007abc <_reclaim_reent+0x8c>
 8007adc:	2500      	movs	r5, #0
 8007ade:	e7ef      	b.n	8007ac0 <_reclaim_reent+0x90>
 8007ae0:	bd70      	pop	{r4, r5, r6, pc}
 8007ae2:	bf00      	nop
 8007ae4:	20000018 	.word	0x20000018

08007ae8 <__malloc_lock>:
 8007ae8:	4801      	ldr	r0, [pc, #4]	; (8007af0 <__malloc_lock+0x8>)
 8007aea:	f7ff bf7b 	b.w	80079e4 <__retarget_lock_acquire_recursive>
 8007aee:	bf00      	nop
 8007af0:	20001bb8 	.word	0x20001bb8

08007af4 <__malloc_unlock>:
 8007af4:	4801      	ldr	r0, [pc, #4]	; (8007afc <__malloc_unlock+0x8>)
 8007af6:	f7ff bf76 	b.w	80079e6 <__retarget_lock_release_recursive>
 8007afa:	bf00      	nop
 8007afc:	20001bb8 	.word	0x20001bb8

08007b00 <_free_r>:
 8007b00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b02:	2900      	cmp	r1, #0
 8007b04:	d044      	beq.n	8007b90 <_free_r+0x90>
 8007b06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b0a:	9001      	str	r0, [sp, #4]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	f1a1 0404 	sub.w	r4, r1, #4
 8007b12:	bfb8      	it	lt
 8007b14:	18e4      	addlt	r4, r4, r3
 8007b16:	f7ff ffe7 	bl	8007ae8 <__malloc_lock>
 8007b1a:	4a1e      	ldr	r2, [pc, #120]	; (8007b94 <_free_r+0x94>)
 8007b1c:	9801      	ldr	r0, [sp, #4]
 8007b1e:	6813      	ldr	r3, [r2, #0]
 8007b20:	b933      	cbnz	r3, 8007b30 <_free_r+0x30>
 8007b22:	6063      	str	r3, [r4, #4]
 8007b24:	6014      	str	r4, [r2, #0]
 8007b26:	b003      	add	sp, #12
 8007b28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b2c:	f7ff bfe2 	b.w	8007af4 <__malloc_unlock>
 8007b30:	42a3      	cmp	r3, r4
 8007b32:	d908      	bls.n	8007b46 <_free_r+0x46>
 8007b34:	6825      	ldr	r5, [r4, #0]
 8007b36:	1961      	adds	r1, r4, r5
 8007b38:	428b      	cmp	r3, r1
 8007b3a:	bf01      	itttt	eq
 8007b3c:	6819      	ldreq	r1, [r3, #0]
 8007b3e:	685b      	ldreq	r3, [r3, #4]
 8007b40:	1949      	addeq	r1, r1, r5
 8007b42:	6021      	streq	r1, [r4, #0]
 8007b44:	e7ed      	b.n	8007b22 <_free_r+0x22>
 8007b46:	461a      	mov	r2, r3
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	b10b      	cbz	r3, 8007b50 <_free_r+0x50>
 8007b4c:	42a3      	cmp	r3, r4
 8007b4e:	d9fa      	bls.n	8007b46 <_free_r+0x46>
 8007b50:	6811      	ldr	r1, [r2, #0]
 8007b52:	1855      	adds	r5, r2, r1
 8007b54:	42a5      	cmp	r5, r4
 8007b56:	d10b      	bne.n	8007b70 <_free_r+0x70>
 8007b58:	6824      	ldr	r4, [r4, #0]
 8007b5a:	4421      	add	r1, r4
 8007b5c:	1854      	adds	r4, r2, r1
 8007b5e:	42a3      	cmp	r3, r4
 8007b60:	6011      	str	r1, [r2, #0]
 8007b62:	d1e0      	bne.n	8007b26 <_free_r+0x26>
 8007b64:	681c      	ldr	r4, [r3, #0]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	6053      	str	r3, [r2, #4]
 8007b6a:	4421      	add	r1, r4
 8007b6c:	6011      	str	r1, [r2, #0]
 8007b6e:	e7da      	b.n	8007b26 <_free_r+0x26>
 8007b70:	d902      	bls.n	8007b78 <_free_r+0x78>
 8007b72:	230c      	movs	r3, #12
 8007b74:	6003      	str	r3, [r0, #0]
 8007b76:	e7d6      	b.n	8007b26 <_free_r+0x26>
 8007b78:	6825      	ldr	r5, [r4, #0]
 8007b7a:	1961      	adds	r1, r4, r5
 8007b7c:	428b      	cmp	r3, r1
 8007b7e:	bf04      	itt	eq
 8007b80:	6819      	ldreq	r1, [r3, #0]
 8007b82:	685b      	ldreq	r3, [r3, #4]
 8007b84:	6063      	str	r3, [r4, #4]
 8007b86:	bf04      	itt	eq
 8007b88:	1949      	addeq	r1, r1, r5
 8007b8a:	6021      	streq	r1, [r4, #0]
 8007b8c:	6054      	str	r4, [r2, #4]
 8007b8e:	e7ca      	b.n	8007b26 <_free_r+0x26>
 8007b90:	b003      	add	sp, #12
 8007b92:	bd30      	pop	{r4, r5, pc}
 8007b94:	20001bbc 	.word	0x20001bbc

08007b98 <_init>:
 8007b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b9a:	bf00      	nop
 8007b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b9e:	bc08      	pop	{r3}
 8007ba0:	469e      	mov	lr, r3
 8007ba2:	4770      	bx	lr

08007ba4 <_fini>:
 8007ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ba6:	bf00      	nop
 8007ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007baa:	bc08      	pop	{r3}
 8007bac:	469e      	mov	lr, r3
 8007bae:	4770      	bx	lr
